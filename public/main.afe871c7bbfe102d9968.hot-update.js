/*! For license information please see main.afe871c7bbfe102d9968.hot-update.js.LICENSE.txt */
self.webpackHotUpdatefloema("main",{"./app.js":(e,o,t)=>{if(t("./node_modules/dotenv/lib/main.js").config(),!process.env.PRISMIC_ENDPOINT||!process.env.PRISMIC_ACCESS_TOKEN)throw new Error("Missing required environment variables PRISMIC_ENDPOINT or PRISMIC_ACCESS_TOKEN");console.log(process.env.PRISMIC_ENDPOINT,process.env.PRISMIC_ACCESS_TOKEN);const r=t("./node_modules/express/index.js")(),a=t("./node_modules/path-browserify/index.js"),{createClient:s}=t("./node_modules/@prismicio/client/dist/index.cjs"),c=t("./node_modules/prismic-dom/dist/prismic-dom.min.js"),n=t(Object(function(){var e=new Error("Cannot find module 'node-fetch'");throw e.code="MODULE_NOT_FOUND",e}()));function i(e){return s(process.env.PRISMIC_ENDPOINT,{accessToken:process.env.PRISMIC_ACCESS_TOKEN,fetch:n})}const d=e=>"/";r.use(((e,o,t)=>{o.locals.ctx={endpoint:process.env.PRISMIC_ENDPOINT,linkResolver:d},o.locals.PrismicDOM=c,t()})),r.set("views",a.join("/","views")),r.set("view engine","pug");const l=async e=>{try{console.log("Fetching documents from Prismic...");const[o,t,r,{results:a}]=await Promise.all([e.getSingle("home"),e.getSingle("about"),e.getSingle("meta"),e.getByType("collection",{fetchLinks:"product.image"})]);console.log("Documents fetched:",{home:o,about:t,meta:r,collections:a});const s=[];return o&&o.data&&o.data.gallery&&o.data.gallery.forEach((e=>{e.image&&e.image.url&&s.push(e.image.url)})),t&&t.data&&t.data.gallery&&t.data.gallery.forEach((e=>{e.image&&e.image.url&&s.push(e.image.url)})),t&&t.data&&t.data.body&&t.data.body.forEach((e=>{"gallery"===e.slice_type&&e.items.forEach((e=>{e.image&&e.image.url&&s.push(e.image.url)}))})),a&&a.forEach((e=>{e.data&&e.data.products&&e.data.products.forEach((e=>{e.products_product&&e.products_product.data&&e.products_product.data.image&&s.push(e.products_product.data.image.url)}))})),{assets:s,meta:r,home:o,collections:a,about:t}}catch(e){throw console.error("Error fetching data from Prismic:",e),e}};r.get("/",(async(e,o)=>{try{const e=i(),t=await l(e);o.render("pages/home",{...t})}catch(e){console.error("Error in / route:",e),o.status(500).send("Error fetching data")}})),r.get("/about",(async(e,o)=>{try{const e=i(),t=await l(e);o.render("pages/about",{...t})}catch(e){console.error("Error in /about route:",e),o.status(500).send("Error fetching data")}})),r.get("/collections",(async(e,o)=>{try{const e=i(),t=await l(e);o.render("pages/collections",{...t})}catch(e){console.error("Error in /collections route:",e),o.status(500).send("Error fetching data")}})),r.get("/detail/:uid",(async(e,o)=>{try{const t=i(),r=await l(t),a=await t.getByUID("product",e.params.uid,{fetchLinks:"collection.title"});o.render("pages/detail",{...r,product:a})}catch(e){console.error("Error in /detail/:uid route:",e),o.status(500).send("Error fetching data")}})),r.listen(3e3,(()=>{console.log("Example app listening on port 3000")}))}},(function(e){e.h=()=>"4f53c598e512c95ad028"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,