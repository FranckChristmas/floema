/*! For license information please see main.baaf98e699699e3cbc94.hot-update.js.LICENSE.txt */
self.webpackHotUpdatefloema("main",{"./app/animations/Highlight.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});var s=i("./node_modules/gsap/index.js"),r=i("./app/classes/Animation.js");class n extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:1},{autoAlpha:1,duration:1.5})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Label.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});var s=i("./node_modules/gsap/index.js"),r=i("./app/classes/Animation.js");class n extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:1},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Paragraph.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});var s=i("./node_modules/gsap/index.js"),r=i("./app/classes/Animation.js");class n extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:1},{autoAlpha:1,duration:1})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Title.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});var s=i("./node_modules/gsap/index.js"),r=i("./app/classes/Animation.js");class n extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){s.default.fromTo(this.element,{autoAlpha:0,delay:1},{autoAlpha:1,duration:1.5})}animateOut(){s.default.set(this.element,{autoAlpha:0})}}},"./app/classes/Animation.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var s=i("./app/classes/Component.js");class r extends s.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.createObserver(),this.animateOut()}createObserver(){this.Observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting?this.animateIn():this.animateOut()}))})),this.Observer.observe(this.element)}animateIn(){}animateOut(){}}},"./app/classes/Asyncload.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var s=i("./app/classes/Component.js");class r extends s.default{constructor({element:t}){super({element:t}),this.createObserver()}createObserver(){this.Observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=t=>{this.element.classList.add("loaded")}))}))})),this.Observer.observe(this.element)}}},"./app/classes/Button.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});var s=i("./app/classes/Component.js"),r=i("./node_modules/gsap/index.js");class n extends s.default{constructor({element:t}){super({element:t}),this.path=t.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=r.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{ColorsManager:()=>r});var s=i("./node_modules/gsap/index.js");const r=new class{change({backgroundColor:t,color:e}){s.default.to(document.documentElement,{background:t,color:e,duration:1.5})}}},"./app/classes/Component.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n}),Object(function(){var t=new Error("Cannot find module 'lodash/each'");throw t.code="MODULE_NOT_FOUND",t}());var s=i("./node_modules/events/events.js"),r=i.n(s);class n extends(r()){constructor({element:t,elements:e}){super(),this.selector=t,this.selectorChildren={...e},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},this.element&&Object(function(){var t=new Error("Cannot find module 'lodash/each'");throw t.code="MODULE_NOT_FOUND",t}())(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>d});var s=i("./node_modules/gsap/index.js"),r=i("./node_modules/prefix/index.js"),n=i.n(r),a=i("./app/animations/Title.js"),o=i("./app/animations/Highlight.js"),h=i("./app/animations/Paragraph.js"),l=i("./app/animations/Label.js");Object(function(){var t=new Error("Cannot find module 'lodash/each'");throw t.code="MODULE_NOT_FOUND",t}()),Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}());var u=i("./app/classes/Colors.js"),c=(i("./app/components/preloader.js"),i("./app/classes/Asyncload.js"));class d{constructor({element:t,elements:e,id:i}){this.selector=t,this.selectorChildren={...e,animationsLabels:'[data-animation="label"]',animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=i,this.transformPrefix=n()("transform"),this.scroll={current:0,target:0,last:0,limit:1e3}}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},Object(function(){var t=new Error("Cannot find module 'lodash/each'");throw t.code="MODULE_NOT_FOUND",t}())(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))})),this.createAnimations(),this.createPreloader()}createAnimations(){this.animations=[],this.animationsTitles=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.elements.animationsTitles,(t=>new a.default({element:t}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.elements.animationsParagraphs,(t=>new h.default({element:t}))),this.animations.push(...this.animationsParagraphs),this.animationsLabels=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.elements.animationsLabels,(t=>new l.default({element:t}))),this.animations.push(...this.animationsLabels),this.animationsHighlights=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.elements.animationsHighlights,(t=>new o.default({element:t}))),this.animations.push(...this.animationsHighlights)}createPreloader(){this.preloaders=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.elements.preloaders,(t=>new c.default({element:t})))}show(t){return new Promise((e=>{u.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),t?this.animateIn=t:(this.animateIn=s.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1})),this.animateIn.call((t=>{this.addEventListeners(),e()}))}))}hide(){return new Promise((t=>{this.destroy(),this.animateOut=s.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:t})}))}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight)}onWheel({pixelY:t}){this.scroll.target+=t}update(){this.scroll.target=s.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=s.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/About/Gallery.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a}),Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}());var s=i("./app/components/Canvas/About/Media.js"),r=i("./node_modules/gsap/index.js"),n=i("./node_modules/ogl/src/core/Transform.js");class a{constructor({element:t,geometry:e,index:i,gl:s,scene:r,sizes:a}){this.element=t,this.elementWrapper=this.element.querySelector(".about__gallery__wrapper"),this.geometry=e,this.index=i,this.gl=s,this.scene=r,this.sizes=a,this.group=new n.Transform,this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}())(this.mediasElements,((t,e)=>new s.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>t.show()))}hide(){Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>t.hide()))}onResize(t){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(e=>e.onResize(t,this.scroll.current)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const i=t.start-t.end;this.scroll.target=this.scroll.start-i}onTouchUp({x:t,y:e}){}update(t){const e=.1*(t.current-t.target),i=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=r.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,((t,e)=>{const i=t.mesh.scale.x/2+.28;if("left"===this.direction){t.mesh.position.x+i<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-i>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)})),this.group.position.y=i*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var s=i("./app/components/Canvas/About/Gallery.js");Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}());var r=i("./node_modules/ogl/src/core/Transform.js"),n=i("./node_modules/ogl/src/extras/Plane.js");class a{constructor({gl:t,scene:e,sizes:i}){this.gl=t,this.sizes=i,this.group=new r.Transform,this.createGeometry(),this.createGalleries(),this.onResize({sizes:this.sizes}),this.group.setParent(e),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleriesElements,((t,e)=>new s.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(t=>t.show()))}hide(){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(t=>t.hide()))}onResize(t){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(e=>e.update(t)))}destroy(){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.galleries,(t=>t.destroy()))}}},"./app/components/Canvas/About/Media.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var s=i("./node_modules/ogl/src/core/Program.js"),r=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./app/shaders/plane-vertex.glsl"),a=i("./app/shaders/plane-fragment.glsl"),o=i("./node_modules/gsap/index.js");class h{constructor({element:t,geometry:e,gl:i,scene:s,index:r,sizes:n}){this.element=t,this.gl=i,this.geometry=e,this.scene=s,this.index=r,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{fragment:a.default,vertex:n.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){o.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){o.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra=0,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=o.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.11*Math.PI,.11*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(t){this.updateRotation(),this.updateScale(),this.updateX(t),this.updateY(0)}}},"./app/components/Canvas/Collections/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});var s=i("./node_modules/ogl/src/core/Transform.js"),r=i("./node_modules/ogl/src/extras/Plane.js"),n=i("./node_modules/gsap/index.js"),a=i("./node_modules/prefix/index.js"),o=i.n(a);Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}());var h=i("./app/components/Canvas/Collections/Media.js");const l=class{constructor({gl:t,scene:e,sizes:i,transition:r}){this.id="collections",this.gl=t,this.scene=e,this.sizes=i,this.transition=r,this.transformPrefix=o()("transform"),this.group=new s.Transform,this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.titlesElement=document.querySelector(".collections__titles"),this.collectionsElements=document.querySelectorAll(".collections__article"),this.collectionsElementsActive="collections__article--active",this.mediasElements=document.querySelectorAll(".collections__gallery__media"),this.scroll={current:0,start:0,target:0,lerp:.1,velocity:1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGallery(){this.medias=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.mediasElements,((t,e)=>new h.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}async show(){if(this.transition){const{src:t}=this.transition.mesh.program.uniforms.tMap.value.image,e=window.TEXTURES[t],i=this.medias.find((t=>t.texture===e)),s=-i.bounds.left-i.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({position:{x:0,y:i.mesh.position.y,z:0},rotation:i.mesh.rotation,scale:i.mesh.scale},(t=>{i.opacity.multiplier=1,Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>{i!==t&&t.show()})),this.scroll.current=this.scroll.target=this.scroll.start=this.scroll.last=s}))}else Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>t.show()))}hide(){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>t.hide()))}onResize(t){this.sizes=t.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(e=>e.onResize(t,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:t,y:e}){this.scroll.last=this.scroll.current}onTouchMove({x:t,y:e}){const i=t.start-t.end;this.scroll.target=this.scroll.last-i}onTouchUp({x:t,y:e}){}onWheel({pixelY:t}){this.scroll.target-=t}onChange(t){this.index=t;const e=parseInt(this.mediasElements[this.index].getAttribute("data-index"));Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.collectionsElements,((t,i)=>{i===e?t.classList.add(this.collectionsElementsActive):t.classList.remove(this.collectionsElementsActive)})),this.titlesElement.style[this.transformPrefix]=`translateY(-${25*e}%) translate(-50%, -50%) rotate(-90deg)`}update(){this.scroll.target=n.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current;const t=Math.floor(Math.abs((this.scroll.current-this.medias[0].bounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==t&&this.onChange(t),Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,((t,e)=>{t.update(this.scroll.current,this.index),t.mesh.rotation.z=Math.abs(n.default.utils.mapRange(0,1,-.2,.2,e/(this.medias.length-1)))-.1,t.mesh.position.y+=40*Math.cos(t.mesh.position.x/this.sizes.width*Math.PI*.1)-40}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Collections/Media.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var s=i("./node_modules/gsap/index.js"),r=i("./node_modules/ogl/src/core/Program.js"),n=i("./node_modules/ogl/src/core/Mesh.js"),a=i("./app/shaders/collections-fragment.glsl"),o=i("./app/shaders/collections-vertex.glsl");const h=class{constructor({element:t,geometry:e,gl:i,index:s,scene:r,sizes:n}){this.element=t,this.geometry=e,this.gl=i,this.index=s,this.scene=r,this.sizes=n,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector(".collections__gallery__media__image");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new r.Program(this.gl,{fragment:a.default,vertex:o.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX()}show(){s.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){s.default.to(this.opacity,{multiplier:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}update(t,e){this.updateX(t);this.mesh.rotation.z=-.02*Math.PI*Math.sin(this.index/1),this.mesh.position.y=.1*Math.sin(this.index/1),this.opacity.target=e===this.index?1:.4,this.opacity.current=s.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.multiplier,this.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current}}},"./app/components/Canvas/Detail/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});var s=i("./node_modules/gsap/index.js"),r=i("./node_modules/ogl/src/extras/Plane.js"),n=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),o=i("./app/shaders/plane-fragment.glsl"),h=i("./app/shaders/plane-vertex.glsl");const l=class{constructor({gl:t,scene:e,sizes:i,transition:s}){this.id="detail",this.element=document.querySelector(".detail__media__image"),this.gl=t,this.scene=e,this.sizes=i,this.transition=s,this.geometry=new r.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.show()}createTexture(){const t=this.element.getAttribute("data-src");this.texture=window.TEXTURES[t]}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:h.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.rotation.z=.01*Math.PI,this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){this.transition?this.transition.animate(this.mesh,(t=>{this.program.uniforms.uAlpha.value=1})):s.default.to(this.program.uniforms.uAlpha,{value:1})}hide(){s.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t){this.createBounds(t),this.updateX(),this.updateY()}onTouchDown(){}onTouchMove(){}onTouchUp(){}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(){this.x=this.bounds.left/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(){this.y=this.bounds.top/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(){this.updateX()}destroy(){this.scene.removeChild(this.mesh)}}},"./app/components/Canvas/Home/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var s=i("./app/components/Canvas/Home/Media.js");Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}());var r=i("./node_modules/ogl/src/core/Transform.js"),n=i("./node_modules/ogl/src/extras/Plane.js"),a=i("./node_modules/gsap/index.js");class o{constructor({gl:t,scene:e,sizes:i}){this.gl=t,this.sizes=i,this.scene=e,this.group=new r.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.mediaElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={target:0,current:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.mediaElements,((t,e)=>new s.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>t.show()))}hide(){Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(t=>t.hide()))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.gallerySizes={height:this.galleryBounds.height/window.innerHeight*this.sizes.height,width:this.galleryBounds.width/window.innerWidth*this.sizes.width},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,this.sizes=t.sizes,Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.speed.target=1,this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const i=t.start-t.end,s=e.start-e.end;this.x.target=this.scrollCurrent.x-i,this.y.target=this.scrollCurrent.y-s}onTouchUp({x:t,y:e}){this.speed.target=0}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target-=e}update(){this.speed.current=a.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=a.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=a.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,Object(function(){var t=new Error("Cannot find module 'lodash/map'");throw t.code="MODULE_NOT_FOUND",t}())(this.medias,((t,e)=>{const i=t.mesh.scale.x,s=this.sizes.width/2;if("left"===this.x.direction){t.mesh.position.x+i/2<-s&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=a.default.utils.random(.02*-Math.PI,.02*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-i/2>s&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=a.default.utils.random(.02*-Math.PI,.02*Math.PI))}const r=t.mesh.scale.y,n=this.sizes.height/2;if("top"===this.y.direction){t.mesh.position.y+r/2<-n&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=a.default.utils.random(.02*-Math.PI,.02*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y-r/2>n&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=a.default.utils.random(.02*-Math.PI,.02*Math.PI))}t.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Home/Media.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var s=i("./node_modules/ogl/src/core/Program.js"),r=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./node_modules/gsap/index.js"),a=i("./app/shaders/home-vertex.glsl"),o=i("./app/shaders/home-fragment.glsl");class h{constructor({element:t,geometry:e,gl:i,scene:s,index:r,sizes:n}){this.element=t,this.gl=i,this.geometry=e,this.scene=s,this.index=r,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=n.default.utils.random(.02*-Math.PI,.02*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(t.x),this.updateY(t.y),this.program.uniforms.uSpeed.value=1-e}}},"./app/components/Canvas/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>c});var s=i("./node_modules/ogl/src/core/Renderer.js"),r=i("./node_modules/ogl/src/core/Camera.js"),n=i("./node_modules/ogl/src/core/Transform.js"),a=i("./app/components/Canvas/Home/Index.js"),o=i("./app/components/Canvas/About/Index.js"),h=i("./app/components/Canvas/Collections/Index.js"),l=i("./app/components/Canvas/Transition.js"),u=i("./app/components/Canvas/Detail/Index.js");class c{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createCamera(),this.createRenderer(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createCollections(){this.collections=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createDetail(){this.detail=new u.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(t,e){console.log("onChangeStart called with:",t,e),this.about&&this.about.hide(),this.collections&&this.collections.hide(),this.home&&this.home.hide(),this.detail&&this.detail.hide(),this.isFromCollectionsToDetail="collections"===this.template&&e.indexOf("detail")>-1,this.isFromDetailToCollections="detail"===this.template&&e.indexOf("collections")>-1,(this.isFromCollectionsToDetail||this.isFromDetailToCollections)&&(this.transition=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes,url:e}),this.transition.setElement(this.collections||this.detail))}onChangeEnd(t){"about"===t?this.createAbout():this.about&&this.destroyAbout(),"collections"===t?this.createCollections():this.collections&&this.destroyCollections(),"detail"===t?this.createDetail():this.detail&&this.destroyDetail(),"home"===t?this.createHome():this.destroyHome(),this.template=t}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,i=e*this.camera.aspect;this.sizes={height:e,width:i};const s={sizes:this.sizes};this.about&&this.about.onResize(s),this.detail&&this.detail.onResize(s),this.collections&&this.collections.onResize(s),this.home&&this.home.onResize(s)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.about&&this.about.onTouchDown(e),this.collections&&this.collections.onTouchDown(e),this.detail&&this.detail.onTouchDown(e),this.home&&this.home.onTouchDown(e)}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,i=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=i;const s={x:this.x,y:this.y};this.about&&this.about.onTouchMove(s),this.collections&&this.collections.onTouchMove(s),this.detail&&this.detail.onTouchMove(s),this.home&&this.home.onTouchMove(s)}onTouchUp(t){this.isDown=!1;const e=t.changedTouches?t.changedTouches[0].clientX:t.clientX,i=t.changedTouches?t.changedTouches[0].clientY:t.clientY;this.x.end=e,this.y.end=i;const s={x:this.x,y:this.y};this.about&&this.about.onTouchUp(s),this.collections&&this.collections.onTouchUp(s),this.detail&&this.detail.onTouchUp(s),this.home&&this.home.onTouchUp(s)}onWheel(t){this.collections&&this.collections.onWheel(t),this.home&&this.home.onWheel(t)}update(t){this.about&&this.about.update(t),this.collections&&this.collections.update(),this.detail&&this.detail.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Canvas/Transition.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});var s=i("./node_modules/gsap/index.js"),r=i("./node_modules/ogl/src/extras/Plane.js"),n=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),o=i("./app/shaders/plane-fragment.glsl"),h=i("./app/shaders/plane-vertex.glsl");const l=class{constructor({collections:t,gl:e,scene:i,sizes:s,url:n}){this.collections=t,this.gl=e,this.scene=i,this.sizes=s,this.url=n,this.geometry=new r.Plane(this.gl)}createProgram(t){this.program=new n.Program(this.gl,{fragment:o.default,vertex:h.default,uniforms:{uAlpha:{value:1},tMap:{value:t}}})}createMesh(t){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=t.scale.x,this.mesh.scale.y=t.scale.y,this.mesh.scale.z=t.scale.z,this.mesh.position.x=t.position.x,this.mesh.position.y=t.position.y,this.mesh.position.z=t.position.z+.01,this.mesh.rotation.x=t.rotation.x,this.mesh.rotation.y=t.rotation.y,this.mesh.rotation.z=t.rotation.z,this.mesh.setParent(this.scene)}setElement(t){if(console.log(t.id),"collections"===t.id){const{index:e,medias:i}=t,s=i[e];this.createProgram(s.texture),this.createMesh(s.mesh),this.transition="detail"}else this.createProgram(t.texture),this.createMesh(t.mesh),this.transition="collections"}animate(t,e){const i=s.default.timeline({});i.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:t.scale.x,y:t.scale.y,z:t.scale.z},0),i.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:t.position.x,y:t.position.y,z:t.position.z},0),i.to(this.mesh.rotation,{duration:1.5,ease:"expo.inOut",x:t.rotation.x,y:t.rotation.y,z:t.rotation.z},0),i.call((t=>{e()})),i.call((t=>{this.scene.removeChild(this.mesh)}),null,"+=0.2")}}},"./app/components/Navigation.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var s=i("./app/classes/Component.js"),r=i("./node_modules/gsap/index.js"),n=i("./app/utils/colors.js");class a extends s.default{constructor({template:t}){super({element:".navigation",elements:{links:".navigation__list__link",items:".navigation__list__item"}}),this.onChange(t)}onChange(t){"about"===t?(r.default.to(this.element,{color:n.COLOR_BRIGHT_GREY,duration:1.2}),r.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),r.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(r.default.to(this.element,{color:n.COLOR_QUARTER_SPANISH_WHITE,duration:1.2}),r.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),r.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/preloader.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var s=i("./node_modules/ogl/src/core/Texture.js"),r=i("./node_modules/gsap/index.js"),n=i("./app/classes/Component.js"),a=i("./app/utils/text.js");class o extends n.default{constructor({canvas:t}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=t,window.TEXTURES={},(0,a.split)({element:this.elements.title,expression:"<br>"}),(0,a.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((t=>{const e=new s.Texture(this.canvas.gl,{generateMipmaps:!1}),i=new window.Image;i.crossOrigin="anonymous",i.src=t,i.onload=t=>{e.image=i,this.onAssetLoaded()},window.TEXTURES[t]=e}))}onAssetLoaded(t){this.length+=1;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.emit("completed"),this.animateOut=r.default.timeline({delay:1}),this.animateOut.to(this.elements.titleSpans,{duration:1,ease:"expo.Out",stagger:.3,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:.5,ease:"expo.Out",stagger:.3,y:"100%"},"-=0.3"),this.animateOut.to(this.element,{autoAlpha:0,duration:1}),this.animateOut.call((e=>{this.destroy(),t()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(t,e,i)=>{"use strict";i.r(e);var s=i("./node_modules/normalize-wheel/index.js"),r=i.n(s);Object(function(){var t=new Error("Cannot find module 'lodash/each'");throw t.code="MODULE_NOT_FOUND",t}());var n=i("./app/components/Canvas/Index.js"),a=i("./app/components/preloader.js"),o=i("./app/pages/About/Index.js"),h=i("./app/pages/Collections/Index.js"),l=i("./app/pages/Detail/Index.js"),u=i("./app/pages/Home/Index.js"),c=i("./app/components/Navigation.js");class d{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new c.default({template:this.template})}createPreloader(){this.preloader=new a.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new n.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new o.default,collections:new h.default,home:new u.default,detail:new l.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}async onChange(t){try{this.canvas.onChangeStart(this.template,t),await this.page.hide();const e=await window.fetch(t);if(!e.ok)throw new Error(`HTTP Error! Status: ${e.status}`);const i=await e.text(),s=document.createElement("div");window.history.pushState({},"",t),s.innerHTML=i;const r=s.querySelector(".content");if(!r)throw new Error("No '.content' found in fetched page");this.template=r.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=r.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}catch(t){console.error("Error in onChange:",t)}}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((t=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t)}onWheel(t){const e=r()(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(e),this.page&&this.page.onWheel&&this.page.onWheel(e)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");Object(function(){var t=new Error("Cannot find module 'lodash/each'");throw t.code="MODULE_NOT_FOUND",t}())(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:i}=t;this.onChange(i)}}))}}document.addEventListener("DOMContentLoaded",(()=>{new d}))},"./app/pages/About/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var s=i("./app/classes/Page.js");class r extends s.default{constructor(){super({element:".about",id:"About",elements:{navigation:document.querySelector(".navigation"),title:".about__title",wrapper:".about__wrapper"}})}}},"./app/pages/Collections/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var s=i("./app/classes/Page.js");class r extends s.default{constructor(){super({id:"Collections",element:".collections",elements:{title:".collections__titles"}})}}},"./app/pages/Detail/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var s=i("./node_modules/gsap/index.js"),r=i("./app/classes/Page.js"),n=i("./app/classes/Button.js");Object(function(){var t=new Error("Cannot find module 'lodash'");throw t.code="MODULE_NOT_FOUND",t}());class a extends r.default{constructor(){super({element:".detail",id:"Detail",elements:{button:".detail__button"}})}create(){super.create(),this.link=new n.default({element:this.elements.button})}show(){const t=s.default.timeline({delay:2});t.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),super.show(t)}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/pages/Home/Index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});var s=i("./app/classes/Page.js"),r=i("./app/classes/Button.js");class n extends s.default{constructor(){super({element:".home",id:"Home",elements:{navigation:document.querySelector(".navigation"),link:".home__link"}})}create(){super.create(),this.link=new r.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/shaders/collections-fragment.glsl":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n   \nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture; // set the color or texture of the cube to red\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/collections-vertex.glsl":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0); // modeviewMatrix multiply by the position of the vertex\n\nvPosition = newPosition;\n\n  gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/home-fragment.glsl":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n   \nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture; // set the color or texture of the cube to red\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/home-vertex.glsl":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0); // modeviewMatrix multiply by the position of the vertex\n\n  // newPosition.z -= (sin(newPosition.y / uViewportSizes.y *  PI / 2.0)+ sin(newPosition.x / uViewportSizes.x * PI / 2.0)) * abs(uSpeed);\n    newPosition.z -= ((cos(newPosition.y / uViewportSizes.y * 0.1)) * (cos(newPosition.x / uViewportSizes.x * 0.1))) * abs(uSpeed);\n\n  // set the z position of the vertex to the sin of the x position of the vertex\n\n  \n  gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/plane-fragment.glsl":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n   \nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture; // set the color or texture of the cube to red\n    gl_FragColor.a = uAlpha;\n}\n\n// precision highp float;\n\n// uniform float uAlpha;\n// uniform sampler2D tMap;\n\n// varying vec2 vUv;\n\n// void main() {\n//     vec4 textureColor = texture2D(tMap, vUv);\n\n//     // Appliquer l'alpha uniform en multipliant l'alpha de la texture\n//     gl_FragColor = vec4(textureColor.rgb, textureColor.a * uAlpha);\n// }"},"./app/shaders/plane-vertex.glsl":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./app/utils/colors.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{COLOR_BRIGHT_GREY:()=>r,COLOR_QUARTER_SPANISH_WHITE:()=>s});const s="#f9f1E7",r="#37384C"},"./app/utils/text.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{calculate:()=>n,split:()=>r});var s=i("./node_modules/lodash/each.js");function r({element:t,expression:e=" ",append:i=!0}){const r=function(t,e){const i=t.split("<br>");let r=[];return s(i,((t,i)=>{i>0&&r.push("<br>"),r=r.concat(t.split(e));let n=!1,a="";const o=[];s(r,(t=>{n||!t.includes("<a")&&!t.includes("<strong")||(a="",n=!0),n&&(a+=` ${t}`),n&&(t.includes("/a>")||t.includes("/strong>"))&&(o.push(a),a=""),n||""!==a||o.push(t),n&&(t.includes("/a>")||t.includes("/strong>"))&&(n=!1)})),r=o})),r}(t.innerHTML.toString().trim(),e);let n="";s(r,(t=>{if(t.indexOf("<br>")>-1){const e=t.split("<br>");s(e,((t,e)=>{n+=e>0?"<br>"+a(t):a(t)}))}else n+=a(t)})),t.innerHTML=n;const o=t.querySelectorAll("span");return i&&s(o,(t=>{const e=1===t.textContent.length,i=""!==t.innerHTML.trim(),s="&"!==t.textContent,r="-"!==t.textContent;e&&i&&s&&r&&(t.innerHTML=`${t.textContent}&nbsp;`)})),o}function n(t){if(!t.length)return;const e=[];let i=[],r=t[0].offsetTop;return s(t,((s,n)=>{s.offsetTop===r&&i.push(s),s.offsetTop!==r&&(e.push(i),i=[],i.push(s),r=s.offsetTop),n+1===t.length&&e.push(i)})),e}function a(t){return""===(t=t.trim())||" "===t?t:"<br>"===t?"<br>":`<span>${t}</span>`+(t.length>1?" ":"")}},"./node_modules/gsap/CSSPlugin.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CSSPlugin:()=>Mt,_createElement:()=>N,_getBBox:()=>Y,checkPrefix:()=>B,default:()=>Mt});var s,r,n,a,o,h,l,u,c=i("./node_modules/gsap/gsap-core.js"),d={},p=180/Math.PI,m=Math.PI/180,f=Math.atan2,g=/([A-Z])/g,_=/(left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,x={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},w=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},y=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},b=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},T=function(t,e){var i=e.s+e.c*t;e.set(e.t,e.p,~~(i+(i<0?-.5:.5))+e.u,e)},M=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},E=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},O=function(t,e,i){return t.style[e]=i},A=function(t,e,i){return t.style.setProperty(e,i)},C=function(t,e,i){return t._gsap[e]=i},S=function(t,e,i){return t._gsap.scaleX=t._gsap.scaleY=i},P=function(t,e,i,s,r){var n=t._gsap;n.scaleX=n.scaleY=i,n.renderTransform(r,n)},z=function(t,e,i,s,r){var n=t._gsap;n[e]=i,n.renderTransform(r,n)},D="transform",F=D+"Origin",R=function t(e,i){var s=this,r=this.target,n=r.style,a=r._gsap;if(e in d&&n){if(this.tfm=this.tfm||{},"transform"===e)return x.transform.split(",").forEach((function(e){return t.call(s,e,i)}));if(~(e=x[e]||e).indexOf(",")?e.split(",").forEach((function(t){return s.tfm[t]=K(r,t)})):this.tfm[e]=a.x?a[e]:K(r,e),e===F&&(this.tfm.zOrigin=a.zOrigin),this.props.indexOf(D)>=0)return;a.svg&&(this.svgo=r.getAttribute("data-svg-origin"),this.props.push(F,i,"")),e=D}(n||i)&&this.props.push(e,i,n[e])},L=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},j=function(){var t,e,i=this.props,s=this.target,r=s.style,n=s._gsap;for(t=0;t<i.length;t+=3)i[t+1]?2===i[t+1]?s[i[t]](i[t+2]):s[i[t]]=i[t+2]:i[t+2]?r[i[t]]=i[t+2]:r.removeProperty("--"===i[t].substr(0,2)?i[t]:i[t].replace(g,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)n[e]=this.tfm[e];n.svg&&(n.renderTransform(),s.setAttribute("data-svg-origin",this.svgo||"")),(t=l())&&t.isStart||r[D]||(L(r),n.zOrigin&&r[F]&&(r[F]+=" "+n.zOrigin+"px",n.zOrigin=0,n.renderTransform()),n.uncache=1)}},U=function(t,e){var i={target:t,props:[],revert:j,save:R};return t._gsap||c.gsap.core.getCache(t),e&&t.style&&t.nodeType&&e.split(",").forEach((function(t){return i.save(t)})),i},N=function(t,e){var i=r.createElementNS?r.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):r.createElement(t);return i&&i.style?i:r.createElement(t)},I=function t(e,i,s){var r=getComputedStyle(e);return r[i]||r.getPropertyValue(i.replace(g,"-$1").toLowerCase())||r.getPropertyValue(i)||!s&&t(e,B(i)||i,1)||""},k="O,Moz,ms,Ms,Webkit".split(","),B=function(t,e,i){var s=(e||o).style,r=5;if(t in s&&!i)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);r--&&!(k[r]+t in s););return r<0?null:(3===r?"ms":r>=0?k[r]:"")+t},X=function(){"undefined"!=typeof window&&window.document&&(s=window,r=s.document,n=r.documentElement,o=N("div")||{style:{}},N("div"),D=B(D),F=D+"Origin",o.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!B("perspective"),l=c.gsap.core.reverting,a=1)},V=function(t){var e,i=t.ownerSVGElement,s=N("svg",i&&i.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=t.cloneNode(!0);r.style.display="block",s.appendChild(r),n.appendChild(s);try{e=r.getBBox()}catch(t){}return s.removeChild(r),n.removeChild(s),e},q=function(t,e){for(var i=e.length;i--;)if(t.hasAttribute(e[i]))return t.getAttribute(e[i])},Y=function(t){var e,i;try{e=t.getBBox()}catch(s){e=V(t),i=1}return e&&(e.width||e.height)||i||(e=V(t)),!e||e.width||e.x||e.y?e:{x:+q(t,["x","cx","x1"])||0,y:+q(t,["y","cy","y1"])||0,width:0,height:0}},W=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Y(t))},G=function(t,e){if(e){var i,s=t.style;e in d&&e!==F&&(e=D),s.removeProperty?("ms"!==(i=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),s.removeProperty("--"===i?e:e.replace(g,"-$1").toLowerCase())):s.removeAttribute(e)}},H=function(t,e,i,s,r,n){var a=new c.PropTween(t._pt,e,i,0,1,n?E:M);return t._pt=a,a.b=s,a.e=r,t._props.push(i),a},Q={deg:1,rad:1,turn:1},$={grid:1,flex:1},Z=function t(e,i,s,n){var a,h,l,u,p=parseFloat(s)||0,m=(s+"").trim().substr((p+"").length)||"px",f=o.style,g=_.test(i),v="svg"===e.tagName.toLowerCase(),x=(v?"client":"offset")+(g?"Width":"Height"),w=100,y="px"===n,b="%"===n;if(n===m||!p||Q[n]||Q[m])return p;if("px"!==m&&!y&&(p=t(e,i,s,"px")),u=e.getCTM&&W(e),(b||"%"===m)&&(d[i]||~i.indexOf("adius")))return a=u?e.getBBox()[g?"width":"height"]:e[x],(0,c._round)(b?p/a*w:p/100*a);if(f[g?"width":"height"]=w+(y?m:n),h="rem"!==n&&~i.indexOf("adius")||"em"===n&&e.appendChild&&!v?e:e.parentNode,u&&(h=(e.ownerSVGElement||{}).parentNode),h&&h!==r&&h.appendChild||(h=r.body),(l=h._gsap)&&b&&l.width&&g&&l.time===c._ticker.time&&!l.uncache)return(0,c._round)(p/l.width*w);if(!b||"height"!==i&&"width"!==i)(b||"%"===m)&&!$[I(h,"display")]&&(f.position=I(e,"position")),h===e&&(f.position="static"),h.appendChild(o),a=o[x],h.removeChild(o),f.position="absolute";else{var T=e.style[i];e.style[i]=w+n,a=e[x],T?e.style[i]=T:G(e,i)}return g&&b&&((l=(0,c._getCache)(h)).time=c._ticker.time,l.width=h[x]),(0,c._round)(y?a*p/w:a&&p?w/a*p:0)},K=function(t,e,i,s){var r;return a||X(),e in x&&"transform"!==e&&~(e=x[e]).indexOf(",")&&(e=e.split(",")[0]),d[e]&&"transform"!==e?(r=lt(t,s),r="transformOrigin"!==e?r[e]:r.svg?r.origin:ut(I(t,F))+" "+r.zOrigin+"px"):(!(r=t.style[e])||"auto"===r||s||~(r+"").indexOf("calc("))&&(r=it[e]&&it[e](t,e,i)||I(t,e)||(0,c._getProperty)(t,e)||("opacity"===e?1:0)),i&&!~(r+"").trim().indexOf(" ")?Z(t,e,r,i)+i:r},J=function(t,e,i,s){if(!i||"none"===i){var r=B(e,t,1),n=r&&I(t,r,1);n&&n!==i?(e=r,i=n):"borderColor"===e&&(i=I(t,"borderTopColor"))}var a,o,h,l,u,d,p,m,f,g,_,v=new c.PropTween(this._pt,t.style,e,0,1,c._renderComplexString),x=0,w=0;if(v.b=i,v.e=s,i+="","auto"===(s+="")&&(d=t.style[e],t.style[e]=s,s=I(t,e)||s,d?t.style[e]=d:G(t,e)),a=[i,s],(0,c._colorStringFilter)(a),s=a[1],h=(i=a[0]).match(c._numWithUnitExp)||[],(s.match(c._numWithUnitExp)||[]).length){for(;o=c._numWithUnitExp.exec(s);)p=o[0],f=s.substring(x,o.index),u?u=(u+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(u=1),p!==(d=h[w++]||"")&&(l=parseFloat(d)||0,_=d.substr((l+"").length),"="===p.charAt(1)&&(p=(0,c._parseRelative)(l,p)+_),m=parseFloat(p),g=p.substr((m+"").length),x=c._numWithUnitExp.lastIndex-g.length,g||(g=g||c._config.units[e]||_,x===s.length&&(s+=g,v.e+=g)),_!==g&&(l=Z(t,e,d,g)||0),v._pt={_next:v._pt,p:f||1===w?f:",",s:l,c:m-l,m:u&&u<4||"zIndex"===e?Math.round:0});v.c=x<s.length?s.substring(x,s.length):""}else v.r="display"===e&&"none"===s?E:M;return c._relExp.test(s)&&(v.e=0),this._pt=v,v},tt={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},et=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var i,s,r,n=e.t,a=n.style,o=e.u,h=n._gsap;if("all"===o||!0===o)a.cssText="",s=1;else for(r=(o=o.split(",")).length;--r>-1;)i=o[r],d[i]&&(s=1,i="transformOrigin"===i?F:D),G(n,i);s&&(G(n,D),h&&(h.svg&&n.removeAttribute("transform"),a.scale=a.rotate=a.translate="none",lt(n,1),h.uncache=1,L(a)))}},it={clearProps:function(t,e,i,s,r){if("isFromStart"!==r.data){var n=t._pt=new c.PropTween(t._pt,e,i,0,0,et);return n.u=s,n.pr=-10,n.tween=r,t._props.push(i),1}}},st=[1,0,0,1,0,0],rt={},nt=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},at=function(t){var e=I(t,D);return nt(e)?st:e.substr(7).match(c._numExp).map(c._round)},ot=function(t,e){var i,s,r,a,o=t._gsap||(0,c._getCache)(t),h=t.style,l=at(t);return o.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(r=t.transform.baseVal.consolidate().matrix).a,r.b,r.c,r.d,r.e,r.f]).join(",")?st:l:(l!==st||t.offsetParent||t===n||o.svg||(r=h.display,h.display="block",(i=t.parentNode)&&(t.offsetParent||t.getBoundingClientRect().width)||(a=1,s=t.nextElementSibling,n.appendChild(t)),l=at(t),r?h.display=r:G(t,"display"),a&&(s?i.insertBefore(t,s):i?i.appendChild(t):n.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},ht=function(t,e,i,s,r,n){var a,o,h,l=t._gsap,u=r||ot(t,!0),c=l.xOrigin||0,d=l.yOrigin||0,p=l.xOffset||0,m=l.yOffset||0,f=u[0],g=u[1],_=u[2],v=u[3],x=u[4],w=u[5],y=e.split(" "),b=parseFloat(y[0])||0,T=parseFloat(y[1])||0;i?u!==st&&(o=f*v-g*_)&&(h=b*(-g/o)+T*(f/o)-(f*w-g*x)/o,b=b*(v/o)+T*(-_/o)+(_*w-v*x)/o,T=h):(b=(a=Y(t)).x+(~y[0].indexOf("%")?b/100*a.width:b),T=a.y+(~(y[1]||y[0]).indexOf("%")?T/100*a.height:T)),s||!1!==s&&l.smooth?(x=b-c,w=T-d,l.xOffset=p+(x*f+w*_)-x,l.yOffset=m+(x*g+w*v)-w):l.xOffset=l.yOffset=0,l.xOrigin=b,l.yOrigin=T,l.smooth=!!s,l.origin=e,l.originIsAbsolute=!!i,t.style[F]="0px 0px",n&&(H(n,l,"xOrigin",c,b),H(n,l,"yOrigin",d,T),H(n,l,"xOffset",p,l.xOffset),H(n,l,"yOffset",m,l.yOffset)),t.setAttribute("data-svg-origin",b+" "+T)},lt=function(t,e){var i=t._gsap||new c.GSCache(t);if("x"in i&&!e&&!i.uncache)return i;var s,r,n,a,o,h,l,d,g,_,v,x,w,y,b,T,M,E,O,A,C,S,P,z,R,L,j,U,N,k,B,X,V=t.style,q=i.scaleX<0,Y="px",G="deg",H=getComputedStyle(t),Q=I(t,F)||"0";return s=r=n=h=l=d=g=_=v=0,a=o=1,i.svg=!(!t.getCTM||!W(t)),H.translate&&("none"===H.translate&&"none"===H.scale&&"none"===H.rotate||(V[D]=("none"!==H.translate?"translate3d("+(H.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==H.rotate?"rotate("+H.rotate+") ":"")+("none"!==H.scale?"scale("+H.scale.split(" ").join(",")+") ":"")+("none"!==H[D]?H[D]:"")),V.scale=V.rotate=V.translate="none"),y=ot(t,i.svg),i.svg&&(i.uncache?(R=t.getBBox(),Q=i.xOrigin-R.x+"px "+(i.yOrigin-R.y)+"px",z=""):z=!e&&t.getAttribute("data-svg-origin"),ht(t,z||Q,!!z||i.originIsAbsolute,!1!==i.smooth,y)),x=i.xOrigin||0,w=i.yOrigin||0,y!==st&&(E=y[0],O=y[1],A=y[2],C=y[3],s=S=y[4],r=P=y[5],6===y.length?(a=Math.sqrt(E*E+O*O),o=Math.sqrt(C*C+A*A),h=E||O?f(O,E)*p:0,(g=A||C?f(A,C)*p+h:0)&&(o*=Math.abs(Math.cos(g*m))),i.svg&&(s-=x-(x*E+w*A),r-=w-(x*O+w*C))):(X=y[6],k=y[7],j=y[8],U=y[9],N=y[10],B=y[11],s=y[12],r=y[13],n=y[14],l=(b=f(X,N))*p,b&&(z=S*(T=Math.cos(-b))+j*(M=Math.sin(-b)),R=P*T+U*M,L=X*T+N*M,j=S*-M+j*T,U=P*-M+U*T,N=X*-M+N*T,B=k*-M+B*T,S=z,P=R,X=L),d=(b=f(-A,N))*p,b&&(T=Math.cos(-b),B=C*(M=Math.sin(-b))+B*T,E=z=E*T-j*M,O=R=O*T-U*M,A=L=A*T-N*M),h=(b=f(O,E))*p,b&&(z=E*(T=Math.cos(b))+O*(M=Math.sin(b)),R=S*T+P*M,O=O*T-E*M,P=P*T-S*M,E=z,S=R),l&&Math.abs(l)+Math.abs(h)>359.9&&(l=h=0,d=180-d),a=(0,c._round)(Math.sqrt(E*E+O*O+A*A)),o=(0,c._round)(Math.sqrt(P*P+X*X)),b=f(S,P),g=Math.abs(b)>2e-4?b*p:0,v=B?1/(B<0?-B:B):0),i.svg&&(z=t.getAttribute("transform"),i.forceCSS=t.setAttribute("transform","")||!nt(I(t,D)),z&&t.setAttribute("transform",z))),Math.abs(g)>90&&Math.abs(g)<270&&(q?(a*=-1,g+=h<=0?180:-180,h+=h<=0?180:-180):(o*=-1,g+=g<=0?180:-180)),e=e||i.uncache,i.x=s-((i.xPercent=s&&(!e&&i.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-s)?-50:0)))?t.offsetWidth*i.xPercent/100:0)+Y,i.y=r-((i.yPercent=r&&(!e&&i.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-r)?-50:0)))?t.offsetHeight*i.yPercent/100:0)+Y,i.z=n+Y,i.scaleX=(0,c._round)(a),i.scaleY=(0,c._round)(o),i.rotation=(0,c._round)(h)+G,i.rotationX=(0,c._round)(l)+G,i.rotationY=(0,c._round)(d)+G,i.skewX=g+G,i.skewY=_+G,i.transformPerspective=v+Y,(i.zOrigin=parseFloat(Q.split(" ")[2])||!e&&i.zOrigin||0)&&(V[F]=ut(Q)),i.xOffset=i.yOffset=0,i.force3D=c._config.force3D,i.renderTransform=i.svg?_t:u?gt:dt,i.uncache=0,i},ut=function(t){return(t=t.split(" "))[0]+" "+t[1]},ct=function(t,e,i){var s=(0,c.getUnit)(e);return(0,c._round)(parseFloat(e)+parseFloat(Z(t,"x",i+"px",s)))+s},dt=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,gt(t,e)},pt="0deg",mt="0px",ft=") ",gt=function(t,e){var i=e||this,s=i.xPercent,r=i.yPercent,n=i.x,a=i.y,o=i.z,h=i.rotation,l=i.rotationY,u=i.rotationX,c=i.skewX,d=i.skewY,p=i.scaleX,f=i.scaleY,g=i.transformPerspective,_=i.force3D,v=i.target,x=i.zOrigin,w="",y="auto"===_&&t&&1!==t||!0===_;if(x&&(u!==pt||l!==pt)){var b,T=parseFloat(l)*m,M=Math.sin(T),E=Math.cos(T);T=parseFloat(u)*m,b=Math.cos(T),n=ct(v,n,M*b*-x),a=ct(v,a,-Math.sin(T)*-x),o=ct(v,o,E*b*-x+x)}g!==mt&&(w+="perspective("+g+ft),(s||r)&&(w+="translate("+s+"%, "+r+"%) "),(y||n!==mt||a!==mt||o!==mt)&&(w+=o!==mt||y?"translate3d("+n+", "+a+", "+o+") ":"translate("+n+", "+a+ft),h!==pt&&(w+="rotate("+h+ft),l!==pt&&(w+="rotateY("+l+ft),u!==pt&&(w+="rotateX("+u+ft),c===pt&&d===pt||(w+="skew("+c+", "+d+ft),1===p&&1===f||(w+="scale("+p+", "+f+ft),v.style[D]=w||"translate(0, 0)"},_t=function(t,e){var i,s,r,n,a,o=e||this,h=o.xPercent,l=o.yPercent,u=o.x,d=o.y,p=o.rotation,f=o.skewX,g=o.skewY,_=o.scaleX,v=o.scaleY,x=o.target,w=o.xOrigin,y=o.yOrigin,b=o.xOffset,T=o.yOffset,M=o.forceCSS,E=parseFloat(u),O=parseFloat(d);p=parseFloat(p),f=parseFloat(f),(g=parseFloat(g))&&(f+=g=parseFloat(g),p+=g),p||f?(p*=m,f*=m,i=Math.cos(p)*_,s=Math.sin(p)*_,r=Math.sin(p-f)*-v,n=Math.cos(p-f)*v,f&&(g*=m,a=Math.tan(f-g),r*=a=Math.sqrt(1+a*a),n*=a,g&&(a=Math.tan(g),i*=a=Math.sqrt(1+a*a),s*=a)),i=(0,c._round)(i),s=(0,c._round)(s),r=(0,c._round)(r),n=(0,c._round)(n)):(i=_,n=v,s=r=0),(E&&!~(u+"").indexOf("px")||O&&!~(d+"").indexOf("px"))&&(E=Z(x,"x",u,"px"),O=Z(x,"y",d,"px")),(w||y||b||T)&&(E=(0,c._round)(E+w-(w*i+y*r)+b),O=(0,c._round)(O+y-(w*s+y*n)+T)),(h||l)&&(a=x.getBBox(),E=(0,c._round)(E+h/100*a.width),O=(0,c._round)(O+l/100*a.height)),a="matrix("+i+","+s+","+r+","+n+","+E+","+O+")",x.setAttribute("transform",a),M&&(x.style[D]=a)},vt=function(t,e,i,s,r){var n,a,o=360,h=(0,c._isString)(r),l=parseFloat(r)*(h&&~r.indexOf("rad")?p:1)-s,u=s+l+"deg";return h&&("short"===(n=r.split("_")[1])&&(l%=o)!==l%180&&(l+=l<0?o:-360),"cw"===n&&l<0?l=(l+36e9)%o-~~(l/o)*o:"ccw"===n&&l>0&&(l=(l-36e9)%o-~~(l/o)*o)),t._pt=a=new c.PropTween(t._pt,e,i,s,l,y),a.e=u,a.u="deg",t._props.push(i),a},xt=function(t,e){for(var i in e)t[i]=e[i];return t},wt=function(t,e,i){var s,r,n,a,o,h,l,u=xt({},i._gsap),p=i.style;for(r in u.svg?(n=i.getAttribute("transform"),i.setAttribute("transform",""),p[D]=e,s=lt(i,1),G(i,D),i.setAttribute("transform",n)):(n=getComputedStyle(i)[D],p[D]=e,s=lt(i,1),p[D]=n),d)(n=u[r])!==(a=s[r])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(r)<0&&(o=(0,c.getUnit)(n)!==(l=(0,c.getUnit)(a))?Z(i,r,n,l):parseFloat(n),h=parseFloat(a),t._pt=new c.PropTween(t._pt,s,r,o,h-o,w),t._pt.u=l||0,t._props.push(r));xt(s,u)};(0,c._forEachName)("padding,margin,Width,Radius",(function(t,e){var i="Top",s="Right",r="Bottom",n="Left",a=(e<3?[i,s,r,n]:[i+n,i+s,r+s,r+n]).map((function(i){return e<2?t+i:"border"+i+t}));it[e>1?"border"+t:t]=function(t,e,i,s,r){var n,o;if(arguments.length<4)return n=a.map((function(e){return K(t,e,i)})),5===(o=n.join(" ")).split(n[0]).length?n[0]:o;n=(s+"").split(" "),o={},a.forEach((function(t,e){return o[t]=n[e]=n[e]||n[(e-1)/2|0]})),t.init(e,o,r)}}));var yt,bt,Tt,Mt={name:"css",register:X,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,i,s,r){var n,o,h,l,u,p,m,f,g,_,y,M,E,O,A,C,S,P,z,R,L=this._props,j=t.style,N=i.vars.startAt;for(m in a||X(),this.styles=this.styles||U(t),C=this.styles.props,this.tween=i,e)if("autoRound"!==m&&(o=e[m],!c._plugins[m]||!(0,c._checkPlugin)(m,e,i,s,t,r)))if(u=typeof o,p=it[m],"function"===u&&(u=typeof(o=o.call(i,s,t,r))),"string"===u&&~o.indexOf("random(")&&(o=(0,c._replaceRandom)(o)),p)p(this,t,m,o,i)&&(A=1);else if("--"===m.substr(0,2))n=(getComputedStyle(t).getPropertyValue(m)+"").trim(),o+="",c._colorExp.lastIndex=0,c._colorExp.test(n)||(f=(0,c.getUnit)(n),g=(0,c.getUnit)(o)),g?f!==g&&(n=Z(t,m,n,g)+g):f&&(o+=f),this.add(j,"setProperty",n,o,s,r,0,0,m),L.push(m),C.push(m,0,j[m]);else if("undefined"!==u){if(N&&m in N?(n="function"==typeof N[m]?N[m].call(i,s,t,r):N[m],(0,c._isString)(n)&&~n.indexOf("random(")&&(n=(0,c._replaceRandom)(n)),(0,c.getUnit)(n+"")||"auto"===n||(n+=c._config.units[m]||(0,c.getUnit)(K(t,m))||""),"="===(n+"").charAt(1)&&(n=K(t,m))):n=K(t,m),l=parseFloat(n),(_="string"===u&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),h=parseFloat(o),m in x&&("autoAlpha"===m&&(1===l&&"hidden"===K(t,"visibility")&&h&&(l=0),C.push("visibility",0,j.visibility),H(this,j,"visibility",l?"inherit":"hidden",h?"inherit":"hidden",!h)),"scale"!==m&&"transform"!==m&&~(m=x[m]).indexOf(",")&&(m=m.split(",")[0])),y=m in d)if(this.styles.save(m),M||((E=t._gsap).renderTransform&&!e.parseTransform||lt(t,e.parseTransform),O=!1!==e.smoothOrigin&&E.smooth,(M=this._pt=new c.PropTween(this._pt,j,D,0,1,E.renderTransform,E,0,-1)).dep=1),"scale"===m)this._pt=new c.PropTween(this._pt,E,"scaleY",E.scaleY,(_?(0,c._parseRelative)(E.scaleY,_+h):h)-E.scaleY||0,w),this._pt.u=0,L.push("scaleY",m),m+="X";else{if("transformOrigin"===m){C.push(F,0,j[F]),P=void 0,z=void 0,R=void 0,P=(S=o).split(" "),z=P[0],R=P[1]||"50%","top"!==z&&"bottom"!==z&&"left"!==R&&"right"!==R||(S=z,z=R,R=S),P[0]=tt[z]||z,P[1]=tt[R]||R,o=P.join(" "),E.svg?ht(t,o,0,O,0,this):((g=parseFloat(o.split(" ")[2])||0)!==E.zOrigin&&H(this,E,"zOrigin",E.zOrigin,g),H(this,j,m,ut(n),ut(o)));continue}if("svgOrigin"===m){ht(t,o,1,O,0,this);continue}if(m in rt){vt(this,E,m,l,_?(0,c._parseRelative)(l,_+o):o);continue}if("smoothOrigin"===m){H(this,E,"smooth",E.smooth,o);continue}if("force3D"===m){E[m]=o;continue}if("transform"===m){wt(this,o,t);continue}}else m in j||(m=B(m)||m);if(y||(h||0===h)&&(l||0===l)&&!v.test(o)&&m in j)h||(h=0),(f=(n+"").substr((l+"").length))!==(g=(0,c.getUnit)(o)||(m in c._config.units?c._config.units[m]:f))&&(l=Z(t,m,n,g)),this._pt=new c.PropTween(this._pt,y?E:j,m,l,(_?(0,c._parseRelative)(l,_+h):h)-l,y||"px"!==g&&"zIndex"!==m||!1===e.autoRound?w:T),this._pt.u=g||0,f!==g&&"%"!==g&&(this._pt.b=n,this._pt.r=b);else if(m in j)J.call(this,t,m,n,_?_+o:o);else if(m in t)this.add(t,m,n||t[m],_?_+o:o,s,r);else if("parseTransform"!==m){(0,c._missingPlugin)(m,o);continue}y||(m in j?C.push(m,0,j[m]):"function"==typeof t[m]?C.push(m,2,t[m]()):C.push(m,1,n||t[m])),L.push(m)}A&&(0,c._sortPropTweensByPriority)(this)},render:function(t,e){if(e.tween._time||!l())for(var i=e._pt;i;)i.r(t,i.d),i=i._next;else e.styles.revert()},get:K,aliases:x,getSetter:function(t,e,i){var s=x[e];return s&&s.indexOf(",")<0&&(e=s),e in d&&e!==F&&(t._gsap.x||K(t,"x"))?i&&h===i?"scale"===e?S:C:(h=i||{})&&("scale"===e?P:z):t.style&&!(0,c._isUndefined)(t.style[e])?O:~e.indexOf("-")?A:(0,c._getSetter)(t,e)},core:{_removeProperty:G,_getMatrix:ot}};c.gsap.utils.checkPrefix=B,c.gsap.core.getStyleSaver=U,yt="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",bt="rotation,rotationX,rotationY,skewX,skewY",Tt=(0,c._forEachName)(yt+","+bt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){d[t]=1})),(0,c._forEachName)(bt,(function(t){c._config.units[t]="deg",rt[t]=1})),x[Tt[13]]=yt+","+bt,(0,c._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");x[e[1]]=Tt[e[0]]})),(0,c._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){c._config.units[t]="px"})),c.gsap.registerPlugin(Mt)},"./node_modules/gsap/gsap-core.js":(t,e,i)=>{"use strict";function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}i.r(e),i.d(e,{Animation:()=>Qe,Back:()=>Gi,Bounce:()=>Qi,Circ:()=>Ki,Cubic:()=>Xi,Elastic:()=>Wi,Expo:()=>Zi,GSCache:()=>He,Linear:()=>ki,Power0:()=>Li,Power1:()=>ji,Power2:()=>Ui,Power3:()=>Ni,Power4:()=>Ii,PropTween:()=>yi,Quad:()=>Bi,Quart:()=>Vi,Quint:()=>qi,Sine:()=>$i,SteppedEase:()=>Hi,Strong:()=>Yi,Timeline:()=>$e,TimelineLite:()=>$e,TimelineMax:()=>$e,Tween:()=>oi,TweenLite:()=>oi,TweenMax:()=>oi,_checkPlugin:()=>ei,_colorExp:()=>De,_colorStringFilter:()=>Re,_config:()=>b,_forEachName:()=>gt,_getCache:()=>mt,_getProperty:()=>ft,_getSetter:()=>di,_isString:()=>D,_isUndefined:()=>L,_missingPlugin:()=>K,_numExp:()=>V,_numWithUnitExp:()=>q,_parseRelative:()=>xt,_plugins:()=>ht,_relExp:()=>W,_removeLinkedListItem:()=>zt,_renderComplexString:()=>fi,_replaceRandom:()=>ve,_round:()=>_t,_roundModifier:()=>le,_setDefaults:()=>Et,_sortPropTweensByPriority:()=>wi,_ticker:()=>Le,clamp:()=>ee,default:()=>Ri,distribute:()=>he,getUnit:()=>te,gsap:()=>Ri,interpolate:()=>we,mapRange:()=>xe,normalize:()=>me,pipe:()=>de,random:()=>ce,selector:()=>ae,shuffle:()=>oe,snap:()=>ue,splitColor:()=>Se,toArray:()=>ne,unitize:()=>pe,wrap:()=>ge,wrapYoyo:()=>_e});var n,a,o,h,l,u,c,d,p,m,f,g,_,v,x,w,y,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},T={duration:.5,overwrite:!1,delay:0},M=1e8,E=1e-8,O=2*Math.PI,A=O/4,C=0,S=Math.sqrt,P=Math.cos,z=Math.sin,D=function(t){return"string"==typeof t},F=function(t){return"function"==typeof t},R=function(t){return"number"==typeof t},L=function(t){return void 0===t},j=function(t){return"object"==typeof t},U=function(t){return!1!==t},N=function(){return"undefined"!=typeof window},I=function(t){return F(t)||D(t)},k="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},B=Array.isArray,X=/(?:-?\.?\d|\.)+/gi,V=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,q=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Y=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,W=/[+-]=-?[.\d]+/,G=/[^,'"\[\]\s]+/gi,H=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Q={},$={},Z=function(t){return($=Ot(t,Q))&&Ri},K=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},J=function(t,e){return!e&&console.warn(t)},tt=function(t,e){return t&&(Q[t]=e)&&$&&($[t]=e)||Q},et=function(){return 0},it={suppressEvents:!0,isStart:!0,kill:!1},st={suppressEvents:!0,kill:!1},rt={suppressEvents:!0},nt={},at=[],ot={},ht={},lt={},ut=30,ct=[],dt="",pt=function(t){var e,i,s=t[0];if(j(s)||F(s)||(t=[t]),!(e=(s._gsap||{}).harness)){for(i=ct.length;i--&&!ct[i].targetTest(s););e=ct[i]}for(i=t.length;i--;)t[i]&&(t[i]._gsap||(t[i]._gsap=new He(t[i],e)))||t.splice(i,1);return t},mt=function(t){return t._gsap||pt(ne(t))[0]._gsap},ft=function(t,e,i){return(i=t[e])&&F(i)?t[e]():L(i)&&t.getAttribute&&t.getAttribute(e)||i},gt=function(t,e){return(t=t.split(",")).forEach(e)||t},_t=function(t){return Math.round(1e5*t)/1e5||0},vt=function(t){return Math.round(1e7*t)/1e7||0},xt=function(t,e){var i=e.charAt(0),s=parseFloat(e.substr(2));return t=parseFloat(t),"+"===i?t+s:"-"===i?t-s:"*"===i?t*s:t/s},wt=function(t,e){for(var i=e.length,s=0;t.indexOf(e[s])<0&&++s<i;);return s<i},yt=function(){var t,e,i=at.length,s=at.slice(0);for(ot={},at.length=0,t=0;t<i;t++)(e=s[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},bt=function(t,e,i,s){at.length&&!a&&yt(),t.render(e,i,s||a&&e<0&&(t._initted||t._startAt)),at.length&&!a&&yt()},Tt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(G).length<2?e:D(t)?t.trim():t},Mt=function(t){return t},Et=function(t,e){for(var i in e)i in t||(t[i]=e[i]);return t},Ot=function(t,e){for(var i in e)t[i]=e[i];return t},At=function t(e,i){for(var s in i)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(e[s]=j(i[s])?t(e[s]||(e[s]={}),i[s]):i[s]);return e},Ct=function(t,e){var i,s={};for(i in t)i in e||(s[i]=t[i]);return s},St=function(t){var e,i=t.parent||h,s=t.keyframes?(e=B(t.keyframes),function(t,i){for(var s in i)s in t||"duration"===s&&e||"ease"===s||(t[s]=i[s])}):Et;if(U(t.inherit))for(;i;)s(t,i.vars.defaults),i=i.parent||i._dp;return t},Pt=function(t,e,i,s,r){void 0===i&&(i="_first"),void 0===s&&(s="_last");var n,a=t[s];if(r)for(n=e[r];a&&a[r]>n;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[i],t[i]=e),e._next?e._next._prev=e:t[s]=e,e._prev=a,e.parent=e._dp=t,e},zt=function(t,e,i,s){void 0===i&&(i="_first"),void 0===s&&(s="_last");var r=e._prev,n=e._next;r?r._next=n:t[i]===e&&(t[i]=n),n?n._prev=r:t[s]===e&&(t[s]=r),e._next=e._prev=e.parent=null},Dt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},Ft=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var i=t;i;)i._dirty=1,i=i.parent;return t},Rt=function(t,e,i,s){return t._startAt&&(a?t._startAt.revert(st):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,s))},Lt=function t(e){return!e||e._ts&&t(e.parent)},jt=function(t){return t._repeat?Ut(t._tTime,t=t.duration()+t._rDelay)*t:0},Ut=function(t,e){var i=Math.floor(t=vt(t/e));return t&&i===t?i-1:i},Nt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},It=function(t){return t._end=vt(t._start+(t._tDur/Math.abs(t._ts||t._rts||E)||0))},kt=function(t,e){var i=t._dp;return i&&i.smoothChildTiming&&t._ts&&(t._start=vt(i._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),It(t),i._dirty||Ft(i,t)),t},Bt=function(t,e){var i;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(i=Nt(t.rawTime(),e),(!e._dur||Jt(0,e.totalDuration(),i)-e._tTime>E)&&e.render(i,!0)),Ft(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(i=t;i._dp;)i.rawTime()>=0&&i.totalTime(i._tTime),i=i._dp;t._zTime=-1e-8}},Xt=function(t,e,i,s){return e.parent&&Dt(e),e._start=vt((R(i)?i:i||t!==h?$t(t,i,e):t._time)+e._delay),e._end=vt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),Pt(t,e,"_first","_last",t._sort?"_start":0),Wt(e)||(t._recent=e),s||Bt(t,e),t._ts<0&&kt(t,t._tTime),t},Vt=function(t,e){return(Q.ScrollTrigger||K("scrollTrigger",e))&&Q.ScrollTrigger.create(e,t)},qt=function(t,e,i,s,r){return ii(t,e,r),t._initted?!i&&t._pt&&!a&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==Le.frame?(at.push(t),t._lazy=[r,s],1):void 0:1},Yt=function t(e){var i=e.parent;return i&&i._ts&&i._initted&&!i._lock&&(i.rawTime()<0||t(i))},Wt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Gt=function(t,e,i,s){var r=t._repeat,n=vt(e)||0,a=t._tTime/t._tDur;return a&&!s&&(t._time*=n/t._dur),t._dur=n,t._tDur=r?r<0?1e10:vt(n*(r+1)+t._rDelay*r):n,a>0&&!s&&kt(t,t._tTime=t._tDur*a),t.parent&&It(t),i||Ft(t.parent,t),t},Ht=function(t){return t instanceof $e?Ft(t):Gt(t,t._dur)},Qt={_start:0,endTime:et,totalDuration:et},$t=function t(e,i,s){var r,n,a,o=e.labels,h=e._recent||Qt,l=e.duration()>=M?h.endTime(!1):e._dur;return D(i)&&(isNaN(i)||i in o)?(n=i.charAt(0),a="%"===i.substr(-1),r=i.indexOf("="),"<"===n||">"===n?(r>=0&&(i=i.replace(/=/,"")),("<"===n?h._start:h.endTime(h._repeat>=0))+(parseFloat(i.substr(1))||0)*(a?(r<0?h:s).totalDuration()/100:1)):r<0?(i in o||(o[i]=l),o[i]):(n=parseFloat(i.charAt(r-1)+i.substr(r+1)),a&&s&&(n=n/100*(B(s)?s[0]:s).totalDuration()),r>1?t(e,i.substr(0,r-1),s)+n:l+n)):null==i?l:+i},Zt=function(t,e,i){var s,r,n=R(e[1]),a=(n?2:1)+(t<2?0:1),o=e[a];if(n&&(o.duration=e[1]),o.parent=i,t){for(s=o,r=i;r&&!("immediateRender"in s);)s=r.vars.defaults||{},r=U(r.vars.inherit)&&r.parent;o.immediateRender=U(s.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new oi(e[0],o,e[a+1])},Kt=function(t,e){return t||0===t?e(t):e},Jt=function(t,e,i){return i<t?t:i>e?e:i},te=function(t,e){return D(t)&&(e=H.exec(t))?e[1]:""},ee=function(t,e,i){return Kt(i,(function(i){return Jt(t,e,i)}))},ie=[].slice,se=function(t,e){return t&&j(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&j(t[0]))&&!t.nodeType&&t!==l},re=function(t,e,i){return void 0===i&&(i=[]),t.forEach((function(t){var s;return D(t)&&!e||se(t,1)?(s=i).push.apply(s,ne(t)):i.push(t)}))||i},ne=function(t,e,i){return o&&!e&&o.selector?o.selector(t):!D(t)||i||!u&&je()?B(t)?re(t,i):se(t)?ie.call(t,0):t?[t]:[]:ie.call((e||c).querySelectorAll(t),0)},ae=function(t){return t=ne(t)[0]||J("Invalid scope")||{},function(e){var i=t.current||t.nativeElement||t;return ne(e,i.querySelectorAll?i:i===t?J("Invalid scope")||c.createElement("div"):t)}},oe=function(t){return t.sort((function(){return.5-Math.random()}))},he=function(t){if(F(t))return t;var e=j(t)?t:{each:t},i=Ve(e.ease),s=e.from||0,r=parseFloat(e.base)||0,n={},a=s>0&&s<1,o=isNaN(s)||a,h=e.axis,l=s,u=s;return D(s)?l=u={center:.5,edges:.5,end:1}[s]||0:!a&&o&&(l=s[0],u=s[1]),function(t,a,c){var d,p,m,f,g,_,v,x,w,y=(c||e).length,b=n[y];if(!b){if(!(w="auto"===e.grid?0:(e.grid||[1,M])[1])){for(v=-M;v<(v=c[w++].getBoundingClientRect().left)&&w<y;);w<y&&w--}for(b=n[y]=[],d=o?Math.min(w,y)*l-.5:s%w,p=w===M?0:o?y*u/w-.5:s/w|0,v=0,x=M,_=0;_<y;_++)m=_%w-d,f=p-(_/w|0),b[_]=g=h?Math.abs("y"===h?f:m):S(m*m+f*f),g>v&&(v=g),g<x&&(x=g);"random"===s&&oe(b),b.max=v-x,b.min=x,b.v=y=(parseFloat(e.amount)||parseFloat(e.each)*(w>y?y-1:h?"y"===h?y/w:w:Math.max(w,y/w))||0)*("edges"===s?-1:1),b.b=y<0?r-y:r,b.u=te(e.amount||e.each)||0,i=i&&y<0?Be(i):i}return y=(b[t]-b.min)/b.max||0,vt(b.b+(i?i(y):y)*b.v)+b.u}},le=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(i){var s=vt(Math.round(parseFloat(i)/t)*t*e);return(s-s%1)/e+(R(i)?0:te(i))}},ue=function(t,e){var i,s,r=B(t);return!r&&j(t)&&(i=r=t.radius||M,t.values?(t=ne(t.values),(s=!R(t[0]))&&(i*=i)):t=le(t.increment)),Kt(e,r?F(t)?function(e){return s=t(e),Math.abs(s-e)<=i?s:e}:function(e){for(var r,n,a=parseFloat(s?e.x:e),o=parseFloat(s?e.y:0),h=M,l=0,u=t.length;u--;)(r=s?(r=t[u].x-a)*r+(n=t[u].y-o)*n:Math.abs(t[u]-a))<h&&(h=r,l=u);return l=!i||h<=i?t[l]:e,s||l===e||R(e)?l:l+te(e)}:le(t))},ce=function(t,e,i,s){return Kt(B(t)?!e:!0===i?!!(i=0):!s,(function(){return B(t)?t[~~(Math.random()*t.length)]:(i=i||1e-5)&&(s=i<1?Math.pow(10,(i+"").length-2):1)&&Math.floor(Math.round((t-i/2+Math.random()*(e-t+.99*i))/i)*i*s)/s}))},de=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},pe=function(t,e){return function(i){return t(parseFloat(i))+(e||te(i))}},me=function(t,e,i){return xe(t,e,0,1,i)},fe=function(t,e,i){return Kt(i,(function(i){return t[~~e(i)]}))},ge=function t(e,i,s){var r=i-e;return B(e)?fe(e,t(0,e.length),i):Kt(s,(function(t){return(r+(t-e)%r)%r+e}))},_e=function t(e,i,s){var r=i-e,n=2*r;return B(e)?fe(e,t(0,e.length-1),i):Kt(s,(function(t){return e+((t=(n+(t-e)%n)%n||0)>r?n-t:t)}))},ve=function(t){for(var e,i,s,r,n=0,a="";~(e=t.indexOf("random(",n));)s=t.indexOf(")",e),r="["===t.charAt(e+7),i=t.substr(e+7,s-e-7).match(r?G:X),a+=t.substr(n,e-n)+ce(r?i:+i[0],r?0:+i[1],+i[2]||1e-5),n=s+1;return a+t.substr(n,t.length-n)},xe=function(t,e,i,s,r){var n=e-t,a=s-i;return Kt(r,(function(e){return i+((e-t)/n*a||0)}))},we=function t(e,i,s,r){var n=isNaN(e+i)?0:function(t){return(1-t)*e+t*i};if(!n){var a,o,h,l,u,c=D(e),d={};if(!0===s&&(r=1)&&(s=null),c)e={p:e},i={p:i};else if(B(e)&&!B(i)){for(h=[],l=e.length,u=l-2,o=1;o<l;o++)h.push(t(e[o-1],e[o]));l--,n=function(t){t*=l;var e=Math.min(u,~~t);return h[e](t-e)},s=i}else r||(e=Ot(B(e)?[]:{},e));if(!h){for(a in i)ti.call(d,e,a,"get",i[a]);n=function(t){return gi(t,d)||(c?e.p:e)}}}return Kt(s,n)},ye=function(t,e,i){var s,r,n,a=t.labels,o=M;for(s in a)(r=a[s]-e)<0==!!i&&r&&o>(r=Math.abs(r))&&(n=s,o=r);return n},be=function(t,e,i){var s,r,n,a=t.vars,h=a[e],l=o,u=t._ctx;if(h)return s=a[e+"Params"],r=a.callbackScope||t,i&&at.length&&yt(),u&&(o=u),n=s?h.apply(r,s):h.call(r),o=l,n},Te=function(t){return Dt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!a),t.progress()<1&&be(t,"onInterrupt"),t},Me=[],Ee=function(t){if(t)if(t=!t.name&&t.default||t,N()||t.headless){var e=t.name,i=F(t),s=e&&!i&&t.init?function(){this._props=[]}:t,r={init:et,render:gi,add:ti,kill:vi,modifier:_i,rawVars:0},n={targetTest:0,get:0,getSetter:di,aliases:{},register:0};if(je(),t!==s){if(ht[e])return;Et(s,Et(Ct(t,r),n)),Ot(s.prototype,Ot(r,Ct(t,n))),ht[s.prop=e]=s,t.targetTest&&(ct.push(s),nt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}tt(e,s),t.register&&t.register(Ri,s,yi)}else Me.push(t)},Oe=255,Ae={aqua:[0,Oe,Oe],lime:[0,Oe,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Oe],navy:[0,0,128],white:[Oe,Oe,Oe],olive:[128,128,0],yellow:[Oe,Oe,0],orange:[Oe,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Oe,0,0],pink:[Oe,192,203],cyan:[0,Oe,Oe],transparent:[Oe,Oe,Oe,0]},Ce=function(t,e,i){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)*Oe+.5|0},Se=function(t,e,i){var s,r,n,a,o,h,l,u,c,d,p=t?R(t)?[t>>16,t>>8&Oe,t&Oe]:0:Ae.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Ae[t])p=Ae[t];else if("#"===t.charAt(0)){if(t.length<6&&(s=t.charAt(1),r=t.charAt(2),n=t.charAt(3),t="#"+s+s+r+r+n+n+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Oe,p&Oe,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Oe,t&Oe]}else if("hsl"===t.substr(0,3))if(p=d=t.match(X),e){if(~t.indexOf("="))return p=t.match(V),i&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,s=2*(h=+p[2]/100)-(r=h<=.5?h*(o+1):h+o-h*o),p.length>3&&(p[3]*=1),p[0]=Ce(a+1/3,s,r),p[1]=Ce(a,s,r),p[2]=Ce(a-1/3,s,r);else p=t.match(X)||Ae.transparent;p=p.map(Number)}return e&&!d&&(s=p[0]/Oe,r=p[1]/Oe,n=p[2]/Oe,h=((l=Math.max(s,r,n))+(u=Math.min(s,r,n)))/2,l===u?a=o=0:(c=l-u,o=h>.5?c/(2-l-u):c/(l+u),a=l===s?(r-n)/c+(r<n?6:0):l===r?(n-s)/c+2:(s-r)/c+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*h+.5)),i&&p.length<4&&(p[3]=1),p},Pe=function(t){var e=[],i=[],s=-1;return t.split(De).forEach((function(t){var r=t.match(q)||[];e.push.apply(e,r),i.push(s+=r.length+1)})),e.c=i,e},ze=function(t,e,i){var s,r,n,a,o="",h=(t+o).match(De),l=e?"hsla(":"rgba(",u=0;if(!h)return t;if(h=h.map((function(t){return(t=Se(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),i&&(n=Pe(t),(s=i.c).join(o)!==n.c.join(o)))for(a=(r=t.replace(De,"1").split(q)).length-1;u<a;u++)o+=r[u]+(~s.indexOf(u)?h.shift()||l+"0,0,0,0)":(n.length?n:h.length?h:i).shift());if(!r)for(a=(r=t.split(De)).length-1;u<a;u++)o+=r[u]+h[u];return o+r[a]},De=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Ae)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Fe=/hsl[a]?\(/,Re=function(t){var e,i=t.join(" ");if(De.lastIndex=0,De.test(i))return e=Fe.test(i),t[1]=ze(t[1],e),t[0]=ze(t[0],e,Pe(t[1])),!0},Le=function(){var t,e,i,s,r,n,a=Date.now,o=500,h=33,p=a(),m=p,g=1e3/240,_=g,v=[],x=function i(l){var u,c,d,f,x=a()-m,w=!0===l;if((x>o||x<0)&&(p+=x-h),((u=(d=(m+=x)-p)-_)>0||w)&&(f=++s.frame,r=d-1e3*s.time,s.time=d/=1e3,_+=u+(u>=g?4:g-u),c=1),w||(t=e(i)),c)for(n=0;n<v.length;n++)v[n](d,r,f,l)};return s={time:0,frame:0,tick:function(){x(!0)},deltaRatio:function(t){return r/(1e3/(t||60))},wake:function(){d&&(!u&&N()&&(l=u=window,c=l.document||{},Q.gsap=Ri,(l.gsapVersions||(l.gsapVersions=[])).push(Ri.version),Z($||l.GreenSockGlobals||!l.gsap&&l||{}),Me.forEach(Ee)),i="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&s.sleep(),e=i||function(t){return setTimeout(t,_-1e3*s.time+1|0)},f=1,x(2))},sleep:function(){(i?cancelAnimationFrame:clearTimeout)(t),f=0,e=et},lagSmoothing:function(t,e){o=t||1/0,h=Math.min(e||33,o)},fps:function(t){g=1e3/(t||240),_=1e3*s.time+g},add:function(t,e,i){var r=e?function(e,i,n,a){t(e,i,n,a),s.remove(r)}:t;return s.remove(t),v[i?"unshift":"push"](r),je(),r},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&n>=e&&n--},_listeners:v}}(),je=function(){return!f&&Le.wake()},Ue={},Ne=/^[\d.\-M][\d.\-,\s]/,Ie=/["']/g,ke=function(t){for(var e,i,s,r={},n=t.substr(1,t.length-3).split(":"),a=n[0],o=1,h=n.length;o<h;o++)i=n[o],e=o!==h-1?i.lastIndexOf(","):i.length,s=i.substr(0,e),r[a]=isNaN(s)?s.replace(Ie,"").trim():+s,a=i.substr(e+1).trim();return r},Be=function(t){return function(e){return 1-t(1-e)}},Xe=function t(e,i){for(var s,r=e._first;r;)r instanceof $e?t(r,i):!r.vars.yoyoEase||r._yoyo&&r._repeat||r._yoyo===i||(r.timeline?t(r.timeline,i):(s=r._ease,r._ease=r._yEase,r._yEase=s,r._yoyo=i)),r=r._next},Ve=function(t,e){return t&&(F(t)?t:Ue[t]||function(t){var e,i,s,r,n=(t+"").split("("),a=Ue[n[0]];return a&&n.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[ke(n[1])]:(e=t,i=e.indexOf("(")+1,s=e.indexOf(")"),r=e.indexOf("(",i),e.substring(i,~r&&r<s?e.indexOf(")",s+1):s)).split(",").map(Tt)):Ue._CE&&Ne.test(t)?Ue._CE("",t):a}(t))||e},qe=function(t,e,i,s){void 0===i&&(i=function(t){return 1-e(1-t)}),void 0===s&&(s=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var r,n={easeIn:e,easeOut:i,easeInOut:s};return gt(t,(function(t){for(var e in Ue[t]=Q[t]=n,Ue[r=t.toLowerCase()]=i,n)Ue[r+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ue[t+"."+e]=n[e]})),n},Ye=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},We=function t(e,i,s){var r=i>=1?i:1,n=(s||(e?.3:.45))/(i<1?i:1),a=n/O*(Math.asin(1/r)||0),o=function(t){return 1===t?1:r*Math.pow(2,-10*t)*z((t-a)*n)+1},h="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Ye(o);return n=O/n,h.config=function(i,s){return t(e,i,s)},h},Ge=function t(e,i){void 0===i&&(i=1.70158);var s=function(t){return t?--t*t*((i+1)*t+i)+1:0},r="out"===e?s:"in"===e?function(t){return 1-s(1-t)}:Ye(s);return r.config=function(i){return t(e,i)},r};gt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var i=e<5?e+1:e;qe(t+",Power"+(i-1),e?function(t){return Math.pow(t,i)}:function(t){return t},(function(t){return 1-Math.pow(1-t,i)}),(function(t){return t<.5?Math.pow(2*t,i)/2:1-Math.pow(2*(1-t),i)/2}))})),Ue.Linear.easeNone=Ue.none=Ue.Linear.easeIn,qe("Elastic",We("in"),We("out"),We()),g=7.5625,x=2*(v=1/(_=2.75)),w=2.5*v,qe("Bounce",(function(t){return 1-y(1-t)}),y=function(t){return t<v?g*t*t:t<x?g*Math.pow(t-1.5/_,2)+.75:t<w?g*(t-=2.25/_)*t+.9375:g*Math.pow(t-2.625/_,2)+.984375}),qe("Expo",(function(t){return Math.pow(2,10*(t-1))*t+t*t*t*t*t*t*(1-t)})),qe("Circ",(function(t){return-(S(1-t*t)-1)})),qe("Sine",(function(t){return 1===t?1:1-P(t*A)})),qe("Back",Ge("in"),Ge("out"),Ge()),Ue.SteppedEase=Ue.steps=Q.SteppedEase={config:function(t,e){void 0===t&&(t=1);var i=1/t,s=t+(e?0:1),r=e?1:0;return function(t){return((s*Jt(0,.99999999,t)|0)+r)*i}}},T.ease=Ue["quad.out"],gt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return dt+=t+","+t+"Params,"}));var He=function(t,e){this.id=C++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:ft,this.set=e?e.getSetter:di},Qe=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Gt(this,+t.duration,1,1),this.data=t.data,o&&(this._ctx=o,o.data.push(this)),f||Le.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Gt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(je(),!arguments.length)return this._tTime;var i=this._dp;if(i&&i.smoothChildTiming&&this._ts){for(kt(this,t),!i._dp||i.parent||Bt(i,this);i&&i.parent;)i.parent._time!==i._start+(i._ts>=0?i._tTime/i._ts:(i.totalDuration()-i._tTime)/-i._ts)&&i.totalTime(i._tTime,!0),i=i.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Xt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===E||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),bt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+jt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+jt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var i=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*i,e):this._repeat?Ut(this._tTime,i)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var i=this.parent&&this._ts?Nt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Jt(-Math.abs(this._delay),this._tDur,i),!1!==e),It(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(je(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==E&&(this._tTime-=E)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Xt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(U(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Nt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=rt);var e=a;return a=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),a=e,this},e.globalTime=function(t){for(var e=this,i=arguments.length?t:e.rawTime();e;)i=e._start+i/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):i},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Ht(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Ht(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime($t(this,t),U(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,U(e)),this._dur||(this._zTime=-1e-8),this},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,i=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<this.endTime(!0)-E))},e.eventCallback=function(t,e,i){var s=this.vars;return arguments.length>1?(e?(s[t]=e,i&&(s[t+"Params"]=i),"onUpdate"===t&&(this._onUpdate=e)):delete s[t],this):s[t]},e.then=function(t){var e=this;return new Promise((function(i){var s=F(t)?t:Mt,r=function(){var t=e.then;e.then=null,F(s)&&(s=s(e))&&(s.then||s===e)&&(e.then=t),i(s),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?r():e._prom=r}))},e.kill=function(){Te(this)},t}();Et(Qe.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var $e=function(t){function e(e,i){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=U(e.sortChildren),h&&Xt(e.parent||h,s(r),i),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&Vt(s(r),e.scrollTrigger),r}r(e,t);var i=e.prototype;return i.to=function(t,e,i){return Zt(0,arguments,this),this},i.from=function(t,e,i){return Zt(1,arguments,this),this},i.fromTo=function(t,e,i,s){return Zt(2,arguments,this),this},i.set=function(t,e,i){return e.duration=0,e.parent=this,St(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new oi(t,e,$t(this,i),1),this},i.call=function(t,e,i){return Xt(this,oi.delayedCall(0,t,e),i)},i.staggerTo=function(t,e,i,s,r,n,a){return i.duration=e,i.stagger=i.stagger||s,i.onComplete=n,i.onCompleteParams=a,i.parent=this,new oi(t,i,$t(this,r)),this},i.staggerFrom=function(t,e,i,s,r,n,a){return i.runBackwards=1,St(i).immediateRender=U(i.immediateRender),this.staggerTo(t,e,i,s,r,n,a)},i.staggerFromTo=function(t,e,i,s,r,n,a,o){return s.startAt=i,St(s).immediateRender=U(s.immediateRender),this.staggerTo(t,e,s,r,n,a,o)},i.render=function(t,e,i){var s,r,n,o,l,u,c,d,p,m,f,g,_=this._time,v=this._dirty?this.totalDuration():this._tDur,x=this._dur,w=t<=0?0:vt(t),y=this._zTime<0!=t<0&&(this._initted||!x);if(this!==h&&w>v&&t>=0&&(w=v),w!==this._tTime||i||y){if(_!==this._time&&x&&(w+=this._time-_,t+=this._time-_),s=w,p=this._start,u=!(d=this._ts),y&&(x||(_=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(f=this._yoyo,l=x+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*l+t,e,i);if(s=vt(w%l),w===v?(o=this._repeat,s=x):((o=~~(m=vt(w/l)))&&o===m&&(s=x,o--),s>x&&(s=x)),m=Ut(this._tTime,l),!_&&this._tTime&&m!==o&&this._tTime-m*l-this._dur<=0&&(m=o),f&&1&o&&(s=x-s,g=1),o!==m&&!this._lock){var b=f&&1&m,T=b===(f&&1&o);if(o<m&&(b=!b),_=b?0:w%x?x:w,this._lock=1,this.render(_||(g?0:vt(o*l)),e,!x)._lock=0,this._tTime=w,!e&&this.parent&&be(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),_&&_!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(x=this._dur,v=this._tDur,T&&(this._lock=2,_=b?x:-1e-4,this.render(_,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Xe(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(t,e,i){var s;if(i>e)for(s=t._first;s&&s._start<=i;){if("isPause"===s.data&&s._start>e)return s;s=s._next}else for(s=t._last;s&&s._start>=i;){if("isPause"===s.data&&s._start<e)return s;s=s._prev}}(this,vt(_),vt(s)),c&&(w-=s-(s=c._start))),this._tTime=w,this._time=s,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,_=0),!_&&s&&!e&&!o&&(be(this,"onStart"),this._tTime!==w))return this;if(s>=_&&t>=0)for(r=this._first;r;){if(n=r._next,(r._act||s>=r._start)&&r._ts&&c!==r){if(r.parent!==this)return this.render(t,e,i);if(r.render(r._ts>0?(s-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(s-r._start)*r._ts,e,i),s!==this._time||!this._ts&&!u){c=0,n&&(w+=this._zTime=-1e-8);break}}r=n}else{r=this._last;for(var M=t<0?t:s;r;){if(n=r._prev,(r._act||M<=r._end)&&r._ts&&c!==r){if(r.parent!==this)return this.render(t,e,i);if(r.render(r._ts>0?(M-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(M-r._start)*r._ts,e,i||a&&(r._initted||r._startAt)),s!==this._time||!this._ts&&!u){c=0,n&&(w+=this._zTime=M?-1e-8:E);break}}r=n}}if(c&&!e&&(this.pause(),c.render(s>=_?0:-1e-8)._zTime=s>=_?1:-1,this._ts))return this._start=p,It(this),this.render(t,e,i);this._onUpdate&&!e&&be(this,"onUpdate",!0),(w===v&&this._tTime>=this.totalDuration()||!w&&_)&&(p!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((t||!x)&&(w===v&&this._ts>0||!w&&this._ts<0)&&Dt(this,1),e||t<0&&!_||!w&&!_&&v||(be(this,w===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(w<v&&this.timeScale()>0)&&this._prom())))}return this},i.add=function(t,e){var i=this;if(R(e)||(e=$t(this,e,t)),!(t instanceof Qe)){if(B(t))return t.forEach((function(t){return i.add(t,e)})),this;if(D(t))return this.addLabel(t,e);if(!F(t))return this;t=oi.delayedCall(0,t)}return this!==t?Xt(this,t,e):this},i.getChildren=function(t,e,i,s){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===i&&(i=!0),void 0===s&&(s=-M);for(var r=[],n=this._first;n;)n._start>=s&&(n instanceof oi?e&&r.push(n):(i&&r.push(n),t&&r.push.apply(r,n.getChildren(!0,e,i)))),n=n._next;return r},i.getById=function(t){for(var e=this.getChildren(1,1,1),i=e.length;i--;)if(e[i].vars.id===t)return e[i]},i.remove=function(t){return D(t)?this.removeLabel(t):F(t)?this.killTweensOf(t):(t.parent===this&&zt(this,t),t===this._recent&&(this._recent=this._last),Ft(this))},i.totalTime=function(e,i){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=vt(Le.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,i),this._forcing=0,this):this._tTime},i.addLabel=function(t,e){return this.labels[t]=$t(this,e),this},i.removeLabel=function(t){return delete this.labels[t],this},i.addPause=function(t,e,i){var s=oi.delayedCall(0,e||et,i);return s.data="isPause",this._hasPause=1,Xt(this,s,$t(this,t))},i.removePause=function(t){var e=this._first;for(t=$t(this,t);e;)e._start===t&&"isPause"===e.data&&Dt(e),e=e._next},i.killTweensOf=function(t,e,i){for(var s=this.getTweensOf(t,i),r=s.length;r--;)Ze!==s[r]&&s[r].kill(t,e);return this},i.getTweensOf=function(t,e){for(var i,s=[],r=ne(t),n=this._first,a=R(e);n;)n instanceof oi?wt(n._targets,r)&&(a?(!Ze||n._initted&&n._ts)&&n.globalTime(0)<=e&&n.globalTime(n.totalDuration())>e:!e||n.isActive())&&s.push(n):(i=n.getTweensOf(r,e)).length&&s.push.apply(s,i),n=n._next;return s},i.tweenTo=function(t,e){e=e||{};var i,s=this,r=$t(s,t),n=e,a=n.startAt,o=n.onStart,h=n.onStartParams,l=n.immediateRender,u=oi.to(s,Et({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:r,overwrite:"auto",duration:e.duration||Math.abs((r-(a&&"time"in a?a.time:s._time))/s.timeScale())||E,onStart:function(){if(s.pause(),!i){var t=e.duration||Math.abs((r-(a&&"time"in a?a.time:s._time))/s.timeScale());u._dur!==t&&Gt(u,t,0,1).render(u._time,!0,!0),i=1}o&&o.apply(u,h||[])}},e));return l?u.render(0):u},i.tweenFromTo=function(t,e,i){return this.tweenTo(e,Et({startAt:{time:$t(this,t)}},i))},i.recent=function(){return this._recent},i.nextLabel=function(t){return void 0===t&&(t=this._time),ye(this,$t(this,t))},i.previousLabel=function(t){return void 0===t&&(t=this._time),ye(this,$t(this,t),1)},i.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+E)},i.shiftChildren=function(t,e,i){void 0===i&&(i=0);for(var s,r=this._first,n=this.labels;r;)r._start>=i&&(r._start+=t,r._end+=t),r=r._next;if(e)for(s in n)n[s]>=i&&(n[s]+=t);return Ft(this)},i.invalidate=function(e){var i=this._first;for(this._lock=0;i;)i.invalidate(e),i=i._next;return t.prototype.invalidate.call(this,e)},i.clear=function(t){void 0===t&&(t=!0);for(var e,i=this._first;i;)e=i._next,this.remove(i),i=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Ft(this)},i.totalDuration=function(t){var e,i,s,r=0,n=this,a=n._last,o=M;if(arguments.length)return n.timeScale((n._repeat<0?n.duration():n.totalDuration())/(n.reversed()?-t:t));if(n._dirty){for(s=n.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(i=a._start)>o&&n._sort&&a._ts&&!n._lock?(n._lock=1,Xt(n,a,i-a._delay,1)._lock=0):o=i,i<0&&a._ts&&(r-=i,(!s&&!n._dp||s&&s.smoothChildTiming)&&(n._start+=i/n._ts,n._time-=i,n._tTime-=i),n.shiftChildren(-i,!1,-Infinity),o=0),a._end>r&&a._ts&&(r=a._end),a=e;Gt(n,n===h&&n._time>r?n._time:r,1,1),n._dirty=0}return n._tDur},e.updateRoot=function(t){if(h._ts&&(bt(h,Nt(t,h)),p=Le.frame),Le.frame>=ut){ut+=b.autoSleep||120;var e=h._first;if((!e||!e._ts)&&b.autoSleep&&Le._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Le.sleep()}}},e}(Qe);Et($e.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ze,Ke,Je=function(t,e,i,s,r,n,a){var o,h,l,u,c,d,p,m,f=new yi(this._pt,t,e,0,1,fi,null,r),g=0,_=0;for(f.b=i,f.e=s,i+="",(p=~(s+="").indexOf("random("))&&(s=ve(s)),n&&(n(m=[i,s],t,e),i=m[0],s=m[1]),h=i.match(Y)||[];o=Y.exec(s);)u=o[0],c=s.substring(g,o.index),l?l=(l+1)%5:"rgba("===c.substr(-5)&&(l=1),u!==h[_++]&&(d=parseFloat(h[_-1])||0,f._pt={_next:f._pt,p:c||1===_?c:",",s:d,c:"="===u.charAt(1)?xt(d,u)-d:parseFloat(u)-d,m:l&&l<4?Math.round:0},g=Y.lastIndex);return f.c=g<s.length?s.substring(g,s.length):"",f.fp=a,(W.test(s)||p)&&(f.e=0),this._pt=f,f},ti=function(t,e,i,s,r,n,a,o,h,l){F(s)&&(s=s(r||0,t,n));var u,c=t[e],d="get"!==i?i:F(c)?h?t[e.indexOf("set")||!F(t["get"+e.substr(3)])?e:"get"+e.substr(3)](h):t[e]():c,p=F(c)?h?ui:li:hi;if(D(s)&&(~s.indexOf("random(")&&(s=ve(s)),"="===s.charAt(1)&&((u=xt(d,s)+(te(d)||0))||0===u)&&(s=u)),!l||d!==s||Ke)return isNaN(d*s)||""===s?(!c&&!(e in t)&&K(e,s),Je.call(this,t,e,d,s,p,o||b.stringFilter,h)):(u=new yi(this._pt,t,e,+d||0,s-(d||0),"boolean"==typeof c?mi:pi,0,p),h&&(u.fp=h),a&&u.modifier(a,this,t),this._pt=u)},ei=function(t,e,i,s,r,n){var a,o,h,l;if(ht[t]&&!1!==(a=new ht[t]).init(r,a.rawVars?e[t]:function(t,e,i,s,r){if(F(t)&&(t=ri(t,r,e,i,s)),!j(t)||t.style&&t.nodeType||B(t)||k(t))return D(t)?ri(t,r,e,i,s):t;var n,a={};for(n in t)a[n]=ri(t[n],r,e,i,s);return a}(e[t],s,r,n,i),i,s,n)&&(i._pt=o=new yi(i._pt,r,t,0,1,a.render,a,0,a.priority),i!==m))for(h=i._ptLookup[i._targets.indexOf(r)],l=a._props.length;l--;)h[a._props[l]]=o;return a},ii=function t(e,i,s){var r,o,l,u,c,d,p,m,f,g,_,v,x,w=e.vars,y=w.ease,b=w.startAt,O=w.immediateRender,A=w.lazy,C=w.onUpdate,S=w.runBackwards,P=w.yoyoEase,z=w.keyframes,D=w.autoRevert,F=e._dur,R=e._startAt,L=e._targets,j=e.parent,N=j&&"nested"===j.data?j.vars.targets:L,I="auto"===e._overwrite&&!n,k=e.timeline;if(k&&(!z||!y)&&(y="none"),e._ease=Ve(y,T.ease),e._yEase=P?Be(Ve(!0===P?y:P,T.ease)):0,P&&e._yoyo&&!e._repeat&&(P=e._yEase,e._yEase=e._ease,e._ease=P),e._from=!k&&!!w.runBackwards,!k||z&&!w.stagger){if(v=(m=L[0]?mt(L[0]).harness:0)&&w[m.prop],r=Ct(w,nt),R&&(R._zTime<0&&R.progress(1),i<0&&S&&O&&!D?R.render(-1,!0):R.revert(S&&F?st:it),R._lazy=0),b){if(Dt(e._startAt=oi.set(L,Et({data:"isStart",overwrite:!1,parent:j,immediateRender:!0,lazy:!R&&U(A),startAt:null,delay:0,onUpdate:C&&function(){return be(e,"onUpdate")},stagger:0},b))),e._startAt._dp=0,e._startAt._sat=e,i<0&&(a||!O&&!D)&&e._startAt.revert(st),O&&F&&i<=0&&s<=0)return void(i&&(e._zTime=i))}else if(S&&F&&!R)if(i&&(O=!1),l=Et({overwrite:!1,data:"isFromStart",lazy:O&&!R&&U(A),immediateRender:O,stagger:0,parent:j},r),v&&(l[m.prop]=v),Dt(e._startAt=oi.set(L,l)),e._startAt._dp=0,e._startAt._sat=e,i<0&&(a?e._startAt.revert(st):e._startAt.render(-1,!0)),e._zTime=i,O){if(!i)return}else t(e._startAt,E,E);for(e._pt=e._ptCache=0,A=F&&U(A)||A&&!F,o=0;o<L.length;o++){if(p=(c=L[o])._gsap||pt(L)[o]._gsap,e._ptLookup[o]=g={},ot[p.id]&&at.length&&yt(),_=N===L?o:N.indexOf(c),m&&!1!==(f=new m).init(c,v||r,e,_,N)&&(e._pt=u=new yi(e._pt,c,f.name,0,1,f.render,f,0,f.priority),f._props.forEach((function(t){g[t]=u})),f.priority&&(d=1)),!m||v)for(l in r)ht[l]&&(f=ei(l,r,e,_,c,N))?f.priority&&(d=1):g[l]=u=ti.call(e,c,l,"get",r[l],_,N,0,w.stringFilter);e._op&&e._op[o]&&e.kill(c,e._op[o]),I&&e._pt&&(Ze=e,h.killTweensOf(c,g,e.globalTime(i)),x=!e.parent,Ze=0),e._pt&&A&&(ot[p.id]=1)}d&&wi(e),e._onInit&&e._onInit(e)}e._onUpdate=C,e._initted=(!e._op||e._pt)&&!x,z&&i<=0&&k.render(M,!0,!0)},si=function(t,e,i,s){var r,n,a=e.ease||s||"power1.inOut";if(B(e))n=i[t]||(i[t]=[]),e.forEach((function(t,i){return n.push({t:i/(e.length-1)*100,v:t,e:a})}));else for(r in e)n=i[r]||(i[r]=[]),"ease"===r||n.push({t:parseFloat(t),v:e[r],e:a})},ri=function(t,e,i,s,r){return F(t)?t.call(e,i,s,r):D(t)&&~t.indexOf("random(")?ve(t):t},ni=dt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",ai={};gt(ni+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return ai[t]=1}));var oi=function(t){function e(e,i,r,a){var o;"number"==typeof i&&(r.duration=i,i=r,r=null);var l,u,c,d,p,m,f,g,_=(o=t.call(this,a?i:St(i))||this).vars,v=_.duration,x=_.delay,w=_.immediateRender,y=_.stagger,T=_.overwrite,M=_.keyframes,E=_.defaults,O=_.scrollTrigger,A=_.yoyoEase,C=i.parent||h,S=(B(e)||k(e)?R(e[0]):"length"in i)?[e]:ne(e);if(o._targets=S.length?pt(S):J("GSAP target "+e+" not found. https://gsap.com",!b.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=T,M||y||I(v)||I(x)){if(i=o.vars,(l=o.timeline=new $e({data:"nested",defaults:E||{},targets:C&&"nested"===C.data?C.vars.targets:S})).kill(),l.parent=l._dp=s(o),l._start=0,y||I(v)||I(x)){if(d=S.length,f=y&&he(y),j(y))for(p in y)~ni.indexOf(p)&&(g||(g={}),g[p]=y[p]);for(u=0;u<d;u++)(c=Ct(i,ai)).stagger=0,A&&(c.yoyoEase=A),g&&Ot(c,g),m=S[u],c.duration=+ri(v,s(o),u,m,S),c.delay=(+ri(x,s(o),u,m,S)||0)-o._delay,!y&&1===d&&c.delay&&(o._delay=x=c.delay,o._start+=x,c.delay=0),l.to(m,c,f?f(u,m,S):0),l._ease=Ue.none;l.duration()?v=x=0:o.timeline=0}else if(M){St(Et(l.vars.defaults,{ease:"none"})),l._ease=Ve(M.ease||i.ease||"none");var P,z,D,F=0;if(B(M))M.forEach((function(t){return l.to(S,t,">")})),l.duration();else{for(p in c={},M)"ease"===p||"easeEach"===p||si(p,M[p],c,M.easeEach);for(p in c)for(P=c[p].sort((function(t,e){return t.t-e.t})),F=0,u=0;u<P.length;u++)(D={ease:(z=P[u]).e,duration:(z.t-(u?P[u-1].t:0))/100*v})[p]=z.v,l.to(S,D,F),F+=D.duration;l.duration()<v&&l.to({},{duration:v-l.duration()})}}v||o.duration(v=l.duration())}else o.timeline=0;return!0!==T||n||(Ze=s(o),h.killTweensOf(S),Ze=0),Xt(C,s(o),r),i.reversed&&o.reverse(),i.paused&&o.paused(!0),(w||!v&&!M&&o._start===vt(C._time)&&U(w)&&Lt(s(o))&&"nested"!==C.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-x)||0)),O&&Vt(s(o),O),o}r(e,t);var i=e.prototype;return i.render=function(t,e,i){var s,r,n,o,h,l,u,c,d,p=this._time,m=this._tDur,f=this._dur,g=t<0,_=t>m-E&&!g?m:t<E?0:t;if(f){if(_!==this._tTime||!t||i||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g||this._lazy){if(s=_,c=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*o+t,e,i);if(s=vt(_%o),_===m?(n=this._repeat,s=f):(n=~~(h=vt(_/o)))&&n===h?(s=f,n--):s>f&&(s=f),(l=this._yoyo&&1&n)&&(d=this._yEase,s=f-s),h=Ut(this._tTime,o),s===p&&!i&&this._initted&&n===h)return this._tTime=_,this;n!==h&&(c&&this._yEase&&Xe(c,l),this.vars.repeatRefresh&&!l&&!this._lock&&s!==o&&this._initted&&(this._lock=i=1,this.render(vt(o*n),!0).invalidate()._lock=0))}if(!this._initted){if(qt(this,g?t:s,i,e,_))return this._tTime=0,this;if(!(p===this._time||i&&this.vars.repeatRefresh&&n!==h))return this;if(f!==this._dur)return this.render(t,e,i)}if(this._tTime=_,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(d||this._ease)(s/f),this._from&&(this.ratio=u=1-u),s&&!p&&!e&&!n&&(be(this,"onStart"),this._tTime!==_))return this;for(r=this._pt;r;)r.r(u,r.d),r=r._next;c&&c.render(t<0?t:c._dur*c._ease(s/this._dur),e,i)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(g&&Rt(this,t,0,i),be(this,"onUpdate")),this._repeat&&n!==h&&this.vars.onRepeat&&!e&&this.parent&&be(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(g&&!this._onUpdate&&Rt(this,t,0,!0),(t||!f)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&Dt(this,1),e||g&&!p||!(_||p||l)||(be(this,_===m?"onComplete":"onReverseComplete",!0),this._prom&&!(_<m&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,i,s){var r,n,o,h=t.ratio,l=e<0||!e&&(!t._start&&Yt(t)&&(t._initted||!Wt(t))||(t._ts<0||t._dp._ts<0)&&!Wt(t))?0:1,u=t._rDelay,c=0;if(u&&t._repeat&&(c=Jt(0,t._tDur,e),n=Ut(c,u),t._yoyo&&1&n&&(l=1-l),n!==Ut(t._tTime,u)&&(h=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==h||a||s||t._zTime===E||!e&&t._zTime){if(!t._initted&&qt(t,e,s,i,c))return;for(o=t._zTime,t._zTime=e||(i?E:0),i||(i=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=c,r=t._pt;r;)r.r(l,r.d),r=r._next;e<0&&Rt(t,e,0,!0),t._onUpdate&&!i&&be(t,"onUpdate"),c&&t._repeat&&!i&&t.parent&&be(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&Dt(t,1),i||a||(be(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,i);return this},i.targets=function(){return this._targets},i.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},i.resetTo=function(t,e,i,s,r){f||Le.wake(),this._ts||this.play();var n=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||ii(this,n),function(t,e,i,s,r,n,a,o){var h,l,u,c,d=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!d)for(d=t._ptCache[e]=[],u=t._ptLookup,c=t._targets.length;c--;){if((h=u[c][e])&&h.d&&h.d._pt)for(h=h.d._pt;h&&h.p!==e&&h.fp!==e;)h=h._next;if(!h)return Ke=1,t.vars[e]="+=0",ii(t,a),Ke=0,o?J(e+" not eligible for reset"):1;d.push(h)}for(c=d.length;c--;)(h=(l=d[c])._pt||l).s=!s&&0!==s||r?h.s+(s||0)+n*h.c:s,h.c=i-h.s,l.e&&(l.e=_t(i)+te(l.e)),l.b&&(l.b=h.s+te(l.b))}(this,t,e,i,s,this._ease(n/this._dur),n,r)?this.resetTo(t,e,i,s,1):(kt(this,0),this.parent||Pt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},i.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Te(this):this.scrollTrigger&&this.scrollTrigger.kill(!!a),this;if(this.timeline){var i=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ze&&!0!==Ze.vars.overwrite)._first||Te(this),this.parent&&i!==this.timeline.totalDuration()&&Gt(this,this._dur*this.timeline._tDur/i,0,1),this}var s,r,n,o,h,l,u,c=this._targets,d=t?ne(t):c,p=this._ptLookup,m=this._pt;if((!e||"all"===e)&&function(t,e){for(var i=t.length,s=i===e.length;s&&i--&&t[i]===e[i];);return i<0}(c,d))return"all"===e&&(this._pt=0),Te(this);for(s=this._op=this._op||[],"all"!==e&&(D(e)&&(h={},gt(e,(function(t){return h[t]=1})),e=h),e=function(t,e){var i,s,r,n,a=t[0]?mt(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(s in i=Ot({},e),o)if(s in i)for(r=(n=o[s].split(",")).length;r--;)i[n[r]]=i[s];return i}(c,e)),u=c.length;u--;)if(~d.indexOf(c[u]))for(h in r=p[u],"all"===e?(s[u]=e,o=r,n={}):(n=s[u]=s[u]||{},o=e),o)(l=r&&r[h])&&("kill"in l.d&&!0!==l.d.kill(h)||zt(this,l,"_pt"),delete r[h]),"all"!==n&&(n[h]=1);return this._initted&&!this._pt&&m&&Te(this),this},e.to=function(t,i){return new e(t,i,arguments[2])},e.from=function(t,e){return Zt(1,arguments)},e.delayedCall=function(t,i,s,r){return new e(i,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:i,onReverseComplete:i,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:r})},e.fromTo=function(t,e,i){return Zt(2,arguments)},e.set=function(t,i){return i.duration=0,i.repeatDelay||(i.repeat=0),new e(t,i)},e.killTweensOf=function(t,e,i){return h.killTweensOf(t,e,i)},e}(Qe);Et(oi.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),gt("staggerTo,staggerFrom,staggerFromTo",(function(t){oi[t]=function(){var e=new $e,i=ie.call(arguments,0);return i.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,i)}}));var hi=function(t,e,i){return t[e]=i},li=function(t,e,i){return t[e](i)},ui=function(t,e,i,s){return t[e](s.fp,i)},ci=function(t,e,i){return t.setAttribute(e,i)},di=function(t,e){return F(t[e])?li:L(t[e])&&t.setAttribute?ci:hi},pi=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},mi=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},fi=function(t,e){var i=e._pt,s="";if(!t&&e.b)s=e.b;else if(1===t&&e.e)s=e.e;else{for(;i;)s=i.p+(i.m?i.m(i.s+i.c*t):Math.round(1e4*(i.s+i.c*t))/1e4)+s,i=i._next;s+=e.c}e.set(e.t,e.p,s,e)},gi=function(t,e){for(var i=e._pt;i;)i.r(t,i.d),i=i._next},_i=function(t,e,i,s){for(var r,n=this._pt;n;)r=n._next,n.p===s&&n.modifier(t,e,i),n=r},vi=function(t){for(var e,i,s=this._pt;s;)i=s._next,s.p===t&&!s.op||s.op===t?zt(this,s,"_pt"):s.dep||(e=1),s=i;return!e},xi=function(t,e,i,s){s.mSet(t,e,s.m.call(s.tween,i,s.mt),s)},wi=function(t){for(var e,i,s,r,n=t._pt;n;){for(e=n._next,i=s;i&&i.pr>n.pr;)i=i._next;(n._prev=i?i._prev:r)?n._prev._next=n:s=n,(n._next=i)?i._prev=n:r=n,n=e}t._pt=s},yi=function(){function t(t,e,i,s,r,n,a,o,h){this.t=e,this.s=s,this.c=r,this.p=i,this.r=n||pi,this.d=a||this,this.set=o||hi,this.pr=h||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,i){this.mSet=this.mSet||this.set,this.set=xi,this.m=t,this.mt=i,this.tween=e},t}();gt(dt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return nt[t]=1})),Q.TweenMax=Q.TweenLite=oi,Q.TimelineLite=Q.TimelineMax=$e,h=new $e({sortChildren:!1,defaults:T,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Re;var bi=[],Ti={},Mi=[],Ei=0,Oi=0,Ai=function(t){return(Ti[t]||Mi).map((function(t){return t()}))},Ci=function(){var t=Date.now(),e=[];t-Ei>2&&(Ai("matchMediaInit"),bi.forEach((function(t){var i,s,r,n,a=t.queries,o=t.conditions;for(s in a)(i=l.matchMedia(a[s]).matches)&&(r=1),i!==o[s]&&(o[s]=i,n=1);n&&(t.revert(),r&&e.push(t))})),Ai("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),Ei=t,Ai("matchMedia"))},Si=function(){function t(t,e){this.selector=e&&ae(e),this.data=[],this._r=[],this.isReverted=!1,this.id=Oi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,i){F(t)&&(i=e,e=t,t=F);var s=this,r=function(){var t,r=o,n=s.selector;return r&&r!==s&&r.data.push(s),i&&(s.selector=ae(i)),o=s,t=e.apply(s,arguments),F(t)&&s._r.push(t),o=r,s.selector=n,s.isReverted=!1,t};return s.last=r,t===F?r(s,(function(t){return s.add(null,t)})):t?s[t]=r:r},e.ignore=function(t){var e=o;o=null,t(this),o=e},e.getTweens=function(){var e=[];return this.data.forEach((function(i){return i instanceof t?e.push.apply(e,i.getTweens()):i instanceof oi&&!(i.parent&&"nested"===i.parent.data)&&e.push(i)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var i=this;if(t?function(){for(var e,s=i.getTweens(),r=i.data.length;r--;)"isFlip"===(e=i.data[r]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return s.splice(s.indexOf(t),1)})));for(s.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),r=i.data.length;r--;)(e=i.data[r])instanceof $e?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof oi)&&e.revert&&e.revert(t);i._r.forEach((function(e){return e(t,i)})),i.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var s=bi.length;s--;)bi[s].id===this.id&&bi.splice(s,1)},e.revert=function(t){this.kill(t||{})},t}(),Pi=function(){function t(t){this.contexts=[],this.scope=t,o&&o.data.push(this)}var e=t.prototype;return e.add=function(t,e,i){j(t)||(t={matches:t});var s,r,n,a=new Si(0,i||this.scope),h=a.conditions={};for(r in o&&!a.selector&&(a.selector=o.selector),this.contexts.push(a),e=a.add("onMatch",e),a.queries=t,t)"all"===r?n=1:(s=l.matchMedia(t[r]))&&(bi.indexOf(a)<0&&bi.push(a),(h[r]=s.matches)&&(n=1),s.addListener?s.addListener(Ci):s.addEventListener("change",Ci));return n&&e(a,(function(t){return a.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),zi={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];e.forEach((function(t){return Ee(t)}))},timeline:function(t){return new $e(t)},getTweensOf:function(t,e){return h.getTweensOf(t,e)},getProperty:function(t,e,i,s){D(t)&&(t=ne(t)[0]);var r=mt(t||{}).get,n=i?Mt:Tt;return"native"===i&&(i=""),t?e?n((ht[e]&&ht[e].get||r)(t,e,i,s)):function(e,i,s){return n((ht[e]&&ht[e].get||r)(t,e,i,s))}:t},quickSetter:function(t,e,i){if((t=ne(t)).length>1){var s=t.map((function(t){return Ri.quickSetter(t,e,i)})),r=s.length;return function(t){for(var e=r;e--;)s[e](t)}}t=t[0]||{};var n=ht[e],a=mt(t),o=a.harness&&(a.harness.aliases||{})[e]||e,h=n?function(e){var s=new n;m._pt=0,s.init(t,i?e+i:e,m,0,[t]),s.render(1,s),m._pt&&gi(1,m)}:a.set(t,o);return n?h:function(e){return h(t,o,i?e+i:e,a,1)}},quickTo:function(t,e,i){var s,r=Ri.to(t,Et(((s={})[e]="+=0.1",s.paused=!0,s.stagger=0,s),i||{})),n=function(t,i,s){return r.resetTo(e,t,i,s)};return n.tween=r,n},isTweening:function(t){return h.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ve(t.ease,T.ease)),At(T,t||{})},config:function(t){return At(b,t||{})},registerEffect:function(t){var e=t.name,i=t.effect,s=t.plugins,r=t.defaults,n=t.extendTimeline;(s||"").split(",").forEach((function(t){return t&&!ht[t]&&!Q[t]&&J(e+" effect requires "+t+" plugin.")})),lt[e]=function(t,e,s){return i(ne(t),Et(e||{},r),s)},n&&($e.prototype[e]=function(t,i,s){return this.add(lt[e](t,j(i)?i:(s=i)&&{},this),s)})},registerEase:function(t,e){Ue[t]=Ve(e)},parseEase:function(t,e){return arguments.length?Ve(t,e):Ue},getById:function(t){return h.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var i,s,r=new $e(t);for(r.smoothChildTiming=U(t.smoothChildTiming),h.remove(r),r._dp=0,r._time=r._tTime=h._time,i=h._first;i;)s=i._next,!e&&!i._dur&&i instanceof oi&&i.vars.onComplete===i._targets[0]||Xt(r,i,i._start-i._delay),i=s;return Xt(h,r,0),r},context:function(t,e){return t?new Si(t,e):o},matchMedia:function(t){return new Pi(t)},matchMediaRefresh:function(){return bi.forEach((function(t){var e,i,s=t.conditions;for(i in s)s[i]&&(s[i]=!1,e=1);e&&t.revert()}))||Ci()},addEventListener:function(t,e){var i=Ti[t]||(Ti[t]=[]);~i.indexOf(e)||i.push(e)},removeEventListener:function(t,e){var i=Ti[t],s=i&&i.indexOf(e);s>=0&&i.splice(s,1)},utils:{wrap:ge,wrapYoyo:_e,distribute:he,random:ce,snap:ue,normalize:me,getUnit:te,clamp:ee,splitColor:Se,toArray:ne,selector:ae,mapRange:xe,pipe:de,unitize:pe,interpolate:we,shuffle:oe},install:Z,effects:lt,ticker:Le,updateRoot:$e.updateRoot,plugins:ht,globalTimeline:h,core:{PropTween:yi,globals:tt,Tween:oi,Timeline:$e,Animation:Qe,getCache:mt,_removeLinkedListItem:zt,reverting:function(){return a},context:function(t){return t&&o&&(o.data.push(t),t._ctx=o),o},suppressOverwrites:function(t){return n=t}}};gt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return zi[t]=oi[t]})),Le.add($e.updateRoot),m=zi.to({},{duration:0});var Di=function(t,e){for(var i=t._pt;i&&i.p!==e&&i.op!==e&&i.fp!==e;)i=i._next;return i},Fi=function(t,e){return{name:t,rawVars:1,init:function(t,i,s){s._onInit=function(t){var s,r;if(D(i)&&(s={},gt(i,(function(t){return s[t]=1})),i=s),e){for(r in s={},i)s[r]=e(i[r]);i=s}!function(t,e){var i,s,r,n=t._targets;for(i in e)for(s=n.length;s--;)(r=t._ptLookup[s][i])&&(r=r.d)&&(r._pt&&(r=Di(r,i)),r&&r.modifier&&r.modifier(e[i],t,n[s],i))}(t,i)}}}},Ri=zi.registerPlugin({name:"attr",init:function(t,e,i,s,r){var n,a,o;for(n in this.tween=i,e)o=t.getAttribute(n)||"",(a=this.add(t,"setAttribute",(o||0)+"",e[n],s,r,0,0,n)).op=n,a.b=o,this._props.push(n)},render:function(t,e){for(var i=e._pt;i;)a?i.set(i.t,i.p,i.b,i):i.r(t,i.d),i=i._next}},{name:"endArray",init:function(t,e){for(var i=e.length;i--;)this.add(t,i,t[i]||0,e[i],0,0,0,0,0,1)}},Fi("roundProps",le),Fi("modifiers"),Fi("snap",ue))||zi;oi.version=$e.version=Ri.version="3.12.7",d=1,N()&&je();var Li=Ue.Power0,ji=Ue.Power1,Ui=Ue.Power2,Ni=Ue.Power3,Ii=Ue.Power4,ki=Ue.Linear,Bi=Ue.Quad,Xi=Ue.Cubic,Vi=Ue.Quart,qi=Ue.Quint,Yi=Ue.Strong,Wi=Ue.Elastic,Gi=Ue.Back,Hi=Ue.SteppedEase,Qi=Ue.Bounce,$i=Ue.Sine,Zi=Ue.Expo,Ki=Ue.Circ},"./node_modules/gsap/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Back:()=>s.Back,Bounce:()=>s.Bounce,CSSPlugin:()=>r.CSSPlugin,Circ:()=>s.Circ,Cubic:()=>s.Cubic,Elastic:()=>s.Elastic,Expo:()=>s.Expo,Linear:()=>s.Linear,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Quad:()=>s.Quad,Quart:()=>s.Quart,Quint:()=>s.Quint,Sine:()=>s.Sine,SteppedEase:()=>s.SteppedEase,Strong:()=>s.Strong,TimelineLite:()=>s.TimelineLite,TimelineMax:()=>s.TimelineMax,TweenLite:()=>s.TweenLite,TweenMax:()=>a,default:()=>n,gsap:()=>n});var s=i("./node_modules/gsap/gsap-core.js"),r=i("./node_modules/gsap/CSSPlugin.js"),n=s.gsap.registerPlugin(r.CSSPlugin)||s.gsap,a=n.core.Tween},"./node_modules/lodash/each.js":()=>{throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nError: ENOENT: no such file or directory, open '/Users/francoisnoell/code/FranckChristmas/FLOEMA/node_modules/lodash/each.js'")},"./node_modules/normalize-wheel/index.js":(t,e,i)=>{t.exports=i("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":t=>{"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=i},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":t=>{var e,i,s,r,n,a,o,h,l,u,c,d,p,m,f,g=!1;function _(){if(!g){g=!0;var t=navigator.userAgent,_=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(t),v=/(Mac OS X)|(Windows)|(Linux)/.exec(t);if(d=/\b(iPhone|iP[ao]d)/.exec(t),p=/\b(iP[ao]d)/.exec(t),u=/Android/i.exec(t),m=/FBAN\/\w+;/i.exec(t),f=/Mobile/i.exec(t),c=!!/Win64/.exec(t),_){(e=_[1]?parseFloat(_[1]):_[5]?parseFloat(_[5]):NaN)&&document&&document.documentMode&&(e=document.documentMode);var x=/(?:Trident\/(\d+.\d+))/.exec(t);a=x?parseFloat(x[1])+4:e,i=_[2]?parseFloat(_[2]):NaN,s=_[3]?parseFloat(_[3]):NaN,(r=_[4]?parseFloat(_[4]):NaN)?(_=/(?:Chrome\/(\d+\.\d+))/.exec(t),n=_&&_[1]?parseFloat(_[1]):NaN):n=NaN}else e=i=s=n=r=NaN;if(v){if(v[1]){var w=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(t);o=!w||parseFloat(w[1].replace("_","."))}else o=!1;h=!!v[2],l=!!v[3]}else o=h=l=!1}}var v={ie:function(){return _()||e},ieCompatibilityMode:function(){return _()||a>e},ie64:function(){return v.ie()&&c},firefox:function(){return _()||i},opera:function(){return _()||s},webkit:function(){return _()||r},safari:function(){return v.webkit()},chrome:function(){return _()||n},windows:function(){return _()||h},osx:function(){return _()||o},linux:function(){return _()||l},iphone:function(){return _()||d},mobile:function(){return _()||d||p||u||f},nativeApp:function(){return _()||m},android:function(){return _()||u},ipad:function(){return _()||p}};t.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(t,e,i)=>{"use strict";var s,r=i("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");r.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),t.exports=function(t,e){if(!r.canUseDOM||e&&!("addEventListener"in document))return!1;var i="on"+t,n=i in document;if(!n){var a=document.createElement("div");a.setAttribute(i,"return;"),n="function"==typeof a[i]}return!n&&s&&"wheel"===t&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(t,e,i)=>{"use strict";var s=i("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),r=i("./node_modules/normalize-wheel/src/isEventSupported.js");function n(t){var e=0,i=0,s=0,r=0;return"detail"in t&&(i=t.detail),"wheelDelta"in t&&(i=-t.wheelDelta/120),"wheelDeltaY"in t&&(i=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=i,i=0),s=10*e,r=10*i,"deltaY"in t&&(r=t.deltaY),"deltaX"in t&&(s=t.deltaX),(s||r)&&t.deltaMode&&(1==t.deltaMode?(s*=40,r*=40):(s*=800,r*=800)),s&&!e&&(e=s<1?-1:1),r&&!i&&(i=r<1?-1:1),{spinX:e,spinY:i,pixelX:s,pixelY:r}}n.getEventType=function(){return s.firefox()?"DOMMouseScroll":r("wheel")?"wheel":"mousewheel"},t.exports=n},"./node_modules/ogl/src/core/Camera.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Camera:()=>l});var s=i("./node_modules/ogl/src/core/Transform.js"),r=i("./node_modules/ogl/src/math/Mat4.js"),n=i("./node_modules/ogl/src/math/Vec3.js");const a=new r.Mat4,o=new n.Vec3,h=new n.Vec3;class l extends s.Transform{constructor(t,{near:e=.1,far:i=100,fov:s=45,aspect:a=1,left:o,right:h,bottom:l,top:u,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:i,fov:s,aspect:a,left:o,right:h,bottom:l,top:u,zoom:c}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new n.Vec3,this.type=o||h?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:i=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:i,aspect:s}),this.projectionMatrix.fromPerspective({fov:i*(Math.PI/180),aspect:s,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:i=this.left||-1,right:s=this.right||1,bottom:r=this.bottom||-1,top:n=this.top||1,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:i,right:s,bottom:r,top:n,zoom:a}),i/=a,s/=a,r/=a,n/=a,this.projectionMatrix.fromOrthogonal({left:i,right:s,bottom:r,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}updateProjectionMatrix(){return"perspective"===this.type?this.perspective():this.orthographic()}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t,e=t.worldMatrix){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const i=o;i.copy(t.geometry.bounds.center),i.applyMatrix4(e);const s=t.geometry.bounds.radius*e.getMaxScaleOnAxis();return this.frustumIntersectsSphere(i,s)}frustumIntersectsSphere(t,e){const i=h;for(let s=0;s<6;s++){const r=this.frustum[s];if(i.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Geometry:()=>h});var s=i("./node_modules/ogl/src/math/Vec3.js");const r=new s.Vec3;let n=1,a=1,o=!1;class h{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:i})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let r=1;35674===i&&(r=2),35675===i&&(r=3),35676===i&&(r=4);const n=s.size/r,a=1===r?0:r*r*4,o=1===r?0:4*r;for(let e=0;e<r;e++)this.gl.vertexAttribPointer(t+e,n,s.type,s.normalized,s.stride+a,s.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const i=this.attributes[e];i.needsUpdate&&this.updateAttribute(i)}));let i=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(i=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*i,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*i):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(console.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,i=t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,a=this.bounds.center,o=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,s=e.length;t<s;t+=i){const i=e[t],s=e[t+1],a=e[t+2];r.x=Math.min(i,r.x),r.y=Math.min(s,r.y),r.z=Math.min(a,r.z),n.x=Math.max(i,n.x),n.y=Math.max(s,n.y),n.z=Math.max(a,n.z)}o.sub(n,r),a.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,i=t.size;this.bounds||this.computeBoundingBox(t);let s=0;for(let t=0,n=e.length;t<n;t+=i)r.fromArray(e,t),s=Math.max(s,this.bounds.center.squaredDistance(r));this.bounds.radius=Math.sqrt(s)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Mesh:()=>o});var s=i("./node_modules/ogl/src/core/Transform.js"),r=i("./node_modules/ogl/src/math/Mat3.js"),n=i("./node_modules/ogl/src/math/Mat4.js");let a=0;class o extends s.Transform{constructor(t,{geometry:e,program:i,mode:s=t.TRIANGLES,frustumCulled:o=!0,renderOrder:h=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=i,this.mode=s,this.frustumCulled=o,this.renderOrder=h,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Program:()=>n});let s=1;const r={};class n{constructor(t,{vertex:e,fragment:i,uniforms:r={},transparent:n=!1,cullFace:a=t.BACK,frontFace:o=t.CCW,depthTest:h=!0,depthWrite:l=!0,depthFunc:u=t.LEQUAL}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=r,this.id=s++,e||console.warn("vertex shader not supplied"),i||console.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=a,this.frontFace=o,this.depthTest=h,this.depthWrite=l,this.depthFunc=u,this.blendFunc={},this.blendEquation={},this.stencilFunc={},this.stencilOp={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA)),this.vertexShader=t.createShader(t.VERTEX_SHADER),this.fragmentShader=t.createShader(t.FRAGMENT_SHADER),this.program=t.createProgram(),t.attachShader(this.program,this.vertexShader),t.attachShader(this.program,this.fragmentShader),this.setShaders({vertex:e,fragment:i})}setShaders({vertex:t,fragment:e}){if(t&&(this.gl.shaderSource(this.vertexShader,t),this.gl.compileShader(this.vertexShader),""!==this.gl.getShaderInfoLog(this.vertexShader)&&console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\nVertex Shader\n${o(t)}`)),e&&(this.gl.shaderSource(this.fragmentShader,e),this.gl.compileShader(this.fragmentShader),""!==this.gl.getShaderInfoLog(this.fragmentShader)&&console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\nFragment Shader\n${o(e)}`)),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS))return console.warn(this.gl.getProgramInfoLog(this.program));this.uniformLocations=new Map;let i=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_UNIFORMS);for(let t=0;t<i;t++){let e=this.gl.getActiveUniform(this.program,t);this.uniformLocations.set(e,this.gl.getUniformLocation(this.program,e.name));const i=e.name.match(/(\w+)/g);e.uniformName=i[0],e.nameComponents=i.slice(1)}this.attributeLocations=new Map;const s=[],r=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_ATTRIBUTES);for(let t=0;t<r;t++){const e=this.gl.getActiveAttrib(this.program,t),i=this.gl.getAttribLocation(this.program,e.name);-1!==i&&(s[i]=e.name,this.attributeLocations.set(e,i))}this.attributeOrder=s.join("")}setBlendFunc(t,e,i,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}setStencilFunc(t,e,i){this.stencilRef=e,this.stencilFunc.func=t,this.stencilFunc.ref=e,this.stencilFunc.mask=i}setStencilOp(t,e,i){this.stencilOp.stencilFail=t,this.stencilOp.depthFail=e,this.stencilOp.depthPass=i}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha),this.stencilFunc.func||this.stencilOp.stencilFail?this.gl.renderer.enable(this.gl.STENCIL_TEST):this.gl.renderer.disable(this.gl.STENCIL_TEST),this.gl.renderer.setStencilFunc(this.stencilFunc.func,this.stencilFunc.ref,this.stencilFunc.mask),this.gl.renderer.setStencilOp(this.stencilOp.stencilFail,this.stencilOp.depthFail,this.stencilOp.depthPass)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let s=this.uniforms[i.uniformName];for(const t of i.nameComponents){if(!s)break;if(!(t in s)){if(Array.isArray(s.value))break;s=void 0;break}s=s[t]}if(!s)return l(`Active uniform ${i.name} has not been supplied`);if(s&&void 0===s.value)return l(`${i.name} uniform is missing a value parameter`);if(s.value.texture)return e+=1,s.value.update(e),a(this.gl,i.type,t,e);if(s.value.length&&s.value[0].texture){const r=[];return s.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),a(this.gl,i.type,t,r)}a(this.gl,i.type,t,s.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,i,s){s=s.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const s=e*i;let n=r[s];n||(r[s]=n=new Float32Array(s));for(let s=0;s<e;s++)n.set(t[s],s*i);return n}(s):s;const n=t.renderer.state.uniformLocations.get(i);if(s.length)if(void 0===n||n.length!==s.length)t.renderer.state.uniformLocations.set(i,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,s=t.length;i<s;i++)if(t[i]!==e[i])return!1;return!0}(n,s))return;n.set?n.set(s):function(t,e){for(let i=0,s=t.length;i<s;i++)t[i]=e[i]}(n,s),t.renderer.state.uniformLocations.set(i,n)}else{if(n===s)return;t.renderer.state.uniformLocations.set(i,s)}switch(e){case 5126:return s.length?t.uniform1fv(i,s):t.uniform1f(i,s);case 35664:return t.uniform2fv(i,s);case 35665:return t.uniform3fv(i,s);case 35666:return t.uniform4fv(i,s);case 35670:case 5124:case 35678:case 36306:case 35680:case 36289:return s.length?t.uniform1iv(i,s):t.uniform1i(i,s);case 35671:case 35667:return t.uniform2iv(i,s);case 35672:case 35668:return t.uniform3iv(i,s);case 35673:case 35669:return t.uniform4iv(i,s);case 35674:return t.uniformMatrix2fv(i,!1,s);case 35675:return t.uniformMatrix3fv(i,!1,s);case 35676:return t.uniformMatrix4fv(i,!1,s)}}function o(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let h=0;function l(t){h>100||(console.warn(t),h++,h>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Renderer:()=>n});const s=new(i("./node_modules/ogl/src/math/Vec3.js").Vec3);let r=1;class n{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:i=150,dpr:s=1,alpha:n=!1,depth:a=!0,stencil:o=!1,antialias:h=!1,premultipliedAlpha:l=!1,preserveDrawingBuffer:u=!1,powerPreference:c="default",autoClear:d=!0,webgl:p=2}={}){const m={alpha:n,depth:a,stencil:o,antialias:h,premultipliedAlpha:l,preserveDrawingBuffer:u,powerPreference:c};this.dpr=s,this.alpha=n,this.color=!0,this.depth=a,this.stencil=o,this.premultipliedAlpha=l,this.autoClear=d,this.id=r++,2===p&&(this.gl=t.getContext("webgl2",m)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",m)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,i),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LEQUAL,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,i=0,s=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=i,this.state.viewport.y=s,this.gl.viewport(i,s,t,e))}setScissor(t,e,i=0,s=0){this.gl.scissor(i,s,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,i,s){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===i&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=i,this.state.blendFunc.dstAlpha=s,void 0!==i?this.gl.blendFuncSeparate(t,e,i,s):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}setStencilMask(t){this.state.stencilMask!==t&&(this.state.stencilMask=t,this.gl.stencilMask(t))}setStencilFunc(t,e,i){this.state.stencilFunc===t&&this.state.stencilRef===e&&this.state.stencilFuncMask===i||(this.state.stencilFunc=t||this.gl.ALWAYS,this.state.stencilRef=e||0,this.state.stencilFuncMask=i||0,this.gl.stencilFunc(t||this.gl.ALWAYS,e||0,i||0))}setStencilOp(t,e,i){this.state.stencilFail===t&&this.state.stencilDepthFail===e&&this.state.stencilDepthPass===i||(this.state.stencilFail=t,this.state.stencilDepthFail=e,this.state.stencilDepthPass=i,this.gl.stencilOp(t,e,i))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,i){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][i].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:i,sort:r}){let n=[];if(e&&i&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(i&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||n.push(t))})),r){const t=[],i=[],r=[];n.forEach((n=>{n.program.transparent?n.program.depthTest?i.push(n):r.push(n):t.push(n),n.zDepth=0,0===n.renderOrder&&n.program.depthTest&&e&&(n.worldMatrix.getTranslation(s),s.applyMatrix4(e.projectionViewMatrix),n.zDepth=s.z)})),t.sort(this.sortOpaque),i.sort(this.sortTransparent),r.sort(this.sortUI),n=t.concat(i,r)}return n}render({scene:t,camera:e,target:i=null,update:s=!0,sort:r=!0,frustumCull:n=!0,clear:a}){null===i?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(i),this.setViewport(i.width,i.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||i&&!i.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),(this.stencil||!i||i.stencil)&&(this.enable(this.gl.STENCIL_TEST),this.setStencilMask(255)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Texture:()=>a});const s=new Uint8Array(4);function r(t){return!(t&t-1)}let n=1;class a{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:a=r,wrapS:o=t.CLAMP_TO_EDGE,wrapT:h=t.CLAMP_TO_EDGE,wrapR:l=t.CLAMP_TO_EDGE,generateMipmaps:u=i===(t.TEXTURE_2D||t.TEXTURE_CUBE_MAP),minFilter:c=(u?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:p=!1,unpackAlignment:m=4,flipY:f=i==(t.TEXTURE_2D||t.TEXTURE_3D),anisotropy:g=0,level:_=0,width:v,height:x=v,length:w=1}={}){this.gl=t,this.id=n++,this.image=e,this.target=i,this.type=s,this.format=r,this.internalFormat=a,this.minFilter=c,this.magFilter=d,this.wrapS=o,this.wrapT=h,this.wrapR=l,this.generateMipmaps=u,this.premultiplyAlpha=p,this.unpackAlignment=m,this.flipY=f,this.anisotropy=Math.min(g,this.gl.renderer.parameters.maxAnisotropy),this.level=_,this.width=v,this.height=x,this.length=w,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.wrapR!==this.state.wrapR&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_R,this.wrapR),this.state.wrapR=this.wrapR),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image):this.target!==this.gl.TEXTURE_2D_ARRAY&&this.target!==this.gl.TEXTURE_3D||this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||r(this.image.width)&&r(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Transform:()=>o});var s=i("./node_modules/ogl/src/math/Vec3.js"),r=i("./node_modules/ogl/src/math/Quat.js"),n=i("./node_modules/ogl/src/math/Mat4.js"),a=i("./node_modules/ogl/src/math/Euler.js");class o{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new s.Vec3,this.quaternion=new r.Quat,this.scale=new s.Vec3(1),this.rotation=new a.Euler,this.up=new s.Vec3(0,1,0),this.rotation._target.onChange=()=>this.quaternion.fromEuler(this.rotation,!0),this.quaternion._target.onChange=()=>this.rotation.fromQuaternion(this.quaternion,void 0,!0)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,i=this.children.length;e<i;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,i=this.children.length;e<i;e++)this.children[e].traverse(t)}decompose(){this.matrix.decompose(this.quaternion._target,this.position,this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion._target),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Plane:()=>r});var s=i("./node_modules/ogl/src/core/Geometry.js");class r extends s.Geometry{constructor(t,{width:e=1,height:i=1,widthSegments:s=1,heightSegments:n=1,attributes:a={}}={}){const o=s,h=n,l=(o+1)*(h+1),u=o*h*6,c=new Float32Array(3*l),d=new Float32Array(3*l),p=new Float32Array(2*l),m=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(c,d,p,m,e,i,0,o,h),Object.assign(a,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:m}}),super(t,a)}static buildPlane(t,e,i,s,r,n,a,o,h,l=0,u=1,c=2,d=1,p=-1,m=0,f=0){const g=m,_=r/o,v=n/h;for(let x=0;x<=h;x++){let w=x*v-n/2;for(let n=0;n<=o;n++,m++){let v=n*_-r/2;if(t[3*m+l]=v*d,t[3*m+u]=w*p,t[3*m+c]=a/2,e[3*m+l]=0,e[3*m+u]=0,e[3*m+c]=a>=0?1:-1,i[2*m]=n/o,i[2*m+1]=1-x/h,x===h||n===o)continue;let y=g+n+x*(o+1),b=g+n+(x+1)*(o+1),T=g+n+(x+1)*(o+1)+1,M=g+n+x*(o+1)+1;s[6*f]=y,s[6*f+1]=b,s[6*f+2]=M,s[6*f+3]=b,s[6*f+4]=T,s[6*f+5]=M,f++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Euler:()=>n});var s=i("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(i("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,i=t,s="YXZ"){super(t,e,i),this.order=s,this.onChange=()=>{},this._target=this;const r=["0","1","2"];return new Proxy(this,{set(t,e){const i=Reflect.set(...arguments);return i&&r.includes(e)&&t.onChange(),i}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this._target[0]=t,this.onChange()}set y(t){this._target[1]=t,this.onChange()}set z(t){this._target[2]=t,this.onChange()}set(t,e=t,i=t){return t.length?this.copy(t):(this._target[0]=t,this._target[1]=e,this._target[2]=i,this.onChange(),this)}copy(t){return this._target[0]=t[0],this._target[1]=t[1],this._target[2]=t[2],this.onChange(),this}reorder(t){return this._target.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return s.fromRotationMatrix(this._target,t,e),this.onChange(),this}fromQuaternion(t,e=this.order,i){return r.fromQuaternion(t),this._target.fromRotationMatrix(r,e),i||this.onChange(),this}fromArray(t,e=0){return this._target[0]=t[e],this._target[1]=t[e+1],this._target[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Mat3:()=>r});var s=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,i=0,s=0,r=1,n=0,a=0,o=0,h=1){return super(t,e,i,s,r,n,a,o,h),this}set(t,e,i,r,n,a,o,h,l){return t.length?this.copy(t):(s.set(this,t,e,i,r,n,a,o,h,l),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Mat4:()=>r});var s=i("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,i=0,s=0,r=0,n=1,a=0,o=0,h=0,l=0,u=1,c=0,d=0,p=0,m=0,f=1){return super(t,e,i,s,r,n,a,o,h,l,u,c,d,p,m,f),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,i,r,n,a,o,h,l,u,c,d,p,m,f,g){return t.length?this.copy(t):(s.set(this,t,e,i,r,n,a,o,h,l,u,c,d,p,m,f,g),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e,i=this){return s.rotate(this,i,t,e),this}scale(t,e=this){return s.scale(this,e,"number"==typeof t?[t,t,t]:t),this}add(t,e){return e?s.add(this,t,e):s.add(this,this,t),this}sub(t,e){return e?s.subtract(this,t,e):s.subtract(this,this,t),this}multiply(t,e){return t.length?e?s.multiply(this,t,e):s.multiply(this,this,t):s.multiplyScalar(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:i,far:r}={}){return s.perspective(this,t,e,i,r),this}fromOrthogonal({left:t,right:e,bottom:i,top:r,near:n,far:a}){return s.ortho(this,t,e,i,r,n,a),this}fromQuaternion(t){return s.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return s.invert(this,t),this}compose(t,e,i){return s.compose(this,t,e,i),this}decompose(t,e,i){return s.decompose(this,t,e,i),this}getRotation(t){return s.getRotation(t,this),this}getTranslation(t){return s.getTranslation(t,this),this}getScaling(t){return s.getScaling(t,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(t,e,i){return s.targetTo(this,t,e,i),this}determinant(){return s.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Quat:()=>r});var s=i("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,i=0,s=1){super(t,e,i,s),this.onChange=()=>{},this._target=this;const r=["0","1","2","3"];return new Proxy(this,{set(t,e){const i=Reflect.set(...arguments);return i&&r.includes(e)&&t.onChange(),i}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this._target[0]=t,this.onChange()}set y(t){this._target[1]=t,this.onChange()}set z(t){this._target[2]=t,this.onChange()}set w(t){this._target[3]=t,this.onChange()}identity(){return s.identity(this._target),this.onChange(),this}set(t,e,i,r){return t.length?this.copy(t):(s.set(this._target,t,e,i,r),this.onChange(),this)}rotateX(t){return s.rotateX(this._target,this._target,t),this.onChange(),this}rotateY(t){return s.rotateY(this._target,this._target,t),this.onChange(),this}rotateZ(t){return s.rotateZ(this._target,this._target,t),this.onChange(),this}inverse(t=this._target){return s.invert(this._target,t),this.onChange(),this}conjugate(t=this._target){return s.conjugate(this._target,t),this.onChange(),this}copy(t){return s.copy(this._target,t),this.onChange(),this}normalize(t=this._target){return s.normalize(this._target,t),this.onChange(),this}multiply(t,e){return e?s.multiply(this._target,t,e):s.multiply(this._target,this._target,t),this.onChange(),this}dot(t){return s.dot(this._target,t)}fromMatrix3(t){return s.fromMat3(this._target,t),this.onChange(),this}fromEuler(t,e){return s.fromEuler(this._target,t,t.order),e||this.onChange(),this}fromAxisAngle(t,e){return s.setAxisAngle(this._target,t,e),this.onChange(),this}slerp(t,e){return s.slerp(this._target,this._target,t,e),this.onChange(),this}fromArray(t,e=0){return this._target[0]=t[e],this._target[1]=t[e+1],this._target[2]=t[e+2],this._target[3]=t[e+3],this.onChange(),this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Vec3:()=>r});var s=i("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,i=t){return super(t,e,i),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,i=t){return t.length?this.copy(t):(s.set(this,t,e,i),this)}copy(t){return s.copy(this,t),this}add(t,e){return e?s.add(this,t,e):s.add(this,this,t),this}sub(t,e){return e?s.subtract(this,t,e):s.subtract(this,this,t),this}multiply(t){return t.length?s.multiply(this,this,t):s.scale(this,this,t),this}divide(t){return t.length?s.divide(this,this,t):s.scale(this,this,1/t),this}inverse(t=this){return s.inverse(this,t),this}len(){return s.length(this)}distance(t){return t?s.distance(this,t):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(t){return t?s.squaredDistance(this,t):s.squaredLength(this)}negate(t=this){return s.negate(this,t),this}cross(t,e){return e?s.cross(this,t,e):s.cross(this,this,t),this}scale(t){return s.scale(this,this,t),this}normalize(){return s.normalize(this,this),this}dot(t){return s.dot(this,t)}equals(t){return s.exactEquals(this,t)}applyMatrix3(t){return s.transformMat3(this,this,t),this}applyMatrix4(t){return s.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return s.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return s.transformQuat(this,this,t),this}angle(t){return s.angle(this,t)}lerp(t,e){return s.lerp(this,this,t,e),this}smoothLerp(t,e,i){return s.smoothLerp(this,this,t,e,i),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],i=this[1],s=this[2];return this[0]=t[0]*e+t[4]*i+t[8]*s,this[1]=t[1]*e+t[5]*i+t[9]*s,this[2]=t[2]*e+t[6]*i+t[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,i)=>{"use strict";function s(t,e,i="YXZ"){return"XYZ"===i?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===i?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===i?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===i?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===i?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===i&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}i.r(e),i.d(e,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{add:()=>_,copy:()=>n,determinant:()=>u,fromMat4:()=>s,fromQuat:()=>r,identity:()=>o,invert:()=>l,multiply:()=>c,multiplyScalar:()=>x,normalFromMat4:()=>f,projection:()=>g,rotate:()=>p,scale:()=>m,set:()=>a,subtract:()=>v,translate:()=>d,transpose:()=>h});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=i+i,o=s+s,h=r+r,l=i*a,u=s*a,c=s*o,d=r*a,p=r*o,m=r*h,f=n*a,g=n*o,_=n*h;return t[0]=1-c-m,t[3]=u-_,t[6]=d+g,t[1]=u+_,t[4]=1-l-m,t[7]=p-f,t[2]=d-g,t[5]=p+f,t[8]=1-l-c,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,i,s,r,n,a,o,h,l){return t[0]=e,t[1]=i,t[2]=s,t[3]=r,t[4]=n,t[5]=a,t[6]=o,t[7]=h,t[8]=l,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function h(t,e){if(t===e){let i=e[1],s=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=s,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],c=u*a-o*l,d=-u*n+o*h,p=l*n-a*h,m=i*c+s*d+r*p;return m?(m=1/m,t[0]=c*m,t[1]=(-u*s+r*l)*m,t[2]=(o*s-r*a)*m,t[3]=d*m,t[4]=(u*i-r*h)*m,t[5]=(-o*i+r*n)*m,t[6]=p*m,t[7]=(-l*i+s*h)*m,t[8]=(a*i-s*n)*m,t):null}function u(t){let e=t[0],i=t[1],s=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return e*(l*n-a*h)+i*(-l*r+a*o)+s*(h*r-n*o)}function c(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=i[0],p=i[1],m=i[2],f=i[3],g=i[4],_=i[5],v=i[6],x=i[7],w=i[8];return t[0]=d*s+p*a+m*l,t[1]=d*r+p*o+m*u,t[2]=d*n+p*h+m*c,t[3]=f*s+g*a+_*l,t[4]=f*r+g*o+_*u,t[5]=f*n+g*h+_*c,t[6]=v*s+x*a+w*l,t[7]=v*r+x*o+w*u,t[8]=v*n+x*h+w*c,t}function d(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=i[0],p=i[1];return t[0]=s,t[1]=r,t[2]=n,t[3]=a,t[4]=o,t[5]=h,t[6]=d*s+p*a+l,t[7]=d*r+p*o+u,t[8]=d*n+p*h+c,t}function p(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=Math.sin(i),p=Math.cos(i);return t[0]=p*s+d*a,t[1]=p*r+d*o,t[2]=p*n+d*h,t[3]=p*a-d*s,t[4]=p*o-d*r,t[5]=p*h-d*n,t[6]=l,t[7]=u,t[8]=c,t}function m(t,e,i){let s=i[0],r=i[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function f(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],c=e[9],d=e[10],p=e[11],m=e[12],f=e[13],g=e[14],_=e[15],v=i*o-s*a,x=i*h-r*a,w=i*l-n*a,y=s*h-r*o,b=s*l-n*o,T=r*l-n*h,M=u*f-c*m,E=u*g-d*m,O=u*_-p*m,A=c*g-d*f,C=c*_-p*f,S=d*_-p*g,P=v*S-x*C+w*A+y*O-b*E+T*M;return P?(P=1/P,t[0]=(o*S-h*C+l*A)*P,t[1]=(h*O-a*S-l*E)*P,t[2]=(a*C-o*O+l*M)*P,t[3]=(r*C-s*S-n*A)*P,t[4]=(i*S-r*O+n*E)*P,t[5]=(s*O-i*C-n*M)*P,t[6]=(f*T-g*b+_*y)*P,t[7]=(g*w-m*T-_*x)*P,t[8]=(m*b-f*w+_*v)*P,t):null}function g(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function _(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function v(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function x(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{add:()=>O,compose:()=>w,copy:()=>n,decompose:()=>x,determinant:()=>u,fromQuat:()=>b,fromRotationTranslationScale:()=>y,getMaxScaleOnAxis:()=>_,getRotation:()=>v,getScaling:()=>g,getTranslation:()=>f,identity:()=>o,invert:()=>l,multiply:()=>c,multiplyScalar:()=>C,ortho:()=>M,perspective:()=>T,rotate:()=>m,scale:()=>p,set:()=>a,subtract:()=>A,targetTo:()=>E,translate:()=>d,transpose:()=>h});var s=i("./node_modules/ogl/src/math/functions/Vec3Func.js");const r=1e-6;function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function a(t,e,i,s,r,n,a,o,h,l,u,c,d,p,m,f,g){return t[0]=e,t[1]=i,t[2]=s,t[3]=r,t[4]=n,t[5]=a,t[6]=o,t[7]=h,t[8]=l,t[9]=u,t[10]=c,t[11]=d,t[12]=p,t[13]=m,t[14]=f,t[15]=g,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function h(t,e){if(t===e){let i=e[1],s=e[2],r=e[3],n=e[6],a=e[7],o=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=i,t[6]=e[9],t[7]=e[13],t[8]=s,t[9]=n,t[11]=e[14],t[12]=r,t[13]=a,t[14]=o}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function l(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],c=e[9],d=e[10],p=e[11],m=e[12],f=e[13],g=e[14],_=e[15],v=i*o-s*a,x=i*h-r*a,w=i*l-n*a,y=s*h-r*o,b=s*l-n*o,T=r*l-n*h,M=u*f-c*m,E=u*g-d*m,O=u*_-p*m,A=c*g-d*f,C=c*_-p*f,S=d*_-p*g,P=v*S-x*C+w*A+y*O-b*E+T*M;return P?(P=1/P,t[0]=(o*S-h*C+l*A)*P,t[1]=(r*C-s*S-n*A)*P,t[2]=(f*T-g*b+_*y)*P,t[3]=(d*b-c*T-p*y)*P,t[4]=(h*O-a*S-l*E)*P,t[5]=(i*S-r*O+n*E)*P,t[6]=(g*w-m*T-_*x)*P,t[7]=(u*T-d*w+p*x)*P,t[8]=(a*C-o*O+l*M)*P,t[9]=(s*O-i*C-n*M)*P,t[10]=(m*b-f*w+_*v)*P,t[11]=(c*w-u*b-p*v)*P,t[12]=(o*E-a*A-h*M)*P,t[13]=(i*A-s*E+r*M)*P,t[14]=(f*x-m*y-g*v)*P,t[15]=(u*y-c*x+d*v)*P,t):null}function u(t){let e=t[0],i=t[1],s=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8],u=t[9],c=t[10],d=t[11],p=t[12],m=t[13],f=t[14],g=t[15];return(e*a-i*n)*(c*g-d*f)-(e*o-s*n)*(u*g-d*m)+(e*h-r*n)*(u*f-c*m)+(i*o-s*a)*(l*g-d*p)-(i*h-r*a)*(l*f-c*p)+(s*h-r*o)*(l*m-u*p)}function c(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=e[9],p=e[10],m=e[11],f=e[12],g=e[13],_=e[14],v=e[15],x=i[0],w=i[1],y=i[2],b=i[3];return t[0]=x*s+w*o+y*c+b*f,t[1]=x*r+w*h+y*d+b*g,t[2]=x*n+w*l+y*p+b*_,t[3]=x*a+w*u+y*m+b*v,x=i[4],w=i[5],y=i[6],b=i[7],t[4]=x*s+w*o+y*c+b*f,t[5]=x*r+w*h+y*d+b*g,t[6]=x*n+w*l+y*p+b*_,t[7]=x*a+w*u+y*m+b*v,x=i[8],w=i[9],y=i[10],b=i[11],t[8]=x*s+w*o+y*c+b*f,t[9]=x*r+w*h+y*d+b*g,t[10]=x*n+w*l+y*p+b*_,t[11]=x*a+w*u+y*m+b*v,x=i[12],w=i[13],y=i[14],b=i[15],t[12]=x*s+w*o+y*c+b*f,t[13]=x*r+w*h+y*d+b*g,t[14]=x*n+w*l+y*p+b*_,t[15]=x*a+w*u+y*m+b*v,t}function d(t,e,i){let s,r,n,a,o,h,l,u,c,d,p,m,f=i[0],g=i[1],_=i[2];return e===t?(t[12]=e[0]*f+e[4]*g+e[8]*_+e[12],t[13]=e[1]*f+e[5]*g+e[9]*_+e[13],t[14]=e[2]*f+e[6]*g+e[10]*_+e[14],t[15]=e[3]*f+e[7]*g+e[11]*_+e[15]):(s=e[0],r=e[1],n=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],c=e[8],d=e[9],p=e[10],m=e[11],t[0]=s,t[1]=r,t[2]=n,t[3]=a,t[4]=o,t[5]=h,t[6]=l,t[7]=u,t[8]=c,t[9]=d,t[10]=p,t[11]=m,t[12]=s*f+o*g+c*_+e[12],t[13]=r*f+h*g+d*_+e[13],t[14]=n*f+l*g+p*_+e[14],t[15]=a*f+u*g+m*_+e[15]),t}function p(t,e,i){let s=i[0],r=i[1],n=i[2];return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function m(t,e,i,s){let n,a,o,h,l,u,c,d,p,m,f,g,_,v,x,w,y,b,T,M,E,O,A,C,S=s[0],P=s[1],z=s[2],D=Math.hypot(S,P,z);return Math.abs(D)<r?null:(D=1/D,S*=D,P*=D,z*=D,n=Math.sin(i),a=Math.cos(i),o=1-a,h=e[0],l=e[1],u=e[2],c=e[3],d=e[4],p=e[5],m=e[6],f=e[7],g=e[8],_=e[9],v=e[10],x=e[11],w=S*S*o+a,y=P*S*o+z*n,b=z*S*o-P*n,T=S*P*o-z*n,M=P*P*o+a,E=z*P*o+S*n,O=S*z*o+P*n,A=P*z*o-S*n,C=z*z*o+a,t[0]=h*w+d*y+g*b,t[1]=l*w+p*y+_*b,t[2]=u*w+m*y+v*b,t[3]=c*w+f*y+x*b,t[4]=h*T+d*M+g*E,t[5]=l*T+p*M+_*E,t[6]=u*T+m*M+v*E,t[7]=c*T+f*M+x*E,t[8]=h*O+d*A+g*C,t[9]=l*O+p*A+_*C,t[10]=u*O+m*A+v*C,t[11]=c*O+f*A+x*C,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function f(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function g(t,e){let i=e[0],s=e[1],r=e[2],n=e[4],a=e[5],o=e[6],h=e[8],l=e[9],u=e[10];return t[0]=Math.hypot(i,s,r),t[1]=Math.hypot(n,a,o),t[2]=Math.hypot(h,l,u),t}function _(t){let e=t[0],i=t[1],s=t[2],r=t[4],n=t[5],a=t[6],o=t[8],h=t[9],l=t[10];const u=e*e+i*i+s*s,c=r*r+n*n+a*a,d=o*o+h*h+l*l;return Math.sqrt(Math.max(u,c,d))}const v=function(){const t=[1,1,1];return function(e,i){let s=t;g(s,i);let r=1/s[0],n=1/s[1],a=1/s[2],o=i[0]*r,h=i[1]*n,l=i[2]*a,u=i[4]*r,c=i[5]*n,d=i[6]*a,p=i[8]*r,m=i[9]*n,f=i[10]*a,_=o+c+f,v=0;return _>0?(v=2*Math.sqrt(_+1),e[3]=.25*v,e[0]=(d-m)/v,e[1]=(p-l)/v,e[2]=(h-u)/v):o>c&&o>f?(v=2*Math.sqrt(1+o-c-f),e[3]=(d-m)/v,e[0]=.25*v,e[1]=(h+u)/v,e[2]=(p+l)/v):c>f?(v=2*Math.sqrt(1+c-o-f),e[3]=(p-l)/v,e[0]=(h+u)/v,e[1]=.25*v,e[2]=(d+m)/v):(v=2*Math.sqrt(1+f-o-c),e[3]=(h-u)/v,e[0]=(p+l)/v,e[1]=(d+m)/v,e[2]=.25*v),e}}();function x(t,e,i,r){let n=s.length([t[0],t[1],t[2]]);const a=s.length([t[4],t[5],t[6]]),o=s.length([t[8],t[9],t[10]]);u(t)<0&&(n=-n),i[0]=t[12],i[1]=t[13],i[2]=t[14];const h=t.slice(),l=1/n,c=1/a,d=1/o;h[0]*=l,h[1]*=l,h[2]*=l,h[4]*=c,h[5]*=c,h[6]*=c,h[8]*=d,h[9]*=d,h[10]*=d,v(e,h),r[0]=n,r[1]=a,r[2]=o}function w(t,e,i,s){const r=t,n=e[0],a=e[1],o=e[2],h=e[3],l=n+n,u=a+a,c=o+o,d=n*l,p=n*u,m=n*c,f=a*u,g=a*c,_=o*c,v=h*l,x=h*u,w=h*c,y=s[0],b=s[1],T=s[2];return r[0]=(1-(f+_))*y,r[1]=(p+w)*y,r[2]=(m-x)*y,r[3]=0,r[4]=(p-w)*b,r[5]=(1-(d+_))*b,r[6]=(g+v)*b,r[7]=0,r[8]=(m+x)*T,r[9]=(g-v)*T,r[10]=(1-(d+f))*T,r[11]=0,r[12]=i[0],r[13]=i[1],r[14]=i[2],r[15]=1,r}function y(t,e,i,s){let r=e[0],n=e[1],a=e[2],o=e[3],h=r+r,l=n+n,u=a+a,c=r*h,d=r*l,p=r*u,m=n*l,f=n*u,g=a*u,_=o*h,v=o*l,x=o*u,w=s[0],y=s[1],b=s[2];return t[0]=(1-(m+g))*w,t[1]=(d+x)*w,t[2]=(p-v)*w,t[3]=0,t[4]=(d-x)*y,t[5]=(1-(c+g))*y,t[6]=(f+_)*y,t[7]=0,t[8]=(p+v)*b,t[9]=(f-_)*b,t[10]=(1-(c+m))*b,t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function b(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=i+i,o=s+s,h=r+r,l=i*a,u=s*a,c=s*o,d=r*a,p=r*o,m=r*h,f=n*a,g=n*o,_=n*h;return t[0]=1-c-m,t[1]=u+_,t[2]=d-g,t[3]=0,t[4]=u-_,t[5]=1-l-m,t[6]=p+f,t[7]=0,t[8]=d+g,t[9]=p-f,t[10]=1-l-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function T(t,e,i,s,r){let n=1/Math.tan(e/2),a=1/(s-r);return t[0]=n/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+s)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*s*a,t[15]=0,t}function M(t,e,i,s,r,n,a){let o=1/(e-i),h=1/(s-r),l=1/(n-a);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+i)*o,t[13]=(r+s)*h,t[14]=(a+n)*l,t[15]=1,t}function E(t,e,i,s){let r=e[0],n=e[1],a=e[2],o=s[0],h=s[1],l=s[2],u=r-i[0],c=n-i[1],d=a-i[2],p=u*u+c*c+d*d;0===p?d=1:(p=1/Math.sqrt(p),u*=p,c*=p,d*=p);let m=h*d-l*c,f=l*u-o*d,g=o*c-h*u;return p=m*m+f*f+g*g,0===p&&(l?o+=1e-6:h?l+=1e-6:h+=1e-6,m=h*d-l*c,f=l*u-o*d,g=o*c-h*u,p=m*m+f*f+g*g),p=1/Math.sqrt(p),m*=p,f*=p,g*=p,t[0]=m,t[1]=f,t[2]=g,t[3]=0,t[4]=c*g-d*f,t[5]=d*m-u*g,t[6]=u*f-c*m,t[7]=0,t[8]=u,t[9]=c,t[10]=d,t[11]=0,t[12]=r,t[13]=n,t[14]=a,t[15]=1,t}function O(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t[9]=e[9]+i[9],t[10]=e[10]+i[10],t[11]=e[11]+i[11],t[12]=e[12]+i[12],t[13]=e[13]+i[13],t[14]=e[14]+i[14],t[15]=e[15]+i[15],t}function A(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t[9]=e[9]-i[9],t[10]=e[10]-i[10],t[11]=e[11]-i[11],t[12]=e[12]-i[12],t[13]=e[13]-i[13],t[14]=e[14]-i[14],t[15]=e[15]-i[15],t}function C(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12]*i,t[13]=e[13]*i,t[14]=e[14]*i,t[15]=e[15]*i,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{add:()=>_,conjugate:()=>d,copy:()=>f,dot:()=>x,fromEuler:()=>m,fromMat3:()=>p,identity:()=>r,invert:()=>c,length:()=>y,lerp:()=>w,multiply:()=>a,normalize:()=>b,rotateX:()=>o,rotateY:()=>h,rotateZ:()=>l,scale:()=>v,set:()=>g,setAxisAngle:()=>n,slerp:()=>u});var s=i("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,i){i*=.5;let s=Math.sin(i);return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=Math.cos(i),t}function a(t,e,i){let s=e[0],r=e[1],n=e[2],a=e[3],o=i[0],h=i[1],l=i[2],u=i[3];return t[0]=s*u+a*o+r*l-n*h,t[1]=r*u+a*h+n*o-s*l,t[2]=n*u+a*l+s*h-r*o,t[3]=a*u-s*o-r*h-n*l,t}function o(t,e,i){i*=.5;let s=e[0],r=e[1],n=e[2],a=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=s*h+a*o,t[1]=r*h+n*o,t[2]=n*h-r*o,t[3]=a*h-s*o,t}function h(t,e,i){i*=.5;let s=e[0],r=e[1],n=e[2],a=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=s*h-n*o,t[1]=r*h+a*o,t[2]=n*h+s*o,t[3]=a*h-r*o,t}function l(t,e,i){i*=.5;let s=e[0],r=e[1],n=e[2],a=e[3],o=Math.sin(i),h=Math.cos(i);return t[0]=s*h+r*o,t[1]=r*h-s*o,t[2]=n*h+a*o,t[3]=a*h-n*o,t}function u(t,e,i,s){let r,n,a,o,h,l=e[0],u=e[1],c=e[2],d=e[3],p=i[0],m=i[1],f=i[2],g=i[3];return n=l*p+u*m+c*f+d*g,n<0&&(n=-n,p=-p,m=-m,f=-f,g=-g),1-n>1e-6?(r=Math.acos(n),a=Math.sin(r),o=Math.sin((1-s)*r)/a,h=Math.sin(s*r)/a):(o=1-s,h=s),t[0]=o*l+h*p,t[1]=o*u+h*m,t[2]=o*c+h*f,t[3]=o*d+h*g,t}function c(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=i*i+s*s+r*r+n*n,o=a?1/a:0;return t[0]=-i*o,t[1]=-s*o,t[2]=-r*o,t[3]=n*o,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function p(t,e){let i,s=e[0]+e[4]+e[8];if(s>0)i=Math.sqrt(s+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{let s=0;e[4]>e[0]&&(s=1),e[8]>e[3*s+s]&&(s=2);let r=(s+1)%3,n=(s+2)%3;i=Math.sqrt(e[3*s+s]-e[3*r+r]-e[3*n+n]+1),t[s]=.5*i,i=.5/i,t[3]=(e[3*r+n]-e[3*n+r])*i,t[r]=(e[3*r+s]+e[3*s+r])*i,t[n]=(e[3*n+s]+e[3*s+n])*i}return t}function m(t,e,i="YXZ"){let s=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),o=Math.sin(.5*e[2]),h=Math.cos(.5*e[2]);return"XYZ"===i?(t[0]=s*a*h+r*n*o,t[1]=r*n*h-s*a*o,t[2]=r*a*o+s*n*h,t[3]=r*a*h-s*n*o):"YXZ"===i?(t[0]=s*a*h+r*n*o,t[1]=r*n*h-s*a*o,t[2]=r*a*o-s*n*h,t[3]=r*a*h+s*n*o):"ZXY"===i?(t[0]=s*a*h-r*n*o,t[1]=r*n*h+s*a*o,t[2]=r*a*o+s*n*h,t[3]=r*a*h-s*n*o):"ZYX"===i?(t[0]=s*a*h-r*n*o,t[1]=r*n*h+s*a*o,t[2]=r*a*o-s*n*h,t[3]=r*a*h+s*n*o):"YZX"===i?(t[0]=s*a*h+r*n*o,t[1]=r*n*h+s*a*o,t[2]=r*a*o-s*n*h,t[3]=r*a*h-s*n*o):"XZY"===i&&(t[0]=s*a*h-r*n*o,t[1]=r*n*h-s*a*o,t[2]=r*a*o+s*n*h,t[3]=r*a*h+s*n*o),t}const f=s.copy,g=s.set,_=s.add,v=s.scale,x=s.dot,w=s.lerp,y=s.length,b=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{add:()=>a,angle:()=>E,copy:()=>r,cross:()=>v,distance:()=>c,divide:()=>l,dot:()=>_,exactEquals:()=>O,inverse:()=>f,length:()=>s,lerp:()=>x,multiply:()=>h,negate:()=>m,normalize:()=>g,scale:()=>u,scaleRotateMat4:()=>b,set:()=>n,smoothLerp:()=>w,squaredDistance:()=>d,squaredLength:()=>p,subtract:()=>o,transformMat3:()=>T,transformMat4:()=>y,transformQuat:()=>M});function s(t){let e=t[0],i=t[1],s=t[2];return Math.sqrt(e*e+i*i+s*s)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,i,s){return t[0]=e,t[1]=i,t[2]=s,t}function a(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function o(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function h(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t[2]=e[2]*i[2],t}function l(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t[2]=e[2]/i[2],t}function u(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function c(t,e){let i=e[0]-t[0],s=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(i*i+s*s+r*r)}function d(t,e){let i=e[0]-t[0],s=e[1]-t[1],r=e[2]-t[2];return i*i+s*s+r*r}function p(t){let e=t[0],i=t[1],s=t[2];return e*e+i*i+s*s}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function f(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function g(t,e){let i=e[0],s=e[1],r=e[2],n=i*i+s*s+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function _(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function v(t,e,i){let s=e[0],r=e[1],n=e[2],a=i[0],o=i[1],h=i[2];return t[0]=r*h-n*o,t[1]=n*a-s*h,t[2]=s*o-r*a,t}function x(t,e,i,s){let r=e[0],n=e[1],a=e[2];return t[0]=r+s*(i[0]-r),t[1]=n+s*(i[1]-n),t[2]=a+s*(i[2]-a),t}function w(t,e,i,s,r){const n=Math.exp(-s*r);let a=e[0],o=e[1],h=e[2];return t[0]=i[0]+(a-i[0])*n,t[1]=i[1]+(o-i[1])*n,t[2]=i[2]+(h-i[2])*n,t}function y(t,e,i){let s=e[0],r=e[1],n=e[2],a=i[3]*s+i[7]*r+i[11]*n+i[15];return a=a||1,t[0]=(i[0]*s+i[4]*r+i[8]*n+i[12])/a,t[1]=(i[1]*s+i[5]*r+i[9]*n+i[13])/a,t[2]=(i[2]*s+i[6]*r+i[10]*n+i[14])/a,t}function b(t,e,i){let s=e[0],r=e[1],n=e[2],a=i[3]*s+i[7]*r+i[11]*n+i[15];return a=a||1,t[0]=(i[0]*s+i[4]*r+i[8]*n)/a,t[1]=(i[1]*s+i[5]*r+i[9]*n)/a,t[2]=(i[2]*s+i[6]*r+i[10]*n)/a,t}function T(t,e,i){let s=e[0],r=e[1],n=e[2];return t[0]=s*i[0]+r*i[3]+n*i[6],t[1]=s*i[1]+r*i[4]+n*i[7],t[2]=s*i[2]+r*i[5]+n*i[8],t}function M(t,e,i){let s=e[0],r=e[1],n=e[2],a=i[0],o=i[1],h=i[2],l=o*n-h*r,u=h*s-a*n,c=a*r-o*s,d=o*c-h*u,p=h*l-a*c,m=a*u-o*l,f=2*i[3];return l*=f,u*=f,c*=f,d*=2,p*=2,m*=2,t[0]=s+l+d,t[1]=r+u+p,t[2]=n+c+m,t}const E=function(){const t=[0,0,0],e=[0,0,0];return function(i,s){r(t,i),r(e,s),g(t,t),g(e,e);let n=_(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function O(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{add:()=>n,copy:()=>s,dot:()=>l,length:()=>o,lerp:()=>u,normalize:()=>h,scale:()=>a,set:()=>r});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,i,s,r){return t[0]=e,t[1]=i,t[2]=s,t[3]=r,t}function n(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t}function a(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t}function o(t){let e=t[0],i=t[1],s=t[2],r=t[3];return Math.sqrt(e*e+i*i+s*s+r*r)}function h(t,e){let i=e[0],s=e[1],r=e[2],n=e[3],a=i*i+s*s+r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=i*a,t[1]=s*a,t[2]=r*a,t[3]=n*a,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,i,s){let r=e[0],n=e[1],a=e[2],o=e[3];return t[0]=r+s*(i[0]-r),t[1]=n+s*(i[1]-n),t[2]=a+s*(i[2]-a),t[3]=o+s*(i[3]-o),t}},"./node_modules/prefix/index.js":t=>{var e="undefined"!=typeof document?document.createElement("p").style:{},i=["O","ms","Moz","Webkit"],s=/([A-Z])/g,r={};function n(t){if(t=t.replace(/-([a-z])/g,(function(t,e){return e.toUpperCase()})),void 0!==e[t])return t;for(var s=t.charAt(0).toUpperCase()+t.slice(1),r=i.length;r--;){var n=i[r]+s;if(void 0!==e[n])return n}return t}t.exports=function(t){return t in r?r[t]:r[t]=n(t)},t.exports.dash=function(t){return t=n(t),s.test(t)&&(t="-"+t.replace(s,"-$1"),s.lastIndex=0),t.toLowerCase()}}},(function(t){t.h=()=>"ff79e7ba9a1d3d00ce1a"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,