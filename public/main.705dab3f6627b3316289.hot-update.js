/*! For license information please see main.705dab3f6627b3316289.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s("./node_modules/ogl/src/core/Texture.js"),a=s("./node_modules/gsap/index.js"),i=s("./app/classes/Component.js"),o=s("./app/utils/text.js");class r extends i.default{constructor({canvas:e}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=e,window.TEXTURES={},(0,o.split)({element:this.elements.title,expression:"<br>"}),(0,o.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((e=>{const t=new n.Texture(this.canvas.gl,{generateMipmaps:!1}),s=new window.Image;s.crossOrigin="anonymous",s.src=e,s.onload=e=>{t.image=s,this.onAssetLoaded()},window.TEXTURES[e]=t}))}onAssetLoaded(e){this.length+=1;const t=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*t)}%`,1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.emit("completed"),this.animateOut=a.default.timeline({delay:1}),this.animateOut.to(this.elements.titleSpans,{duration:1,ease:"expo.Out",stagger:.3,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:.5,ease:"expo.Out",stagger:.3,y:"100%"},"-=0.3"),this.animateOut.to(this.element,{autoAlpha:0,duration:1}),this.animateOut.call((t=>{this.destroy(),e()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}}},(function(e){e.h=()=>"4ce79122d40b6627742b"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi43MDVkYWIzZjY2MjdiMzMxNjI4OS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7NFFBS2UsTUFBTUEsVUFBa0JDLEVBQUFBLFFBQ3JDQyxXQUFBQSxFQUFZLE9BQUVDLElBQ1pDLE1BQU0sQ0FDSkMsUUFBUyxhQUNUQyxTQUFVLENBQ1JDLE1BQU8sbUJBQ1BDLE9BQVEscUJBQ1JDLFdBQVksOEJBSWhCQyxLQUFLUCxPQUFTQSxFQUVkUSxPQUFPQyxTQUFXLENBQUMsR0FFbkJDLEVBQUFBLEVBQUFBLE9BQU0sQ0FDSlIsUUFBU0ssS0FBS0osU0FBU0MsTUFDdkJPLFdBQVksVUFHZEQsRUFBQUEsRUFBQUEsT0FBTSxDQUNKUixRQUFTSyxLQUFLSixTQUFTQyxNQUN2Qk8sV0FBWSxTQUlkSixLQUFLSixTQUFTUyxXQUFhTCxLQUFLSixTQUFTQyxNQUFNUyxpQkFBaUIsYUFFaEVOLEtBQUtPLE9BQVMsRUFHZFAsS0FBS1EsY0FFUCxDQUVBQSxZQUFBQSxHQUNFUCxPQUFPUSxPQUFPQyxTQUFRQyxJQUNwQixNQUFNQyxFQUFVLElBQUlDLEVBQUFBLFFBQVFiLEtBQUtQLE9BQU9xQixHQUFHLENBQ3pDQyxpQkFBaUIsSUFHYkMsRUFBUSxJQUFJZixPQUFPZ0IsTUFFekJELEVBQU1FLFlBQWMsWUFDcEJGLEVBQU1HLElBQU1SLEVBQ1pLLEVBQU1JLE9BQVNDLElBQ2JULEVBQVFELE1BQVFLLEVBRWhCaEIsS0FBS3NCLGVBQWUsRUFHdEJyQixPQUFPQyxTQUFTUyxHQUFTQyxDQUFPLEdBRXBDLENBRUFVLGFBQUFBLENBQWNYLEdBQ1pYLEtBQUtPLFFBQVUsRUFFZixNQUFNZ0IsRUFBVXZCLEtBQUtPLE9BQVNOLE9BQU9RLE9BQU9GLE9BRTVDUCxLQUFLSixTQUFTRyxXQUFXeUIsVUFBWSxHQUFHQyxLQUFLQyxNQUFnQixJQUFWSCxNQUVuQyxJQUFaQSxHQUNGdkIsS0FBSzJCLFVBRVQsQ0FDQUEsUUFBQUEsR0FDQSxPQUFPLElBQUlDLFNBQVFDLElBQ2Y3QixLQUFLOEIsS0FBSyxhQUVaOUIsS0FBSytCLFdBQWFDLEVBQUFBLFFBQUtDLFNBQVMsQ0FDOUJDLE1BQU8sSUFHVGxDLEtBQUsrQixXQUFXSSxHQUFHbkMsS0FBS0osU0FBU1MsV0FBWSxDQUUzQytCLFNBQVUsRUFDVkMsS0FBTSxXQUNOQyxRQUFTLEdBQ1RDLEVBQUcsU0FJTHZDLEtBQUsrQixXQUFXSSxHQUFHbkMsS0FBS0osU0FBU0csV0FBWSxDQUMzQ3FDLFNBQVUsR0FDVkMsS0FBTSxXQUNOQyxRQUFTLEdBQ1RDLEVBQUcsUUFDRixTQUVIdkMsS0FBSytCLFdBQVdJLEdBQUduQyxLQUFLTCxRQUFTLENBQy9CNkMsVUFBVyxFQUNYSixTQUFVLElBRVpwQyxLQUFLK0IsV0FBV1UsTUFBS3BCLElBQ25CckIsS0FBSzBDLFVBQ0xiLEdBQVMsR0FDVCxHQUdOLENBQ0VhLE9BQUFBLEdBQ0UxQyxLQUFLTCxRQUFRZ0QsV0FBV0MsWUFBWTVDLEtBQUtMLFFBQzNDLGtCQzVHRmtELEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9wcmVsb2FkZXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnb2dsJ1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jbGFzc2VzL0NvbXBvbmVudFwiO1xuaW1wb3J0IHsgc3BsaXQgfSBmcm9tICcuLi91dGlscy90ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBjYW52YXMgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQ6IFwiLnByZWxvYWRlclwiLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgdGl0bGU6ICcucHJlbG9hZGVyX190ZXh0JyxcbiAgICAgICAgbnVtYmVyOiAnLnByZWxvYWRlcl9fbnVtYmVyJywgLy8gZ2V0IGFjY2VzcyB0byB0aGUgbG9hZGVyIG51bWJlclxuICAgICAgICBudW1iZXJUZXh0OiAnLnByZWxvYWRlcl9fbnVtYmVyX190ZXh0JyxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzXG5cbiAgICB3aW5kb3cuVEVYVFVSRVMgPSB7fVxuXG4gICAgc3BsaXQoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy50aXRsZSxcbiAgICAgIGV4cHJlc3Npb246ICc8YnI+J1xuICAgIH0pXG5cbiAgICBzcGxpdCh7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLnRpdGxlLFxuICAgICAgZXhwcmVzc2lvbjogJzxicj4nXG4gICAgfSlcblxuXG4gICAgdGhpcy5lbGVtZW50cy50aXRsZVNwYW5zID0gdGhpcy5lbGVtZW50cy50aXRsZS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuIHNwYW4nKVxuXG4gICAgdGhpcy5sZW5ndGggPSAwXG5cblxuICAgIHRoaXMuY3JlYXRlTG9hZGVyKCk7XG5cbiAgfVxuXG4gIGNyZWF0ZUxvYWRlcigpIHtcbiAgICB3aW5kb3cuQVNTRVRTLmZvckVhY2goaW1hZ2UgPT4ge1xuICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKHRoaXMuY2FudmFzLmdsLHtcbiAgICAgICAgZ2VuZXJhdGVNaXBtYXBzOiBmYWxzZVxuICAgICAgfSlcblxuICAgICAgY29uc3QgbWVkaWEgPSBuZXcgd2luZG93LkltYWdlKClcblxuICAgICAgbWVkaWEuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJ1xuICAgICAgbWVkaWEuc3JjID0gaW1hZ2VcbiAgICAgIG1lZGlhLm9ubG9hZCA9IF8gPT4ge1xuICAgICAgICB0ZXh0dXJlLmltYWdlID0gbWVkaWFcblxuICAgICAgICB0aGlzLm9uQXNzZXRMb2FkZWQoKVxuICAgICAgfVxuXG4gICAgICB3aW5kb3cuVEVYVFVSRVNbaW1hZ2VdID0gdGV4dHVyZVxuICAgIH0pO1xuICB9XG5cbiAgb25Bc3NldExvYWRlZChpbWFnZSkge1xuICAgIHRoaXMubGVuZ3RoICs9IDFcblxuICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmxlbmd0aCAvIHdpbmRvdy5BU1NFVFMubGVuZ3RoXG5cbiAgICB0aGlzLmVsZW1lbnRzLm51bWJlclRleHQuaW5uZXJIVE1MID0gYCR7TWF0aC5yb3VuZChwZXJjZW50ICogMTAwKX0lYFxuXG4gICAgaWYgKHBlcmNlbnQgPT09IDEpIHtcbiAgICAgIHRoaXMub25Mb2FkZWQoKVxuICAgIH1cbiAgfVxuICBvbkxvYWRlZCgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKVxuICBcbiAgICB0aGlzLmFuaW1hdGVPdXQgPSBHU0FQLnRpbWVsaW5lKHtcbiAgICAgIGRlbGF5OiAxXG4gICAgfSlcbiAgXG4gICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudHMudGl0bGVTcGFucywge1xuICAgICAgLy8gYXV0b0FscGhhOiAwLCByZW1vdmVkIGJlY2F1c2Ugd2Ugbm90IGdvbm5hIGZhZGUgb3V0IHRoZSB0ZXh0LCBidXQgbWFrZSBpdCB0cmFuc2xhdGUgZG93blxuICAgICAgZHVyYXRpb246IDEsXG4gICAgICBlYXNlOiAnZXhwby5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4zLFxuICAgICAgeTogJzEwMCUnXG4gICAgfSlcblxuXG4gICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dCwgeyAvLyBmYWRlIG91dCB0aGUgMTAwJSBudW1iZXJcbiAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICBlYXNlOiAnZXhwby5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4zLFxuICAgICAgeTogJzEwMCUnXG4gICAgfSwgJy09MC4zJylcblxuICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnQsIHsgLy8gcmVtb3ZlIHRoZSBwcmVsb2FkZXJcbiAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgIGR1cmF0aW9uOiAxLFxuICAgIH0pXG4gICAgdGhpcy5hbmltYXRlT3V0LmNhbGwoXyA9PiB7XG4gICAgICB0aGlzLmRlc3Ryb3koKVxuICAgICAgcmVzb2x2ZSgpXG4gICAgfSlcbiAgfSlcblxufVxuICBkZXN0cm95KCkgeyAgXG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KVxuICB9IFxufSIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjRjZTc5MTIyZDQwYjY2Mjc3NDJiXCIpIl0sIm5hbWVzIjpbIlByZWxvYWRlciIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiY2FudmFzIiwic3VwZXIiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJ0aXRsZSIsIm51bWJlciIsIm51bWJlclRleHQiLCJ0aGlzIiwid2luZG93IiwiVEVYVFVSRVMiLCJzcGxpdCIsImV4cHJlc3Npb24iLCJ0aXRsZVNwYW5zIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImNyZWF0ZUxvYWRlciIsIkFTU0VUUyIsImZvckVhY2giLCJpbWFnZSIsInRleHR1cmUiLCJUZXh0dXJlIiwiZ2wiLCJnZW5lcmF0ZU1pcG1hcHMiLCJtZWRpYSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJzcmMiLCJvbmxvYWQiLCJfIiwib25Bc3NldExvYWRlZCIsInBlcmNlbnQiLCJpbm5lckhUTUwiLCJNYXRoIiwicm91bmQiLCJvbkxvYWRlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZW1pdCIsImFuaW1hdGVPdXQiLCJHU0FQIiwidGltZWxpbmUiLCJkZWxheSIsInRvIiwiZHVyYXRpb24iLCJlYXNlIiwic3RhZ2dlciIsInkiLCJhdXRvQWxwaGEiLCJjYWxsIiwiZGVzdHJveSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==