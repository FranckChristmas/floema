/*! For license information please see main.d59c0c8e5ffbde1013f4.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/animations/Title.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/gsap/index.js"),a=s("./app/classes/Animation.js"),l=s("./app/utils/text.js");class i extends a.default{constructor({element:e,elements:t}){super({element:e,elements:t}),(0,l.split)({element:this.element,append:!0}),(0,l.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){n.default.set(this.element,{autoAlpha:1}),n.default.fromTo(this.elementsLines,{y:"100%"},{delay:.5,duration:1.5,stagger:{amount:1,axis:"x"},y:"0%"})}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){console.log(this.elementLinesSpans),this.elementsLines=(0,l.calculate)(this.elementLinesSpans),console.log(this.lines)}}},"./app/classes/Animation.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var n=s("./app/classes/Component.js");class a extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.Observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?(console.log("animateIn"),this.animateIn()):(console.log("animateOut"),this.animateOut())}))})),this.Observer.observe(this.element)}animateIn(){}animateOut(){}}}},(function(e){e.h=()=>"b2c9df4f22d6b4ee5974"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5kNTljMGM4ZTVmZmJkZTEwMTNmNC5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7ME5BTWUsTUFBTUEsVUFBY0MsRUFBQUEsUUFDakNDLFdBQUFBLEVBQWEsUUFBRUMsRUFBTyxTQUFFQyxJQUN0QkMsTUFBTSxDQUNKRixVQUNBQyxjQUdGRSxFQUFBQSxFQUFBQSxPQUFNLENBQUNILFFBQVNJLEtBQUtKLFFBQVNLLFFBQU8sS0FFckNGLEVBQUFBLEVBQUFBLE9BQU0sQ0FBQ0gsUUFBU0ksS0FBS0osUUFBU0ssUUFBTyxJQUVyQ0QsS0FBS0Usa0JBQW9CRixLQUFLSixRQUFRTyxpQkFBaUIsWUFFekQsQ0FFQUMsU0FBQUEsR0FDRUMsRUFBQUEsUUFBS0MsSUFBSU4sS0FBS0osUUFBUyxDQUNyQlcsVUFBVyxJQUdiRixFQUFBQSxRQUFLRyxPQUFPUixLQUFLUyxjQUFlLENBQzlCQyxFQUFHLFFBQ0QsQ0FDRkMsTUFBTyxHQUNQQyxTQUFVLElBQ1ZDLFFBQVMsQ0FDUEMsT0FBUSxFQUNSQyxLQUFNLEtBRVJMLEVBQUcsTUFFUCxDQUVBTSxVQUFBQSxHQUNFWCxFQUFBQSxRQUFLQyxJQUFJTixLQUFLSixRQUFTLENBQ3JCVyxVQUFXLEdBRWYsQ0FDQVUsUUFBQUEsR0FDRUMsUUFBUUMsSUFBSW5CLEtBQUtFLG1CQUVqQkYsS0FBS1MsZUFBZ0JXLEVBQUFBLEVBQUFBLFdBQVVwQixLQUFLRSxtQkFFcENnQixRQUFRQyxJQUFJbkIsS0FBS3FCLE1BQ25CLCtHQ2hEYSxNQUFNM0IsVUFBa0I0QixFQUFBQSxRQUNyQzNCLFdBQUFBLEVBQWEsUUFBRUMsRUFBTyxTQUFFQyxJQUN0QkMsTUFBTSxDQUNKRixVQUNBQyxhQUdGRyxLQUFLdUIsaUJBRUx2QixLQUFLZ0IsWUFFTCxDQUVGTyxjQUFBQSxHQUNFdkIsS0FBS3dCLFNBQVcsSUFBSUMsc0JBQXNCQyxJQUN4Q0EsRUFBUUMsU0FBUUMsSUFDVkEsRUFBTUMsZ0JBQ1JYLFFBQVFDLElBQUksYUFDWm5CLEtBQUtJLGNBRUxjLFFBQVFDLElBQUksY0FDWm5CLEtBQUtnQixhQUNQLEdBQ0EsSUFFSmhCLEtBQUt3QixTQUFTTSxRQUFROUIsS0FBS0osUUFDN0IsQ0FFQVEsU0FBQUEsR0FDQSxDQUVBWSxVQUFBQSxHQUNBLGtCQ2xDRmUsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb2VtYS8uL2FwcC9hbmltYXRpb25zL1RpdGxlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL0FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4uL2NsYXNzZXMvQW5pbWF0aW9uJ1xuXG5pbXBvcnQgeyBjYWxjdWxhdGUsIHNwbGl0IH0gZnJvbSAnLi4vdXRpbHMvdGV4dCdcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaXRsZSBleHRlbmRzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudHNcbiAgICB9KVxuXG4gICAgc3BsaXQoe2VsZW1lbnQ6IHRoaXMuZWxlbWVudCwgYXBwZW5kOnRydWV9KVxuICAgIFxuICAgIHNwbGl0KHtlbGVtZW50OiB0aGlzLmVsZW1lbnQsIGFwcGVuZDp0cnVlfSlcblxuICAgIHRoaXMuZWxlbWVudExpbmVzU3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbiBzcGFuJylcblxuICB9XG5cbiAgYW5pbWF0ZUluKCkge1xuICAgIEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgYXV0b0FscGhhOiAxXG4gICAgfSlcblxuICAgIEdTQVAuZnJvbVRvKHRoaXMuZWxlbWVudHNMaW5lcywge1xuICAgICAgeTogJzEwMCUnXG4gICAgfSwgIHtcbiAgICAgIGRlbGF5OiAwLjUsXG4gICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgc3RhZ2dlcjoge1xuICAgICAgICBhbW91bnQ6IDEsXG4gICAgICAgIGF4aXM6ICd4JyxcbiAgICAgIH0sXG4gICAgICB5OiAnMCUnXG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgR1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICBhdXRvQWxwaGE6IDBcbiAgICB9KVxuICB9XG4gIG9uUmVzaXplKCkge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuZWxlbWVudExpbmVzU3BhbnMpXG5cbiAgICB0aGlzLmVsZW1lbnRzTGluZXMgPSBjYWxjdWxhdGUodGhpcy5lbGVtZW50TGluZXNTcGFucylcblxuICAgIGNvbnNvbGUubG9nKHRoaXMubGluZXMpXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnQuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQsIGVsZW1lbnRzfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBlbGVtZW50c1xuICAgIH0pXG5cbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKClcblxuICAgIHRoaXMuYW5pbWF0ZU91dCgpXG5cbiAgICB9XG5cbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2FuaW1hdGVJbicpXG4gICAgICAgICAgdGhpcy5hbmltYXRlSW4oKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdhbmltYXRlT3V0JylcbiAgICAgICAgICB0aGlzLmFuaW1hdGVPdXQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5PYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudClcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcbiAgfVxuXG4gIGFuaW1hdGVPdXQoKSB7XG4gIH1cbn0iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJiMmM5ZGY0ZjIyZDZiNGVlNTk3NFwiKSJdLCJuYW1lcyI6WyJUaXRsZSIsIkFuaW1hdGlvbiIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImVsZW1lbnRzIiwic3VwZXIiLCJzcGxpdCIsInRoaXMiLCJhcHBlbmQiLCJlbGVtZW50TGluZXNTcGFucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhbmltYXRlSW4iLCJHU0FQIiwic2V0IiwiYXV0b0FscGhhIiwiZnJvbVRvIiwiZWxlbWVudHNMaW5lcyIsInkiLCJkZWxheSIsImR1cmF0aW9uIiwic3RhZ2dlciIsImFtb3VudCIsImF4aXMiLCJhbmltYXRlT3V0Iiwib25SZXNpemUiLCJjb25zb2xlIiwibG9nIiwiY2FsY3VsYXRlIiwibGluZXMiLCJDb21wb25lbnQiLCJjcmVhdGVPYnNlcnZlciIsIk9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJvYnNlcnZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9