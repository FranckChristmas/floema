/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r={"./app/animations/Highlight.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js");r("./app/utils/text.js"),r("./node_modules/lodash/each.js");class i extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.fromTo(this.element,{autoAlpha:0,scale:1.2},{autoAlpha:1,duration:1.5,ease:"expo.out",scale:1})}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){}}},"./app/animations/Label.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o);class l extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.elementLinesSpans=(0,i.split)({append:!0,element:this.element})}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a()(this.elementsLines,((e,t)=>{this.timelineIn.fromTo(e,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*t,duration:1.5,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/animations/Paragraph.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o);class l extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.elementLinesSpans=(0,i.split)({append:!0,element:this.element})}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a()(this.elementsLines,((e,t)=>{this.timelineIn.fromTo(e,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*t,duration:1.5,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/animations/Title.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o);class l extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),(0,i.split)({element:this.element,append:!0}),(0,i.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a()(this.elementsLines,((e,t)=>{this.timelineIn.fromTo(e,{y:"100%"},{delay:.2*t,duration:1.2,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/classes/Animation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.Observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.Observer.observe(this.element)}animateIn(){}animateOut(){}}},"./app/classes/Asyncload.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.Observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=e=>{this.element.classList.add("loaded")}))}))})),this.Observer.observe(this.element)}}},"./app/classes/Button.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Component.js"),s=r("./node_modules/gsap/index.js");class i extends n.default{constructor({element:e}){super({element:e}),this.path=e.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),console.log(this.path.getTotalLength),this.timeline=s.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){console.log("enter"),this.timeline.play()}onMouseLeave(){console.log("leave"),this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ColorsManager:()=>s});var n=r("./node_modules/gsap/index.js");const s=new class{change({backgroundColor:e,color:t}){n.default.to(document.documentElement,{backgroundColor:e,color:t,duration:1.2})}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./node_modules/events/events.js"),o=r.n(i);class a extends(o()){constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},this.element&&s()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>v});var n=r("./node_modules/gsap/index.js"),s=r("./node_modules/prefix/index.js"),i=r.n(s),o=r("./node_modules/normalize-wheel/index.js"),a=r.n(o),l=r("./app/animations/Title.js"),u=r("./app/animations/Highlight.js"),h=r("./app/animations/Paragraph.js"),d=r("./app/animations/Label.js"),c=r("./node_modules/lodash/each.js"),p=r.n(c),f=r("./node_modules/lodash/map.js"),m=r.n(f),g=r("./app/classes/Colors.js"),_=(r("./app/components/preloader.js"),r("./app/classes/Asyncload.js"));class v{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,animationsLabels:'[data-animation="label"]',animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=r,this.transformPrefix=i()("transform"),this.onMouseWheelEvent=this.onMouseWheel.bind(this),this.scroll={current:0,target:0,last:0,limit:1e3}}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},p()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),this.createAnimations(),this.createPreloader()}createAnimations(){this.animations=[],this.animationsTitles=m()(this.elements.animationsTitles,(e=>new l.default({element:e}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=m()(this.elements.animationsParagraphs,(e=>new h.default({element:e}))),this.animations.push(...this.animationsParagraphs),this.animationsLabels=m()(this.elements.animationsLabels,(e=>new d.default({element:e}))),this.animations.push(...this.animationsLabels),this.animationsHighlights=m()(this.elements.animationsHighlights,(e=>new u.default({element:e}))),this.animations.push(...this.animationsHighlights)}createPreloader(){this.preloaders=m()(this.elements.preloaders,(e=>new _.default({element:e})))}show(){return new Promise((e=>{g.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),this.animateIn=n.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animateIn.call((t=>{this.addEventListeners(),e()}))}))}hide(){return new Promise((e=>{this.destroy(),this.animateOut=n.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onMouseWheel(e){const{pixelY:t}=a()(e);this.scroll.target+=t}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),p()(this.animations,(e=>e.onResize()))}update(){this.scroll.current=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,0),this.scroll.target<.01&&(this.scroll.target=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){window.addEventListener("mousewheel",this.onMouseWheelEvent)}removeEventListeners(){window.removeEventListener("mousewheel",this.onMouseWheelEvent)}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/Index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/ogl/src/core/Renderer.js"),s=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Home.js");class a{constructor(){this.createCamera(),this.createRenderer(),this.createScene(),this.createHome()}createRenderer(){this.renderer=new n.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new o.default({gl:this.gl,scene:this.scene})}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Home.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./app/components/Media.js"),s=r("./node_modules/lodash/map.js"),i=r.n(s),o=r("./node_modules/ogl/src/core/Transform.js"),a=r("./node_modules/ogl/src/extras/Plane.js");class l{constructor({gl:e,scene:t}){this.gl=e,this.group=new o.Transform,this.media=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(t)}createGeometry(){this.geometry=new a.Plane(this.gl)}createGallery(){i()(this.media,((e,t)=>new n.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group})))}}},"./app/components/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Texture.js"),s=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/plane-vertex.glsl"),a=r("./app/shaders/plane-fragment.glsl");class l{constructor({element:e,geometry:t,gl:r,scene:n,index:s}){this.element=e,this.gl=r,this.geometry=t,this.scene=n,this.index=s,this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){this.texture=new n.Texture(this.gl),console.log(this.element),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=e=>this.texture.image=this.image}createProgram(){this.program=new s.Program(this.gl,{fragment:a.default,vertex:o.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.position.x+=this.index*this.mesh.scale.x}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./app/classes/Component.js"),s=r("./node_modules/gsap/index.js"),i=r("./app/utils/colors.js");class o extends n.default{constructor({template:e}){super({element:".navigation",elements:{links:".navigation__list__link",items:".navigation__list__item"}}),this.onChange(e)}onChange(e){"about"===e?(s.default.to(this.element,{color:i.COLOR_BRIGHT_GREY,duration:1.2}),s.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(s.default.to(this.element,{color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.2}),s.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),s.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Component.js"),i=r("./node_modules/lodash/each.js"),o=r.n(i),a=r("./app/utils/text.js");class l extends s.default{constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text",images:document.querySelectorAll("img")}}),(0,a.split)({element:this.elements.title,expression:"<br>"}),(0,a.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){o()(this.elements.images,(e=>{e.src=e.getAttribute("data-src"),e.onload=()=>this.onAssetLoaded(e)}))}onAssetLoaded(e){this.length+=1;const t=this.length/this.elements.images.length;this.elements.numberText.innerHTML=`${Math.round(100*t)}%`,1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animateOut=n.default.timeline({delay:1.5}),this.animateOut.to(this.elements.titleSpans,{duration:1,ease:"expo.Out",stagger:.3,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:.5,ease:"expo.Out",stagger:.3,y:"100%"},"-=0.3"),this.animateOut.to(this.element,{duration:.5,ease:"expo.out",scaleY:0,transformOrigin:"0 0"}),this.animateOut.call((()=>{this.emit("completed")}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./app/components/Canvas/Index.js"),o=r("./app/components/preloader.js"),a=r("./app/pages/About/Index.js"),l=r("./app/pages/Collections/Index.js"),u=r("./app/pages/Detail/Index.js"),h=r("./app/pages/Home/Index.js"),d=r("./app/components/Navigation.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createNavigation(),this.createCanvas(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.update()}createNavigation(){this.navigation=new d.default({template:this.template})}createPreloader(){this.preloader=new o.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new i.default}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new a.default,collections:new l.default,detail:new u.default,home:new h.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}async onChange(e){await this.page.hide();const t=await window.fetch(e);if(200===t.status){const e=await t.text(),r=document.createElement("div");r.innerHTML=e;const n=r.querySelector(".content");this.template=n.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("errrrrrrrror")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),this.page&&this.page.onResize&&this.page.onResize()}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");s()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange(r)}}))}}},"./app/pages/About/Index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({element:".about",id:"About",elements:{navigation:document.querySelector(".navigation"),title:".about__title",wrapper:".about__wrapper"}})}}},"./app/pages/Collections/Index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({id:"Collections",element:".collections",elements:{title:".collections__titles"}})}}},"./app/pages/Detail/Index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Page.js"),s=r("./app/classes/Button.js");class i extends n.default{constructor(){super({element:".detail",id:"Detail",elements:{button:".detail__button"}})}create(){super.create(),this.link=new s.default({element:this.elements.button})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/pages/Home/Index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Page.js"),s=r("./app/classes/Button.js");class i extends n.default{constructor(){super({element:".home",id:"Home",elements:{navigation:document.querySelector(".navigation"),link:".home__link"}})}create(){super.create(),this.link=new s.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/shaders/plane-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D tMap;\n   \nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture; // set the color or texture of the cube to red\n}"},"./app/shaders/plane-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./app/utils/colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{COLOR_BRIGHT_GREY:()=>s,COLOR_QUARTER_SPANISH_WHITE:()=>n});const n="#f9f1E7",s="#37384C"},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{calculate:()=>o,split:()=>i});var n=r("./node_modules/lodash/each.js"),s=r.n(n);function i({element:e,expression:t=" ",append:r=!0}){const n=function(e,t){const r=e.split("<br>");let n=[];return s()(r,((e,r)=>{r>0&&n.push("<br>"),n=n.concat(e.split(t));let i=!1,o="";const a=[];s()(n,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(o="",i=!0),i&&(o+=` ${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),n=a})),n}(e.innerHTML.toString().trim(),t);let i="";s()(n,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");s()(t,((e,t)=>{i+=t>0?"<br>"+a(e):a(e)}))}else i+=a(e)})),e.innerHTML=i;const o=e.querySelectorAll("span");return r&&s()(o,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),n="&"!==e.textContent,s="-"!==e.textContent;t&&r&&n&&s&&(e.innerHTML=`${e.textContent}&nbsp;`)})),o}function o(e){if(!e.length)return;const t=[];let r=[],n=e[0].offsetTop;return s()(e,((s,i)=>{s.offsetTop===n&&r.push(s),s.offsetTop!==n&&(t.push(r),r=[],r.push(s),n=s.offsetTop),i+1===e.length&&t.push(r)})),t}function a(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)m/g,(function(e,t){var n=s[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(n+=Array(o+1).join("</span>")),n}function a(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";s[t]="color:#"+r,t=parseInt(t),s[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var s=e.hasOwnProperty(n)?e[n]:null;if(s){if("reset"===n){if("string"==typeof s&&(s=[s]),!Array.isArray(s)||0===s.length||s.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[n];s[0]||(s[0]=i[0]),1!==s.length&&s[1]||(s=[s[0]]).push(i[1]),s=s.slice(0,2)}else if("string"!=typeof s)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=s}else t[n]=r[n]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return s}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=s,o.tags.close=i),o.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function s(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",s),r([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&m(e,"error",t,r)}(e,s,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var s,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(s=l(e))>0&&o.length>s&&!o.warned){o.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=o.length,u=h,console&&console.warn&&console.warn(u)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=h.bind(n);return s.listener=r,n.wrapFn=s,s}function c(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):f(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function m(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(i){n.once&&e.removeEventListener(t,s),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var s="error"===e,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var u=l.length,h=f(l,u);for(r=0;r<u;++r)n(h[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,d(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,d(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,s,i,o;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,s=i;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(s=i[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return c(this,e,!0)},i.prototype.rawListeners=function(e){return c(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>Ee,_createElement:()=>z,_getBBox:()=>G,checkPrefix:()=>B,default:()=>Ee});var n,s,i,o,a,l,u,h,d=r("./node_modules/gsap/gsap-core.js"),c={},p=180/Math.PI,f=Math.PI/180,m=Math.atan2,g=/([A-Z])/g,_=/(left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},b=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},x=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},j=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},E=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},M=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},T=function(e,t,r){return e.style[t]=r},A=function(e,t,r){return e.style.setProperty(t,r)},O=function(e,t,r){return e._gsap[t]=r},S=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},C=function(e,t,r,n,s){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(s,i)},k=function(e,t,r,n,s){var i=e._gsap;i[t]=r,i.renderTransform(s,i)},P="transform",L=P+"Origin",R=function e(t,r){var n=this,s=this.target,i=s.style,o=s._gsap;if(t in c&&i){if(this.tfm=this.tfm||{},"transform"===t)return y.transform.split(",").forEach((function(t){return e.call(n,t,r)}));if(~(t=y[t]||t).indexOf(",")?t.split(",").forEach((function(e){return n.tfm[e]=Z(s,e)})):this.tfm[t]=o.x?o[t]:Z(s,t),t===L&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(P)>=0)return;o.svg&&(this.svgo=s.getAttribute("data-svg-origin"),this.props.push(L,r,"")),t=P}(i||r)&&this.props.push(t,r,i[t])},F=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},I=function(){var e,t,r=this.props,n=this.target,s=n.style,i=n._gsap;for(e=0;e<r.length;e+=3)r[e+1]?2===r[e+1]?n[r[e]](r[e+2]):n[r[e]]=r[e+2]:r[e+2]?s[r[e]]=r[e+2]:s.removeProperty("--"===r[e].substr(0,2)?r[e]:r[e].replace(g,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)i[t]=this.tfm[t];i.svg&&(i.renderTransform(),n.setAttribute("data-svg-origin",this.svgo||"")),(e=u())&&e.isStart||s[P]||(F(s),i.zOrigin&&s[L]&&(s[L]+=" "+i.zOrigin+"px",i.zOrigin=0,i.renderTransform()),i.uncache=1)}},D=function(e,t){var r={target:e,props:[],revert:I,save:R};return e._gsap||d.gsap.core.getCache(e),t&&e.style&&e.nodeType&&t.split(",").forEach((function(e){return r.save(e)})),r},z=function(e,t){var r=s.createElementNS?s.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):s.createElement(e);return r&&r.style?r:s.createElement(e)},N=function e(t,r,n){var s=getComputedStyle(t);return s[r]||s.getPropertyValue(r.replace(g,"-$1").toLowerCase())||s.getPropertyValue(r)||!n&&e(t,B(r)||r,1)||""},U="O,Moz,ms,Ms,Webkit".split(","),B=function(e,t,r){var n=(t||a).style,s=5;if(e in n&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);s--&&!(U[s]+e in n););return s<0?null:(3===s?"ms":s>=0?U[s]:"")+e},H=function(){"undefined"!=typeof window&&window.document&&(n=window,s=n.document,i=s.documentElement,a=z("div")||{style:{}},z("div"),P=B(P),L=P+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",h=!!B("perspective"),u=d.gsap.core.reverting,o=1)},q=function(e){var t,r=e.ownerSVGElement,n=z("svg",r&&r.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=e.cloneNode(!0);s.style.display="block",n.appendChild(s),i.appendChild(n);try{t=s.getBBox()}catch(e){}return n.removeChild(s),i.removeChild(n),t},V=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},G=function(e){var t,r;try{t=e.getBBox()}catch(n){t=q(e),r=1}return t&&(t.width||t.height)||r||(t=q(e)),!t||t.width||t.x||t.y?t:{x:+V(e,["x","cx","x1"])||0,y:+V(e,["y","cy","y1"])||0,width:0,height:0}},W=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!G(e))},X=function(e,t){if(t){var r,n=e.style;t in c&&t!==L&&(t=P),n.removeProperty?("ms"!==(r=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),n.removeProperty("--"===r?t:t.replace(g,"-$1").toLowerCase())):n.removeAttribute(t)}},Y=function(e,t,r,n,s,i){var o=new d.PropTween(e._pt,t,r,0,1,i?M:E);return e._pt=o,o.b=n,o.e=s,e._props.push(r),o},$={deg:1,rad:1,turn:1},Q={grid:1,flex:1},K=function e(t,r,n,i){var o,l,u,h,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",m=a.style,g=_.test(r),v="svg"===t.tagName.toLowerCase(),y=(v?"client":"offset")+(g?"Width":"Height"),b=100,w="px"===i,x="%"===i;if(i===f||!p||$[i]||$[f])return p;if("px"!==f&&!w&&(p=e(t,r,n,"px")),h=t.getCTM&&W(t),(x||"%"===f)&&(c[r]||~r.indexOf("adius")))return o=h?t.getBBox()[g?"width":"height"]:t[y],(0,d._round)(x?p/o*b:p/100*o);if(m[g?"width":"height"]=b+(w?f:i),l="rem"!==i&&~r.indexOf("adius")||"em"===i&&t.appendChild&&!v?t:t.parentNode,h&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(u=l._gsap)&&x&&u.width&&g&&u.time===d._ticker.time&&!u.uncache)return(0,d._round)(p/u.width*b);if(!x||"height"!==r&&"width"!==r)(x||"%"===f)&&!Q[N(l,"display")]&&(m.position=N(t,"position")),l===t&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute";else{var j=t.style[r];t.style[r]=b+i,o=t[y],j?t.style[r]=j:X(t,r)}return g&&x&&((u=(0,d._getCache)(l)).time=d._ticker.time,u.width=l[y]),(0,d._round)(w?o*p/b:o&&p?b/o*p:0)},Z=function(e,t,r,n){var s;return o||H(),t in y&&"transform"!==t&&~(t=y[t]).indexOf(",")&&(t=t.split(",")[0]),c[t]&&"transform"!==t?(s=ue(e,n),s="transformOrigin"!==t?s[t]:s.svg?s.origin:he(N(e,L))+" "+s.zOrigin+"px"):(!(s=e.style[t])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=re[t]&&re[t](e,t,r)||N(e,t)||(0,d._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(s+"").trim().indexOf(" ")?K(e,t,s,r)+r:s},J=function(e,t,r,n){if(!r||"none"===r){var s=B(t,e,1),i=s&&N(e,s,1);i&&i!==r?(t=s,r=i):"borderColor"===t&&(r=N(e,"borderTopColor"))}var o,a,l,u,h,c,p,f,m,g,_,v=new d.PropTween(this._pt,e.style,t,0,1,d._renderComplexString),y=0,b=0;if(v.b=r,v.e=n,r+="","auto"===(n+="")&&(c=e.style[t],e.style[t]=n,n=N(e,t)||n,c?e.style[t]=c:X(e,t)),o=[r,n],(0,d._colorStringFilter)(o),n=o[1],l=(r=o[0]).match(d._numWithUnitExp)||[],(n.match(d._numWithUnitExp)||[]).length){for(;a=d._numWithUnitExp.exec(n);)p=a[0],m=n.substring(y,a.index),h?h=(h+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(h=1),p!==(c=l[b++]||"")&&(u=parseFloat(c)||0,_=c.substr((u+"").length),"="===p.charAt(1)&&(p=(0,d._parseRelative)(u,p)+_),f=parseFloat(p),g=p.substr((f+"").length),y=d._numWithUnitExp.lastIndex-g.length,g||(g=g||d._config.units[t]||_,y===n.length&&(n+=g,v.e+=g)),_!==g&&(u=K(e,t,c,g)||0),v._pt={_next:v._pt,p:m||1===b?m:",",s:u,c:f-u,m:h&&h<4||"zIndex"===t?Math.round:0});v.c=y<n.length?n.substring(y,n.length):""}else v.r="display"===t&&"none"===n?M:E;return d._relExp.test(n)&&(v.e=0),this._pt=v,v},ee={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},te=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,n,s,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)r=a[s],c[r]&&(n=1,r="transformOrigin"===r?L:P),X(i,r);n&&(X(i,P),l&&(l.svg&&i.removeAttribute("transform"),o.scale=o.rotate=o.translate="none",ue(i,1),l.uncache=1,F(o)))}},re={clearProps:function(e,t,r,n,s){if("isFromStart"!==s.data){var i=e._pt=new d.PropTween(e._pt,t,r,0,0,te);return i.u=n,i.pr=-10,i.tween=s,e._props.push(r),1}}},ne=[1,0,0,1,0,0],se={},ie=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},oe=function(e){var t=N(e,P);return ie(t)?ne:t.substr(7).match(d._numExp).map(d._round)},ae=function(e,t){var r,n,s,o,a=e._gsap||(0,d._getCache)(e),l=e.style,u=oe(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(s=e.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?ne:u:(u!==ne||e.offsetParent||e===i||a.svg||(s=l.display,l.display="block",(r=e.parentNode)&&(e.offsetParent||e.getBoundingClientRect().width)||(o=1,n=e.nextElementSibling,i.appendChild(e)),u=oe(e),s?l.display=s:X(e,"display"),o&&(n?r.insertBefore(e,n):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},le=function(e,t,r,n,s,i){var o,a,l,u=e._gsap,h=s||ae(e,!0),d=u.xOrigin||0,c=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,m=h[0],g=h[1],_=h[2],v=h[3],y=h[4],b=h[5],w=t.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;r?h!==ne&&(a=m*v-g*_)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(v/a)+j*(-_/a)+(_*b-v*y)/a,j=l):(x=(o=G(e)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),n||!1!==n&&u.smooth?(y=x-d,b=j-c,u.xOffset=p+(y*m+b*_)-y,u.yOffset=f+(y*g+b*v)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!n,u.origin=t,u.originIsAbsolute=!!r,e.style[L]="0px 0px",i&&(Y(i,u,"xOrigin",d,x),Y(i,u,"yOrigin",c,j),Y(i,u,"xOffset",p,u.xOffset),Y(i,u,"yOffset",f,u.yOffset)),e.setAttribute("data-svg-origin",x+" "+j)},ue=function(e,t){var r=e._gsap||new d.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var n,s,i,o,a,l,u,c,g,_,v,y,b,w,x,j,E,M,T,A,O,S,C,k,R,F,I,D,z,U,B,H,q=e.style,V=r.scaleX<0,G="px",X="deg",Y=getComputedStyle(e),$=N(e,L)||"0";return n=s=i=l=u=c=g=_=v=0,o=a=1,r.svg=!(!e.getCTM||!W(e)),Y.translate&&("none"===Y.translate&&"none"===Y.scale&&"none"===Y.rotate||(q[P]=("none"!==Y.translate?"translate3d("+(Y.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==Y.rotate?"rotate("+Y.rotate+") ":"")+("none"!==Y.scale?"scale("+Y.scale.split(" ").join(",")+") ":"")+("none"!==Y[P]?Y[P]:"")),q.scale=q.rotate=q.translate="none"),w=ae(e,r.svg),r.svg&&(r.uncache?(R=e.getBBox(),$=r.xOrigin-R.x+"px "+(r.yOrigin-R.y)+"px",k=""):k=!t&&e.getAttribute("data-svg-origin"),le(e,k||$,!!k||r.originIsAbsolute,!1!==r.smooth,w)),y=r.xOrigin||0,b=r.yOrigin||0,w!==ne&&(M=w[0],T=w[1],A=w[2],O=w[3],n=S=w[4],s=C=w[5],6===w.length?(o=Math.sqrt(M*M+T*T),a=Math.sqrt(O*O+A*A),l=M||T?m(T,M)*p:0,(g=A||O?m(A,O)*p+l:0)&&(a*=Math.abs(Math.cos(g*f))),r.svg&&(n-=y-(y*M+b*A),s-=b-(y*T+b*O))):(H=w[6],U=w[7],I=w[8],D=w[9],z=w[10],B=w[11],n=w[12],s=w[13],i=w[14],u=(x=m(H,z))*p,x&&(k=S*(j=Math.cos(-x))+I*(E=Math.sin(-x)),R=C*j+D*E,F=H*j+z*E,I=S*-E+I*j,D=C*-E+D*j,z=H*-E+z*j,B=U*-E+B*j,S=k,C=R,H=F),c=(x=m(-A,z))*p,x&&(j=Math.cos(-x),B=O*(E=Math.sin(-x))+B*j,M=k=M*j-I*E,T=R=T*j-D*E,A=F=A*j-z*E),l=(x=m(T,M))*p,x&&(k=M*(j=Math.cos(x))+T*(E=Math.sin(x)),R=S*j+C*E,T=T*j-M*E,C=C*j-S*E,M=k,S=R),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,c=180-c),o=(0,d._round)(Math.sqrt(M*M+T*T+A*A)),a=(0,d._round)(Math.sqrt(C*C+H*H)),x=m(S,C),g=Math.abs(x)>2e-4?x*p:0,v=B?1/(B<0?-B:B):0),r.svg&&(k=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!ie(N(e,P)),k&&e.setAttribute("transform",k))),Math.abs(g)>90&&Math.abs(g)<270&&(V?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),t=t||r.uncache,r.x=n-((r.xPercent=n&&(!t&&r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-n)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+G,r.y=s-((r.yPercent=s&&(!t&&r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-s)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+G,r.z=i+G,r.scaleX=(0,d._round)(o),r.scaleY=(0,d._round)(a),r.rotation=(0,d._round)(l)+X,r.rotationX=(0,d._round)(u)+X,r.rotationY=(0,d._round)(c)+X,r.skewX=g+X,r.skewY=_+X,r.transformPerspective=v+G,(r.zOrigin=parseFloat($.split(" ")[2])||!t&&r.zOrigin||0)&&(q[L]=he($)),r.xOffset=r.yOffset=0,r.force3D=d._config.force3D,r.renderTransform=r.svg?_e:h?ge:ce,r.uncache=0,r},he=function(e){return(e=e.split(" "))[0]+" "+e[1]},de=function(e,t,r){var n=(0,d.getUnit)(t);return(0,d._round)(parseFloat(t)+parseFloat(K(e,"x",r+"px",n)))+n},ce=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ge(e,t)},pe="0deg",fe="0px",me=") ",ge=function(e,t){var r=t||this,n=r.xPercent,s=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,h=r.rotationX,d=r.skewX,c=r.skewY,p=r.scaleX,m=r.scaleY,g=r.transformPerspective,_=r.force3D,v=r.target,y=r.zOrigin,b="",w="auto"===_&&e&&1!==e||!0===_;if(y&&(h!==pe||u!==pe)){var x,j=parseFloat(u)*f,E=Math.sin(j),M=Math.cos(j);j=parseFloat(h)*f,x=Math.cos(j),i=de(v,i,E*x*-y),o=de(v,o,-Math.sin(j)*-y),a=de(v,a,M*x*-y+y)}g!==fe&&(b+="perspective("+g+me),(n||s)&&(b+="translate("+n+"%, "+s+"%) "),(w||i!==fe||o!==fe||a!==fe)&&(b+=a!==fe||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+me),l!==pe&&(b+="rotate("+l+me),u!==pe&&(b+="rotateY("+u+me),h!==pe&&(b+="rotateX("+h+me),d===pe&&c===pe||(b+="skew("+d+", "+c+me),1===p&&1===m||(b+="scale("+p+", "+m+me),v.style[P]=b||"translate(0, 0)"},_e=function(e,t){var r,n,s,i,o,a=t||this,l=a.xPercent,u=a.yPercent,h=a.x,c=a.y,p=a.rotation,m=a.skewX,g=a.skewY,_=a.scaleX,v=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,M=parseFloat(h),T=parseFloat(c);p=parseFloat(p),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),p+=g),p||m?(p*=f,m*=f,r=Math.cos(p)*_,n=Math.sin(p)*_,s=Math.sin(p-m)*-v,i=Math.cos(p-m)*v,m&&(g*=f,o=Math.tan(m-g),s*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),r*=o=Math.sqrt(1+o*o),n*=o)),r=(0,d._round)(r),n=(0,d._round)(n),s=(0,d._round)(s),i=(0,d._round)(i)):(r=_,i=v,n=s=0),(M&&!~(h+"").indexOf("px")||T&&!~(c+"").indexOf("px"))&&(M=K(y,"x",h,"px"),T=K(y,"y",c,"px")),(b||w||x||j)&&(M=(0,d._round)(M+b-(b*r+w*s)+x),T=(0,d._round)(T+w-(b*n+w*i)+j)),(l||u)&&(o=y.getBBox(),M=(0,d._round)(M+l/100*o.width),T=(0,d._round)(T+u/100*o.height)),o="matrix("+r+","+n+","+s+","+i+","+M+","+T+")",y.setAttribute("transform",o),E&&(y.style[P]=o)},ve=function(e,t,r,n,s){var i,o,a=360,l=(0,d._isString)(s),u=parseFloat(s)*(l&&~s.indexOf("rad")?p:1)-n,h=n+u+"deg";return l&&("short"===(i=s.split("_")[1])&&(u%=a)!==u%180&&(u+=u<0?a:-360),"cw"===i&&u<0?u=(u+36e9)%a-~~(u/a)*a:"ccw"===i&&u>0&&(u=(u-36e9)%a-~~(u/a)*a)),e._pt=o=new d.PropTween(e._pt,t,r,n,u,w),o.e=h,o.u="deg",e._props.push(r),o},ye=function(e,t){for(var r in t)e[r]=t[r];return e},be=function(e,t,r){var n,s,i,o,a,l,u,h=ye({},r._gsap),p=r.style;for(s in h.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[P]=t,n=ue(r,1),X(r,P),r.setAttribute("transform",i)):(i=getComputedStyle(r)[P],p[P]=t,n=ue(r,1),p[P]=i),c)(i=h[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,d.getUnit)(i)!==(u=(0,d.getUnit)(o))?K(r,s,i,u):parseFloat(i),l=parseFloat(o),e._pt=new d.PropTween(e._pt,n,s,a,l-a,b),e._pt.u=u||0,e._props.push(s));ye(n,h)};(0,d._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",n="Right",s="Bottom",i="Left",o=(t<3?[r,n,s,i]:[r+i,r+n,s+n,s+i]).map((function(r){return t<2?e+r:"border"+r+e}));re[t>1?"border"+e:e]=function(e,t,r,n,s){var i,a;if(arguments.length<4)return i=o.map((function(t){return Z(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(n+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,s)}}));var we,xe,je,Ee={name:"css",register:H,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,n,s){var i,a,l,u,h,p,f,m,g,_,w,E,M,T,A,O,S,C,k,R,F=this._props,I=e.style,z=r.vars.startAt;for(f in o||H(),this.styles=this.styles||D(e),O=this.styles.props,this.tween=r,t)if("autoRound"!==f&&(a=t[f],!d._plugins[f]||!(0,d._checkPlugin)(f,t,r,n,e,s)))if(h=typeof a,p=re[f],"function"===h&&(h=typeof(a=a.call(r,n,e,s))),"string"===h&&~a.indexOf("random(")&&(a=(0,d._replaceRandom)(a)),p)p(this,e,f,a,r)&&(A=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",d._colorExp.lastIndex=0,d._colorExp.test(i)||(m=(0,d.getUnit)(i),g=(0,d.getUnit)(a)),g?m!==g&&(i=K(e,f,i,g)+g):m&&(a+=m),this.add(I,"setProperty",i,a,n,s,0,0,f),F.push(f),O.push(f,0,I[f]);else if("undefined"!==h){if(z&&f in z?(i="function"==typeof z[f]?z[f].call(r,n,e,s):z[f],(0,d._isString)(i)&&~i.indexOf("random(")&&(i=(0,d._replaceRandom)(i)),(0,d.getUnit)(i+"")||"auto"===i||(i+=d._config.units[f]||(0,d.getUnit)(Z(e,f))||""),"="===(i+"").charAt(1)&&(i=Z(e,f))):i=Z(e,f),u=parseFloat(i),(_="string"===h&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in y&&("autoAlpha"===f&&(1===u&&"hidden"===Z(e,"visibility")&&l&&(u=0),O.push("visibility",0,I.visibility),Y(this,I,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=y[f]).indexOf(",")&&(f=f.split(",")[0])),w=f in c)if(this.styles.save(f),E||((M=e._gsap).renderTransform&&!t.parseTransform||ue(e,t.parseTransform),T=!1!==t.smoothOrigin&&M.smooth,(E=this._pt=new d.PropTween(this._pt,I,P,0,1,M.renderTransform,M,0,-1)).dep=1),"scale"===f)this._pt=new d.PropTween(this._pt,M,"scaleY",M.scaleY,(_?(0,d._parseRelative)(M.scaleY,_+l):l)-M.scaleY||0,b),this._pt.u=0,F.push("scaleY",f),f+="X";else{if("transformOrigin"===f){O.push(L,0,I[L]),C=void 0,k=void 0,R=void 0,C=(S=a).split(" "),k=C[0],R=C[1]||"50%","top"!==k&&"bottom"!==k&&"left"!==R&&"right"!==R||(S=k,k=R,R=S),C[0]=ee[k]||k,C[1]=ee[R]||R,a=C.join(" "),M.svg?le(e,a,0,T,0,this):((g=parseFloat(a.split(" ")[2])||0)!==M.zOrigin&&Y(this,M,"zOrigin",M.zOrigin,g),Y(this,I,f,he(i),he(a)));continue}if("svgOrigin"===f){le(e,a,1,T,0,this);continue}if(f in se){ve(this,M,f,u,_?(0,d._parseRelative)(u,_+a):a);continue}if("smoothOrigin"===f){Y(this,M,"smooth",M.smooth,a);continue}if("force3D"===f){M[f]=a;continue}if("transform"===f){be(this,a,e);continue}}else f in I||(f=B(f)||f);if(w||(l||0===l)&&(u||0===u)&&!v.test(a)&&f in I)l||(l=0),(m=(i+"").substr((u+"").length))!==(g=(0,d.getUnit)(a)||(f in d._config.units?d._config.units[f]:m))&&(u=K(e,f,i,g)),this._pt=new d.PropTween(this._pt,w?M:I,f,u,(_?(0,d._parseRelative)(u,_+l):l)-u,w||"px"!==g&&"zIndex"!==f||!1===t.autoRound?b:j),this._pt.u=g||0,m!==g&&"%"!==g&&(this._pt.b=i,this._pt.r=x);else if(f in I)J.call(this,e,f,i,_?_+a:a);else if(f in e)this.add(e,f,i||e[f],_?_+a:a,n,s);else if("parseTransform"!==f){(0,d._missingPlugin)(f,a);continue}w||(f in I?O.push(f,0,I[f]):"function"==typeof e[f]?O.push(f,2,e[f]()):O.push(f,1,i||e[f])),F.push(f)}A&&(0,d._sortPropTweensByPriority)(this)},render:function(e,t){if(t.tween._time||!u())for(var r=t._pt;r;)r.r(e,r.d),r=r._next;else t.styles.revert()},get:Z,aliases:y,getSetter:function(e,t,r){var n=y[t];return n&&n.indexOf(",")<0&&(t=n),t in c&&t!==L&&(e._gsap.x||Z(e,"x"))?r&&l===r?"scale"===t?S:O:(l=r||{})&&("scale"===t?C:k):e.style&&!(0,d._isUndefined)(e.style[t])?T:~t.indexOf("-")?A:(0,d._getSetter)(e,t)},core:{_removeProperty:X,_getMatrix:ae}};d.gsap.utils.checkPrefix=B,d.gsap.core.getStyleSaver=D,we="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",xe="rotation,rotationX,rotationY,skewX,skewY",je=(0,d._forEachName)(we+","+xe+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){c[e]=1})),(0,d._forEachName)(xe,(function(e){d._config.units[e]="deg",se[e]=1})),y[je[13]]=we+","+xe,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");y[t[1]]=je[t[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){d._config.units[e]="px"})),d.gsap.registerPlugin(Ee)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{Animation:()=>$t,Back:()=>Xr,Bounce:()=>$r,Circ:()=>Zr,Cubic:()=>Hr,Elastic:()=>Wr,Expo:()=>Kr,GSCache:()=>Yt,Linear:()=>Ur,Power0:()=>Fr,Power1:()=>Ir,Power2:()=>Dr,Power3:()=>zr,Power4:()=>Nr,PropTween:()=>wr,Quad:()=>Br,Quart:()=>qr,Quint:()=>Vr,Sine:()=>Qr,SteppedEase:()=>Yr,Strong:()=>Gr,Timeline:()=>Qt,TimelineLite:()=>Qt,TimelineMax:()=>Qt,Tween:()=>ar,TweenLite:()=>ar,TweenMax:()=>ar,_checkPlugin:()=>tr,_colorExp:()=>Pt,_colorStringFilter:()=>Rt,_config:()=>x,_forEachName:()=>ge,_getCache:()=>fe,_getProperty:()=>me,_getSetter:()=>cr,_isString:()=>P,_isUndefined:()=>F,_missingPlugin:()=>Z,_numExp:()=>q,_numWithUnitExp:()=>V,_parseRelative:()=>ye,_plugins:()=>le,_relExp:()=>W,_removeLinkedListItem:()=>ke,_renderComplexString:()=>mr,_replaceRandom:()=>vt,_round:()=>_e,_roundModifier:()=>ut,_setDefaults:()=>Me,_sortPropTweensByPriority:()=>br,_ticker:()=>Ft,clamp:()=>tt,default:()=>Rr,distribute:()=>lt,getUnit:()=>et,gsap:()=>Rr,interpolate:()=>bt,mapRange:()=>yt,normalize:()=>ft,pipe:()=>ct,random:()=>dt,selector:()=>ot,shuffle:()=>at,snap:()=>ht,splitColor:()=>St,toArray:()=>it,unitize:()=>pt,wrap:()=>gt,wrapYoyo:()=>_t});var i,o,a,l,u,h,d,c,p,f,m,g,_,v,y,b,w,x={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},j={duration:.5,overwrite:!1,delay:0},E=1e8,M=1e-8,T=2*Math.PI,A=T/4,O=0,S=Math.sqrt,C=Math.cos,k=Math.sin,P=function(e){return"string"==typeof e},L=function(e){return"function"==typeof e},R=function(e){return"number"==typeof e},F=function(e){return void 0===e},I=function(e){return"object"==typeof e},D=function(e){return!1!==e},z=function(){return"undefined"!=typeof window},N=function(e){return L(e)||P(e)},U="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},B=Array.isArray,H=/(?:-?\.?\d|\.)+/gi,q=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,G=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,W=/[+-]=-?[.\d]+/,X=/[^,'"\[\]\s]+/gi,Y=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,$={},Q={},K=function(e){return(Q=Te(e,$))&&Rr},Z=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},J=function(e,t){return!t&&console.warn(e)},ee=function(e,t){return e&&($[e]=t)&&Q&&(Q[e]=t)||$},te=function(){return 0},re={suppressEvents:!0,isStart:!0,kill:!1},ne={suppressEvents:!0,kill:!1},se={suppressEvents:!0},ie={},oe=[],ae={},le={},ue={},he=30,de=[],ce="",pe=function(e){var t,r,n=e[0];if(I(n)||L(n)||(e=[e]),!(t=(n._gsap||{}).harness)){for(r=de.length;r--&&!de[r].targetTest(n););t=de[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Yt(e[r],t)))||e.splice(r,1);return e},fe=function(e){return e._gsap||pe(it(e))[0]._gsap},me=function(e,t,r){return(r=e[t])&&L(r)?e[t]():F(r)&&e.getAttribute&&e.getAttribute(t)||r},ge=function(e,t){return(e=e.split(",")).forEach(t)||e},_e=function(e){return Math.round(1e5*e)/1e5||0},ve=function(e){return Math.round(1e7*e)/1e7||0},ye=function(e,t){var r=t.charAt(0),n=parseFloat(t.substr(2));return e=parseFloat(e),"+"===r?e+n:"-"===r?e-n:"*"===r?e*n:e/n},be=function(e,t){for(var r=t.length,n=0;e.indexOf(t[n])<0&&++n<r;);return n<r},we=function(){var e,t,r=oe.length,n=oe.slice(0);for(ae={},oe.length=0,e=0;e<r;e++)(t=n[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},xe=function(e,t,r,n){oe.length&&!o&&we(),e.render(t,r,n||o&&t<0&&(e._initted||e._startAt)),oe.length&&!o&&we()},je=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(X).length<2?t:P(e)?e.trim():e},Ee=function(e){return e},Me=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Te=function(e,t){for(var r in t)e[r]=t[r];return e},Ae=function e(t,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(t[n]=I(r[n])?e(t[n]||(t[n]={}),r[n]):r[n]);return t},Oe=function(e,t){var r,n={};for(r in e)r in t||(n[r]=e[r]);return n},Se=function(e){var t,r=e.parent||l,n=e.keyframes?(t=B(e.keyframes),function(e,r){for(var n in r)n in e||"duration"===n&&t||"ease"===n||(e[n]=r[n])}):Me;if(D(e.inherit))for(;r;)n(e,r.vars.defaults),r=r.parent||r._dp;return e},Ce=function(e,t,r,n,s){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i,o=e[n];if(s)for(i=t[s];o&&o[s]>i;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[n]=t,t._prev=o,t.parent=t._dp=e,t},ke=function(e,t,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var s=t._prev,i=t._next;s?s._next=i:e[r]===t&&(e[r]=i),i?i._prev=s:e[n]===t&&(e[n]=s),t._next=t._prev=t.parent=null},Pe=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Le=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},Re=function(e,t,r,n){return e._startAt&&(o?e._startAt.revert(ne):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,n))},Fe=function e(t){return!t||t._ts&&e(t.parent)},Ie=function(e){return e._repeat?De(e._tTime,e=e.duration()+e._rDelay)*e:0},De=function(e,t){var r=Math.floor(e=ve(e/t));return e&&r===e?r-1:r},ze=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ne=function(e){return e._end=ve(e._start+(e._tDur/Math.abs(e._ts||e._rts||M)||0))},Ue=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=ve(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ne(e),r._dirty||Le(r,e)),e},Be=function(e,t){var r;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(r=ze(e.rawTime(),t),(!t._dur||Je(0,t.totalDuration(),r)-t._tTime>M)&&t.render(r,!0)),Le(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},He=function(e,t,r,n){return t.parent&&Pe(t),t._start=ve((R(r)?r:r||e!==l?Qe(e,r,t):e._time)+t._delay),t._end=ve(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Ce(e,t,"_first","_last",e._sort?"_start":0),We(t)||(e._recent=t),n||Be(e,t),e._ts<0&&Ue(e,e._tTime),e},qe=function(e,t){return($.ScrollTrigger||Z("scrollTrigger",t))&&$.ScrollTrigger.create(t,e)},Ve=function(e,t,r,n,s){return rr(e,t,s),e._initted?!r&&e._pt&&!o&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Ft.frame?(oe.push(e),e._lazy=[s,n],1):void 0:1},Ge=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},We=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Xe=function(e,t,r,n){var s=e._repeat,i=ve(t)||0,o=e._tTime/e._tDur;return o&&!n&&(e._time*=i/e._dur),e._dur=i,e._tDur=s?s<0?1e10:ve(i*(s+1)+e._rDelay*s):i,o>0&&!n&&Ue(e,e._tTime=e._tDur*o),e.parent&&Ne(e),r||Le(e.parent,e),e},Ye=function(e){return e instanceof Qt?Le(e):Xe(e,e._dur)},$e={_start:0,endTime:te,totalDuration:te},Qe=function e(t,r,n){var s,i,o,a=t.labels,l=t._recent||$e,u=t.duration()>=E?l.endTime(!1):t._dur;return P(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),s=r.indexOf("="),"<"===i||">"===i?(s>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(s<0?l:n).totalDuration()/100:1)):s<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(s-1)+r.substr(s+1)),o&&n&&(i=i/100*(B(n)?n[0]:n).totalDuration()),s>1?e(t,r.substr(0,s-1),n)+i:u+i)):null==r?u:+r},Ke=function(e,t,r){var n,s,i=R(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=r,e){for(n=a,s=r;s&&!("immediateRender"in n);)n=s.vars.defaults||{},s=D(s.vars.inherit)&&s.parent;a.immediateRender=D(n.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new ar(t[0],a,t[o+1])},Ze=function(e,t){return e||0===e?t(e):t},Je=function(e,t,r){return r<e?e:r>t?t:r},et=function(e,t){return P(e)&&(t=Y.exec(e))?t[1]:""},tt=function(e,t,r){return Ze(r,(function(r){return Je(e,t,r)}))},rt=[].slice,nt=function(e,t){return e&&I(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&I(e[0]))&&!e.nodeType&&e!==u},st=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var n;return P(e)&&!t||nt(e,1)?(n=r).push.apply(n,it(e)):r.push(e)}))||r},it=function(e,t,r){return a&&!t&&a.selector?a.selector(e):!P(e)||r||!h&&It()?B(e)?st(e,r):nt(e)?rt.call(e,0):e?[e]:[]:rt.call((t||d).querySelectorAll(e),0)},ot=function(e){return e=it(e)[0]||J("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return it(t,r.querySelectorAll?r:r===e?J("Invalid scope")||d.createElement("div"):e)}},at=function(e){return e.sort((function(){return.5-Math.random()}))},lt=function(e){if(L(e))return e;var t=I(e)?e:{each:e},r=qt(t.ease),n=t.from||0,s=parseFloat(t.base)||0,i={},o=n>0&&n<1,a=isNaN(n)||o,l=t.axis,u=n,h=n;return P(n)?u=h={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(u=n[0],h=n[1]),function(e,o,d){var c,p,f,m,g,_,v,y,b,w=(d||t).length,x=i[w];if(!x){if(!(b="auto"===t.grid?0:(t.grid||[1,E])[1])){for(v=-E;v<(v=d[b++].getBoundingClientRect().left)&&b<w;);b<w&&b--}for(x=i[w]=[],c=a?Math.min(b,w)*u-.5:n%b,p=b===E?0:a?w*h/b-.5:n/b|0,v=0,y=E,_=0;_<w;_++)f=_%b-c,m=p-(_/b|0),x[_]=g=l?Math.abs("y"===l?m:f):S(f*f+m*m),g>v&&(v=g),g<y&&(y=g);"random"===n&&at(x),x.max=v-y,x.min=y,x.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===n?-1:1),x.b=w<0?s-w:s,x.u=et(t.amount||t.each)||0,r=r&&w<0?Bt(r):r}return w=(x[e]-x.min)/x.max||0,ve(x.b+(r?r(w):w)*x.v)+x.u}},ut=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(r){var n=ve(Math.round(parseFloat(r)/e)*e*t);return(n-n%1)/t+(R(r)?0:et(r))}},ht=function(e,t){var r,n,s=B(e);return!s&&I(e)&&(r=s=e.radius||E,e.values?(e=it(e.values),(n=!R(e[0]))&&(r*=r)):e=ut(e.increment)),Ze(t,s?L(e)?function(t){return n=e(t),Math.abs(n-t)<=r?n:t}:function(t){for(var s,i,o=parseFloat(n?t.x:t),a=parseFloat(n?t.y:0),l=E,u=0,h=e.length;h--;)(s=n?(s=e[h].x-o)*s+(i=e[h].y-a)*i:Math.abs(e[h]-o))<l&&(l=s,u=h);return u=!r||l<=r?e[u]:t,n||u===t||R(t)?u:u+et(t)}:ut(e))},dt=function(e,t,r,n){return Ze(B(e)?!t:!0===r?!!(r=0):!n,(function(){return B(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*n)/n}))},ct=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},pt=function(e,t){return function(r){return e(parseFloat(r))+(t||et(r))}},ft=function(e,t,r){return yt(e,t,0,1,r)},mt=function(e,t,r){return Ze(r,(function(r){return e[~~t(r)]}))},gt=function e(t,r,n){var s=r-t;return B(t)?mt(t,e(0,t.length),r):Ze(n,(function(e){return(s+(e-t)%s)%s+t}))},_t=function e(t,r,n){var s=r-t,i=2*s;return B(t)?mt(t,e(0,t.length-1),r):Ze(n,(function(e){return t+((e=(i+(e-t)%i)%i||0)>s?i-e:e)}))},vt=function(e){for(var t,r,n,s,i=0,o="";~(t=e.indexOf("random(",i));)n=e.indexOf(")",t),s="["===e.charAt(t+7),r=e.substr(t+7,n-t-7).match(s?X:H),o+=e.substr(i,t-i)+dt(s?r:+r[0],s?0:+r[1],+r[2]||1e-5),i=n+1;return o+e.substr(i,e.length-i)},yt=function(e,t,r,n,s){var i=t-e,o=n-r;return Ze(s,(function(t){return r+((t-e)/i*o||0)}))},bt=function e(t,r,n,s){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,h,d=P(t),c={};if(!0===n&&(s=1)&&(n=null),d)t={p:t},r={p:r};else if(B(t)&&!B(r)){for(l=[],u=t.length,h=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(h,~~e);return l[t](e-t)},n=r}else s||(t=Te(B(t)?[]:{},t));if(!l){for(o in r)er.call(c,t,o,"get",r[o]);i=function(e){return gr(e,c)||(d?t.p:t)}}}return Ze(n,i)},wt=function(e,t,r){var n,s,i,o=e.labels,a=E;for(n in o)(s=o[n]-t)<0==!!r&&s&&a>(s=Math.abs(s))&&(i=n,a=s);return i},xt=function(e,t,r){var n,s,i,o=e.vars,l=o[t],u=a,h=e._ctx;if(l)return n=o[t+"Params"],s=o.callbackScope||e,r&&oe.length&&we(),h&&(a=h),i=n?l.apply(s,n):l.call(s),a=u,i},jt=function(e){return Pe(e),e.scrollTrigger&&e.scrollTrigger.kill(!!o),e.progress()<1&&xt(e,"onInterrupt"),e},Et=[],Mt=function(e){if(e)if(e=!e.name&&e.default||e,z()||e.headless){var t=e.name,r=L(e),n=t&&!r&&e.init?function(){this._props=[]}:e,s={init:te,render:gr,add:er,kill:vr,modifier:_r,rawVars:0},i={targetTest:0,get:0,getSetter:cr,aliases:{},register:0};if(It(),e!==n){if(le[t])return;Me(n,Me(Oe(e,s),i)),Te(n.prototype,Te(s,Oe(e,i))),le[n.prop=t]=n,e.targetTest&&(de.push(n),ie[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ee(t,n),e.register&&e.register(Rr,n,wr)}else Et.push(e)},Tt=255,At={aqua:[0,Tt,Tt],lime:[0,Tt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Tt],navy:[0,0,128],white:[Tt,Tt,Tt],olive:[128,128,0],yellow:[Tt,Tt,0],orange:[Tt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Tt,0,0],pink:[Tt,192,203],cyan:[0,Tt,Tt],transparent:[Tt,Tt,Tt,0]},Ot=function(e,t,r){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*Tt+.5|0},St=function(e,t,r){var n,s,i,o,a,l,u,h,d,c,p=e?R(e)?[e>>16,e>>8&Tt,e&Tt]:0:At.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),At[e])p=At[e];else if("#"===e.charAt(0)){if(e.length<6&&(n=e.charAt(1),s=e.charAt(2),i=e.charAt(3),e="#"+n+n+s+s+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Tt,p&Tt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Tt,e&Tt]}else if("hsl"===e.substr(0,3))if(p=c=e.match(H),t){if(~e.indexOf("="))return p=e.match(q),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Ot(o+1/3,n,s),p[1]=Ot(o,n,s),p[2]=Ot(o-1/3,n,s);else p=e.match(H)||At.transparent;p=p.map(Number)}return t&&!c&&(n=p[0]/Tt,s=p[1]/Tt,i=p[2]/Tt,l=((u=Math.max(n,s,i))+(h=Math.min(n,s,i)))/2,u===h?o=a=0:(d=u-h,a=l>.5?d/(2-u-h):d/(u+h),o=u===n?(s-i)/d+(s<i?6:0):u===s?(i-n)/d+2:(n-s)/d+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Ct=function(e){var t=[],r=[],n=-1;return e.split(Pt).forEach((function(e){var s=e.match(V)||[];t.push.apply(t,s),r.push(n+=s.length+1)})),t.c=r,t},kt=function(e,t,r){var n,s,i,o,a="",l=(e+a).match(Pt),u=t?"hsla(":"rgba(",h=0;if(!l)return e;if(l=l.map((function(e){return(e=St(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Ct(e),(n=r.c).join(a)!==i.c.join(a)))for(o=(s=e.replace(Pt,"1").split(V)).length-1;h<o;h++)a+=s[h]+(~n.indexOf(h)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!s)for(o=(s=e.split(Pt)).length-1;h<o;h++)a+=s[h]+l[h];return a+s[o]},Pt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in At)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Lt=/hsl[a]?\(/,Rt=function(e){var t,r=e.join(" ");if(Pt.lastIndex=0,Pt.test(r))return t=Lt.test(r),e[1]=kt(e[1],t),e[0]=kt(e[0],t,Ct(e[1])),!0},Ft=function(){var e,t,r,n,s,i,o=Date.now,a=500,l=33,p=o(),f=p,g=1e3/240,_=g,v=[],y=function r(u){var h,d,c,m,y=o()-f,b=!0===u;if((y>a||y<0)&&(p+=y-l),((h=(c=(f+=y)-p)-_)>0||b)&&(m=++n.frame,s=c-1e3*n.time,n.time=c/=1e3,_+=h+(h>=g?4:g-h),d=1),b||(e=t(r)),d)for(i=0;i<v.length;i++)v[i](c,s,m,u)};return n={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(e){return s/(1e3/(e||60))},wake:function(){c&&(!h&&z()&&(u=h=window,d=u.document||{},$.gsap=Rr,(u.gsapVersions||(u.gsapVersions=[])).push(Rr.version),K(Q||u.GreenSockGlobals||!u.gsap&&u||{}),Et.forEach(Mt)),r="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&n.sleep(),t=r||function(e){return setTimeout(e,_-1e3*n.time+1|0)},m=1,y(2))},sleep:function(){(r?cancelAnimationFrame:clearTimeout)(e),m=0,t=te},lagSmoothing:function(e,t){a=e||1/0,l=Math.min(t||33,a)},fps:function(e){g=1e3/(e||240),_=1e3*n.time+g},add:function(e,t,r){var s=t?function(t,r,i,o){e(t,r,i,o),n.remove(s)}:e;return n.remove(e),v[r?"unshift":"push"](s),It(),s},remove:function(e,t){~(t=v.indexOf(e))&&v.splice(t,1)&&i>=t&&i--},_listeners:v}}(),It=function(){return!m&&Ft.wake()},Dt={},zt=/^[\d.\-M][\d.\-,\s]/,Nt=/["']/g,Ut=function(e){for(var t,r,n,s={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,t),s[o]=isNaN(n)?n.replace(Nt,"").trim():+n,o=r.substr(t+1).trim();return s},Bt=function(e){return function(t){return 1-e(1-t)}},Ht=function e(t,r){for(var n,s=t._first;s;)s instanceof Qt?e(s,r):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===r||(s.timeline?e(s.timeline,r):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=r)),s=s._next},qt=function(e,t){return e&&(L(e)?e:Dt[e]||function(e){var t,r,n,s,i=(e+"").split("("),o=Dt[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Ut(i[1])]:(t=e,r=t.indexOf("(")+1,n=t.indexOf(")"),s=t.indexOf("(",r),t.substring(r,~s&&s<n?t.indexOf(")",n+1):n)).split(",").map(je)):Dt._CE&&zt.test(e)?Dt._CE("",e):o}(e))||t},Vt=function(e,t,r,n){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===n&&(n=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var s,i={easeIn:t,easeOut:r,easeInOut:n};return ge(e,(function(e){for(var t in Dt[e]=$[e]=i,Dt[s=e.toLowerCase()]=r,i)Dt[s+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Dt[e+"."+t]=i[t]})),i},Gt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Wt=function e(t,r,n){var s=r>=1?r:1,i=(n||(t?.3:.45))/(r<1?r:1),o=i/T*(Math.asin(1/s)||0),a=function(e){return 1===e?1:s*Math.pow(2,-10*e)*k((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Gt(a);return i=T/i,l.config=function(r,n){return e(t,r,n)},l},Xt=function e(t,r){void 0===r&&(r=1.70158);var n=function(e){return e?--e*e*((r+1)*e+r)+1:0},s="out"===t?n:"in"===t?function(e){return 1-n(1-e)}:Gt(n);return s.config=function(r){return e(t,r)},s};ge("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Vt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),Dt.Linear.easeNone=Dt.none=Dt.Linear.easeIn,Vt("Elastic",Wt("in"),Wt("out"),Wt()),g=7.5625,y=2*(v=1/(_=2.75)),b=2.5*v,Vt("Bounce",(function(e){return 1-w(1-e)}),w=function(e){return e<v?g*e*e:e<y?g*Math.pow(e-1.5/_,2)+.75:e<b?g*(e-=2.25/_)*e+.9375:g*Math.pow(e-2.625/_,2)+.984375}),Vt("Expo",(function(e){return Math.pow(2,10*(e-1))*e+e*e*e*e*e*e*(1-e)})),Vt("Circ",(function(e){return-(S(1-e*e)-1)})),Vt("Sine",(function(e){return 1===e?1:1-C(e*A)})),Vt("Back",Xt("in"),Xt("out"),Xt()),Dt.SteppedEase=Dt.steps=$.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,n=e+(t?0:1),s=t?1:0;return function(e){return((n*Je(0,.99999999,e)|0)+s)*r}}},j.ease=Dt["quad.out"],ge("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return ce+=e+","+e+"Params,"}));var Yt=function(e,t){this.id=O++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:me,this.set=t?t.getSetter:cr},$t=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Xe(this,+e.duration,1,1),this.data=e.data,a&&(this._ctx=a,a.data.push(this)),m||Ft.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Xe(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(It(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Ue(this,e),!r._dp||r.parent||Be(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&He(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===M||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),xe(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ie(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ie(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?De(this._tTime,r)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var r=this.parent&&this._ts?ze(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Je(-Math.abs(this._delay),this._tDur,r),!1!==t),Ne(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(It(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==M&&(this._tTime-=M)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&He(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(D(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?ze(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=se);var t=o;return o=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),o=t,this},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Ye(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Ye(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Qe(this,e),D(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,D(t)),this._dur||(this._zTime=-1e-8),this},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-M))},t.eventCallback=function(e,t,r){var n=this.vars;return arguments.length>1?(t?(n[e]=t,r&&(n[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete n[e],this):n[e]},t.then=function(e){var t=this;return new Promise((function(r){var n=L(e)?e:Ee,s=function(){var e=t.then;t.then=null,L(n)&&(n=n(t))&&(n.then||n===t)&&(t.then=e),r(n),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?s():t._prom=s}))},t.kill=function(){jt(this)},e}();Me($t.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Qt=function(e){function t(t,r){var s;return void 0===t&&(t={}),(s=e.call(this,t)||this).labels={},s.smoothChildTiming=!!t.smoothChildTiming,s.autoRemoveChildren=!!t.autoRemoveChildren,s._sort=D(t.sortChildren),l&&He(t.parent||l,n(s),r),t.reversed&&s.reverse(),t.paused&&s.paused(!0),t.scrollTrigger&&qe(n(s),t.scrollTrigger),s}s(t,e);var r=t.prototype;return r.to=function(e,t,r){return Ke(0,arguments,this),this},r.from=function(e,t,r){return Ke(1,arguments,this),this},r.fromTo=function(e,t,r,n){return Ke(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Se(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new ar(e,t,Qe(this,r),1),this},r.call=function(e,t,r){return He(this,ar.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,n,s,i,o){return r.duration=t,r.stagger=r.stagger||n,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new ar(e,r,Qe(this,s)),this},r.staggerFrom=function(e,t,r,n,s,i,o){return r.runBackwards=1,Se(r).immediateRender=D(r.immediateRender),this.staggerTo(e,t,r,n,s,i,o)},r.staggerFromTo=function(e,t,r,n,s,i,o,a){return n.startAt=r,Se(n).immediateRender=D(n.immediateRender),this.staggerTo(e,t,n,s,i,o,a)},r.render=function(e,t,r){var n,s,i,a,u,h,d,c,p,f,m,g,_=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=e<=0?0:ve(e),w=this._zTime<0!=e<0&&(this._initted||!y);if(this!==l&&b>v&&e>=0&&(b=v),b!==this._tTime||r||w){if(_!==this._time&&y&&(b+=this._time-_,e+=this._time-_),n=b,p=this._start,h=!(c=this._ts),w&&(y||(_=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(m=this._yoyo,u=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*u+e,t,r);if(n=ve(b%u),b===v?(a=this._repeat,n=y):((a=~~(f=ve(b/u)))&&a===f&&(n=y,a--),n>y&&(n=y)),f=De(this._tTime,u),!_&&this._tTime&&f!==a&&this._tTime-f*u-this._dur<=0&&(f=a),m&&1&a&&(n=y-n,g=1),a!==f&&!this._lock){var x=m&&1&f,j=x===(m&&1&a);if(a<f&&(x=!x),_=x?0:b%y?y:b,this._lock=1,this.render(_||(g?0:ve(a*u)),t,!y)._lock=0,this._tTime=b,!t&&this.parent&&xt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),_&&_!==this._time||h!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,j&&(this._lock=2,_=x?y:-1e-4,this.render(_,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!h)return this;Ht(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(e,t,r){var n;if(r>t)for(n=e._first;n&&n._start<=r;){if("isPause"===n.data&&n._start>t)return n;n=n._next}else for(n=e._last;n&&n._start>=r;){if("isPause"===n.data&&n._start<t)return n;n=n._prev}}(this,ve(_),ve(n)),d&&(b-=n-(n=d._start))),this._tTime=b,this._time=n,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,_=0),!_&&n&&!t&&!a&&(xt(this,"onStart"),this._tTime!==b))return this;if(n>=_&&e>=0)for(s=this._first;s;){if(i=s._next,(s._act||n>=s._start)&&s._ts&&d!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!h){d=0,i&&(b+=this._zTime=-1e-8);break}}s=i}else{s=this._last;for(var E=e<0?e:n;s;){if(i=s._prev,(s._act||E<=s._end)&&s._ts&&d!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(E-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(E-s._start)*s._ts,t,r||o&&(s._initted||s._startAt)),n!==this._time||!this._ts&&!h){d=0,i&&(b+=this._zTime=E?-1e-8:M);break}}s=i}}if(d&&!t&&(this.pause(),d.render(n>=_?0:-1e-8)._zTime=n>=_?1:-1,this._ts))return this._start=p,Ne(this),this.render(e,t,r);this._onUpdate&&!t&&xt(this,"onUpdate",!0),(b===v&&this._tTime>=this.totalDuration()||!b&&_)&&(p!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!y)&&(b===v&&this._ts>0||!b&&this._ts<0)&&Pe(this,1),t||e<0&&!_||!b&&!_&&v||(xt(this,b===v&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(R(t)||(t=Qe(this,t,e)),!(e instanceof $t)){if(B(e))return e.forEach((function(e){return r.add(e,t)})),this;if(P(e))return this.addLabel(e,t);if(!L(e))return this;e=ar.delayedCall(0,e)}return this!==e?He(this,e,t):this},r.getChildren=function(e,t,r,n){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===n&&(n=-E);for(var s=[],i=this._first;i;)i._start>=n&&(i instanceof ar?t&&s.push(i):(r&&s.push(i),e&&s.push.apply(s,i.getChildren(!0,t,r)))),i=i._next;return s},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return P(e)?this.removeLabel(e):L(e)?this.killTweensOf(e):(e.parent===this&&ke(this,e),e===this._recent&&(this._recent=this._last),Le(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ve(Ft.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=Qe(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var n=ar.delayedCall(0,t||te,r);return n.data="isPause",this._hasPause=1,He(this,n,Qe(this,e))},r.removePause=function(e){var t=this._first;for(e=Qe(this,e);t;)t._start===e&&"isPause"===t.data&&Pe(t),t=t._next},r.killTweensOf=function(e,t,r){for(var n=this.getTweensOf(e,r),s=n.length;s--;)Kt!==n[s]&&n[s].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,n=[],s=it(e),i=this._first,o=R(t);i;)i instanceof ar?be(i._targets,s)&&(o?(!Kt||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&n.push(i):(r=i.getTweensOf(s,t)).length&&n.push.apply(n,r),i=i._next;return n},r.tweenTo=function(e,t){t=t||{};var r,n=this,s=Qe(n,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,h=ar.to(n,Me({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:s,overwrite:"auto",duration:t.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale())||M,onStart:function(){if(n.pause(),!r){var e=t.duration||Math.abs((s-(o&&"time"in o?o.time:n._time))/n.timeScale());h._dur!==e&&Xe(h,e,0,1).render(h._time,!0,!0),r=1}a&&a.apply(h,l||[])}},t));return u?h.render(0):h},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Me({startAt:{time:Qe(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),wt(this,Qe(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),wt(this,Qe(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+M)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var n,s=this._first,i=this.labels;s;)s._start>=r&&(s._start+=e,s._end+=e),s=s._next;if(t)for(n in i)i[n]>=r&&(i[n]+=e);return Le(this)},r.invalidate=function(t){var r=this._first;for(this._lock=0;r;)r.invalidate(t),r=r._next;return e.prototype.invalidate.call(this,t)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Le(this)},r.totalDuration=function(e){var t,r,n,s=0,i=this,o=i._last,a=E;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(n=i.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(r=o._start)>a&&i._sort&&o._ts&&!i._lock?(i._lock=1,He(i,o,r-o._delay,1)._lock=0):a=r,r<0&&o._ts&&(s-=r,(!n&&!i._dp||n&&n.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),a=0),o._end>s&&o._ts&&(s=o._end),o=t;Xe(i,i===l&&i._time>s?i._time:s,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(l._ts&&(xe(l,ze(e,l)),p=Ft.frame),Ft.frame>=he){he+=x.autoSleep||120;var t=l._first;if((!t||!t._ts)&&x.autoSleep&&Ft._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Ft.sleep()}}},t}($t);Me(Qt.prototype,{_lock:0,_hasPause:0,_forcing:0});var Kt,Zt,Jt=function(e,t,r,n,s,i,o){var a,l,u,h,d,c,p,f,m=new wr(this._pt,e,t,0,1,mr,null,s),g=0,_=0;for(m.b=r,m.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=vt(n)),i&&(i(f=[r,n],e,t),r=f[0],n=f[1]),l=r.match(G)||[];a=G.exec(n);)h=a[0],d=n.substring(g,a.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),h!==l[_++]&&(c=parseFloat(l[_-1])||0,m._pt={_next:m._pt,p:d||1===_?d:",",s:c,c:"="===h.charAt(1)?ye(c,h)-c:parseFloat(h)-c,m:u&&u<4?Math.round:0},g=G.lastIndex);return m.c=g<n.length?n.substring(g,n.length):"",m.fp=o,(W.test(n)||p)&&(m.e=0),this._pt=m,m},er=function(e,t,r,n,s,i,o,a,l,u){L(n)&&(n=n(s||0,e,i));var h,d=e[t],c="get"!==r?r:L(d)?l?e[t.indexOf("set")||!L(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():d,p=L(d)?l?hr:ur:lr;if(P(n)&&(~n.indexOf("random(")&&(n=vt(n)),"="===n.charAt(1)&&((h=ye(c,n)+(et(c)||0))||0===h)&&(n=h)),!u||c!==n||Zt)return isNaN(c*n)||""===n?(!d&&!(t in e)&&Z(t,n),Jt.call(this,e,t,c,n,p,a||x.stringFilter,l)):(h=new wr(this._pt,e,t,+c||0,n-(c||0),"boolean"==typeof d?fr:pr,0,p),l&&(h.fp=l),o&&h.modifier(o,this,e),this._pt=h)},tr=function(e,t,r,n,s,i){var o,a,l,u;if(le[e]&&!1!==(o=new le[e]).init(s,o.rawVars?t[e]:function(e,t,r,n,s){if(L(e)&&(e=sr(e,s,t,r,n)),!I(e)||e.style&&e.nodeType||B(e)||U(e))return P(e)?sr(e,s,t,r,n):e;var i,o={};for(i in e)o[i]=sr(e[i],s,t,r,n);return o}(t[e],n,s,i,r),r,n,i)&&(r._pt=a=new wr(r._pt,s,e,0,1,o.render,o,0,o.priority),r!==f))for(l=r._ptLookup[r._targets.indexOf(s)],u=o._props.length;u--;)l[o._props[u]]=a;return o},rr=function e(t,r,n){var s,a,u,h,d,c,p,f,m,g,_,v,y,b=t.vars,w=b.ease,x=b.startAt,T=b.immediateRender,A=b.lazy,O=b.onUpdate,S=b.runBackwards,C=b.yoyoEase,k=b.keyframes,P=b.autoRevert,L=t._dur,R=t._startAt,F=t._targets,I=t.parent,z=I&&"nested"===I.data?I.vars.targets:F,N="auto"===t._overwrite&&!i,U=t.timeline;if(U&&(!k||!w)&&(w="none"),t._ease=qt(w,j.ease),t._yEase=C?Bt(qt(!0===C?w:C,j.ease)):0,C&&t._yoyo&&!t._repeat&&(C=t._yEase,t._yEase=t._ease,t._ease=C),t._from=!U&&!!b.runBackwards,!U||k&&!b.stagger){if(v=(f=F[0]?fe(F[0]).harness:0)&&b[f.prop],s=Oe(b,ie),R&&(R._zTime<0&&R.progress(1),r<0&&S&&T&&!P?R.render(-1,!0):R.revert(S&&L?ne:re),R._lazy=0),x){if(Pe(t._startAt=ar.set(F,Me({data:"isStart",overwrite:!1,parent:I,immediateRender:!0,lazy:!R&&D(A),startAt:null,delay:0,onUpdate:O&&function(){return xt(t,"onUpdate")},stagger:0},x))),t._startAt._dp=0,t._startAt._sat=t,r<0&&(o||!T&&!P)&&t._startAt.revert(ne),T&&L&&r<=0&&n<=0)return void(r&&(t._zTime=r))}else if(S&&L&&!R)if(r&&(T=!1),u=Me({overwrite:!1,data:"isFromStart",lazy:T&&!R&&D(A),immediateRender:T,stagger:0,parent:I},s),v&&(u[f.prop]=v),Pe(t._startAt=ar.set(F,u)),t._startAt._dp=0,t._startAt._sat=t,r<0&&(o?t._startAt.revert(ne):t._startAt.render(-1,!0)),t._zTime=r,T){if(!r)return}else e(t._startAt,M,M);for(t._pt=t._ptCache=0,A=L&&D(A)||A&&!L,a=0;a<F.length;a++){if(p=(d=F[a])._gsap||pe(F)[a]._gsap,t._ptLookup[a]=g={},ae[p.id]&&oe.length&&we(),_=z===F?a:z.indexOf(d),f&&!1!==(m=new f).init(d,v||s,t,_,z)&&(t._pt=h=new wr(t._pt,d,m.name,0,1,m.render,m,0,m.priority),m._props.forEach((function(e){g[e]=h})),m.priority&&(c=1)),!f||v)for(u in s)le[u]&&(m=tr(u,s,t,_,d,z))?m.priority&&(c=1):g[u]=h=er.call(t,d,u,"get",s[u],_,z,0,b.stringFilter);t._op&&t._op[a]&&t.kill(d,t._op[a]),N&&t._pt&&(Kt=t,l.killTweensOf(d,g,t.globalTime(r)),y=!t.parent,Kt=0),t._pt&&A&&(ae[p.id]=1)}c&&br(t),t._onInit&&t._onInit(t)}t._onUpdate=O,t._initted=(!t._op||t._pt)&&!y,k&&r<=0&&U.render(E,!0,!0)},nr=function(e,t,r,n){var s,i,o=t.ease||n||"power1.inOut";if(B(t))i=r[e]||(r[e]=[]),t.forEach((function(e,r){return i.push({t:r/(t.length-1)*100,v:e,e:o})}));else for(s in t)i=r[s]||(r[s]=[]),"ease"===s||i.push({t:parseFloat(e),v:t[s],e:o})},sr=function(e,t,r,n,s){return L(e)?e.call(t,r,n,s):P(e)&&~e.indexOf("random(")?vt(e):e},ir=ce+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",or={};ge(ir+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return or[e]=1}));var ar=function(e){function t(t,r,s,o){var a;"number"==typeof r&&(s.duration=r,r=s,s=null);var u,h,d,c,p,f,m,g,_=(a=e.call(this,o?r:Se(r))||this).vars,v=_.duration,y=_.delay,b=_.immediateRender,w=_.stagger,j=_.overwrite,E=_.keyframes,M=_.defaults,T=_.scrollTrigger,A=_.yoyoEase,O=r.parent||l,S=(B(t)||U(t)?R(t[0]):"length"in r)?[t]:it(t);if(a._targets=S.length?pe(S):J("GSAP target "+t+" not found. https://gsap.com",!x.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=j,E||w||N(v)||N(y)){if(r=a.vars,(u=a.timeline=new Qt({data:"nested",defaults:M||{},targets:O&&"nested"===O.data?O.vars.targets:S})).kill(),u.parent=u._dp=n(a),u._start=0,w||N(v)||N(y)){if(c=S.length,m=w&&lt(w),I(w))for(p in w)~ir.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(h=0;h<c;h++)(d=Oe(r,or)).stagger=0,A&&(d.yoyoEase=A),g&&Te(d,g),f=S[h],d.duration=+sr(v,n(a),h,f,S),d.delay=(+sr(y,n(a),h,f,S)||0)-a._delay,!w&&1===c&&d.delay&&(a._delay=y=d.delay,a._start+=y,d.delay=0),u.to(f,d,m?m(h,f,S):0),u._ease=Dt.none;u.duration()?v=y=0:a.timeline=0}else if(E){Se(Me(u.vars.defaults,{ease:"none"})),u._ease=qt(E.ease||r.ease||"none");var C,k,P,L=0;if(B(E))E.forEach((function(e){return u.to(S,e,">")})),u.duration();else{for(p in d={},E)"ease"===p||"easeEach"===p||nr(p,E[p],d,E.easeEach);for(p in d)for(C=d[p].sort((function(e,t){return e.t-t.t})),L=0,h=0;h<C.length;h++)(P={ease:(k=C[h]).e,duration:(k.t-(h?C[h-1].t:0))/100*v})[p]=k.v,u.to(S,P,L),L+=P.duration;u.duration()<v&&u.to({},{duration:v-u.duration()})}}v||a.duration(v=u.duration())}else a.timeline=0;return!0!==j||i||(Kt=n(a),l.killTweensOf(S),Kt=0),He(O,n(a),s),r.reversed&&a.reverse(),r.paused&&a.paused(!0),(b||!v&&!E&&a._start===ve(O._time)&&D(b)&&Fe(n(a))&&"nested"!==O.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y)||0)),T&&qe(n(a),T),a}s(t,e);var r=t.prototype;return r.render=function(e,t,r){var n,s,i,a,l,u,h,d,c,p=this._time,f=this._tDur,m=this._dur,g=e<0,_=e>f-M&&!g?f:e<M?0:e;if(m){if(_!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g||this._lazy){if(n=_,d=this.timeline,this._repeat){if(a=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*a+e,t,r);if(n=ve(_%a),_===f?(i=this._repeat,n=m):(i=~~(l=ve(_/a)))&&i===l?(n=m,i--):n>m&&(n=m),(u=this._yoyo&&1&i)&&(c=this._yEase,n=m-n),l=De(this._tTime,a),n===p&&!r&&this._initted&&i===l)return this._tTime=_,this;i!==l&&(d&&this._yEase&&Ht(d,u),this.vars.repeatRefresh&&!u&&!this._lock&&n!==a&&this._initted&&(this._lock=r=1,this.render(ve(a*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ve(this,g?e:n,r,t,_))return this._tTime=0,this;if(!(p===this._time||r&&this.vars.repeatRefresh&&i!==l))return this;if(m!==this._dur)return this.render(e,t,r)}if(this._tTime=_,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(c||this._ease)(n/m),this._from&&(this.ratio=h=1-h),n&&!p&&!t&&!i&&(xt(this,"onStart"),this._tTime!==_))return this;for(s=this._pt;s;)s.r(h,s.d),s=s._next;d&&d.render(e<0?e:d._dur*d._ease(n/this._dur),t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&Re(this,e,0,r),xt(this,"onUpdate")),this._repeat&&i!==l&&this.vars.onRepeat&&!t&&this.parent&&xt(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(g&&!this._onUpdate&&Re(this,e,0,!0),(e||!m)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&Pe(this,1),t||g&&!p||!(_||p||u)||(xt(this,_===f?"onComplete":"onReverseComplete",!0),this._prom&&!(_<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,n){var s,i,a,l=e.ratio,u=t<0||!t&&(!e._start&&Ge(e)&&(e._initted||!We(e))||(e._ts<0||e._dp._ts<0)&&!We(e))?0:1,h=e._rDelay,d=0;if(h&&e._repeat&&(d=Je(0,e._tDur,t),i=De(d,h),e._yoyo&&1&i&&(u=1-u),i!==De(e._tTime,h)&&(l=1-u,e.vars.repeatRefresh&&e._initted&&e.invalidate())),u!==l||o||n||e._zTime===M||!t&&e._zTime){if(!e._initted&&Ve(e,t,n,r,d))return;for(a=e._zTime,e._zTime=t||(r?M:0),r||(r=t&&!a),e.ratio=u,e._from&&(u=1-u),e._time=0,e._tTime=d,s=e._pt;s;)s.r(u,s.d),s=s._next;t<0&&Re(e,t,0,!0),e._onUpdate&&!r&&xt(e,"onUpdate"),d&&e._repeat&&!r&&e.parent&&xt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===u&&(u&&Pe(e,1),r||o||(xt(e,u?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},r.resetTo=function(e,t,r,n,s){m||Ft.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||rr(this,i),function(e,t,r,n,s,i,o,a){var l,u,h,d,c=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!c)for(c=e._ptCache[t]=[],h=e._ptLookup,d=e._targets.length;d--;){if((l=h[d][t])&&l.d&&l.d._pt)for(l=l.d._pt;l&&l.p!==t&&l.fp!==t;)l=l._next;if(!l)return Zt=1,e.vars[t]="+=0",rr(e,o),Zt=0,a?J(t+" not eligible for reset"):1;c.push(l)}for(d=c.length;d--;)(l=(u=c[d])._pt||u).s=!n&&0!==n||s?l.s+(n||0)+i*l.c:n,l.c=r-l.s,u.e&&(u.e=_e(r)+et(u.e)),u.b&&(u.b=l.s+et(u.b))}(this,e,t,r,n,this._ease(i/this._dur),i,s)?this.resetTo(e,t,r,n,1):(Ue(this,0),this.parent||Ce(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?jt(this):this.scrollTrigger&&this.scrollTrigger.kill(!!o),this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Kt&&!0!==Kt.vars.overwrite)._first||jt(this),this.parent&&r!==this.timeline.totalDuration()&&Xe(this,this._dur*this.timeline._tDur/r,0,1),this}var n,s,i,a,l,u,h,d=this._targets,c=e?it(e):d,p=this._ptLookup,f=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,n=r===t.length;n&&r--&&e[r]===t[r];);return r<0}(d,c))return"all"===t&&(this._pt=0),jt(this);for(n=this._op=this._op||[],"all"!==t&&(P(t)&&(l={},ge(t,(function(e){return l[e]=1})),t=l),t=function(e,t){var r,n,s,i,o=e[0]?fe(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(n in r=Te({},t),a)if(n in r)for(s=(i=a[n].split(",")).length;s--;)r[i[s]]=r[n];return r}(d,t)),h=d.length;h--;)if(~c.indexOf(d[h]))for(l in s=p[h],"all"===t?(n[h]=t,a=s,i={}):(i=n[h]=n[h]||{},a=t),a)(u=s&&s[l])&&("kill"in u.d&&!0!==u.d.kill(l)||ke(this,u,"_pt"),delete s[l]),"all"!==i&&(i[l]=1);return this._initted&&!this._pt&&f&&jt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return Ke(1,arguments)},t.delayedCall=function(e,r,n,s){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:s})},t.fromTo=function(e,t,r){return Ke(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return l.killTweensOf(e,t,r)},t}($t);Me(ar.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ge("staggerTo,staggerFrom,staggerFromTo",(function(e){ar[e]=function(){var t=new Qt,r=rt.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var lr=function(e,t,r){return e[t]=r},ur=function(e,t,r){return e[t](r)},hr=function(e,t,r,n){return e[t](n.fp,r)},dr=function(e,t,r){return e.setAttribute(t,r)},cr=function(e,t){return L(e[t])?ur:F(e[t])&&e.setAttribute?dr:lr},pr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},fr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},mr=function(e,t){var r=t._pt,n="";if(!e&&t.b)n=t.b;else if(1===e&&t.e)n=t.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+n,r=r._next;n+=t.c}t.set(t.t,t.p,n,t)},gr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},_r=function(e,t,r,n){for(var s,i=this._pt;i;)s=i._next,i.p===n&&i.modifier(e,t,r),i=s},vr=function(e){for(var t,r,n=this._pt;n;)r=n._next,n.p===e&&!n.op||n.op===e?ke(this,n,"_pt"):n.dep||(t=1),n=r;return!t},yr=function(e,t,r,n){n.mSet(e,t,n.m.call(n.tween,r,n.mt),n)},br=function(e){for(var t,r,n,s,i=e._pt;i;){for(t=i._next,r=n;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:s)?i._prev._next=i:n=i,(i._next=r)?r._prev=i:s=i,i=t}e._pt=n},wr=function(){function e(e,t,r,n,s,i,o,a,l){this.t=t,this.s=n,this.c=s,this.p=r,this.r=i||pr,this.d=o||this,this.set=a||lr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=yr,this.m=e,this.mt=r,this.tween=t},e}();ge(ce+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return ie[e]=1})),$.TweenMax=$.TweenLite=ar,$.TimelineLite=$.TimelineMax=Qt,l=new Qt({sortChildren:!1,defaults:j,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),x.stringFilter=Rt;var xr=[],jr={},Er=[],Mr=0,Tr=0,Ar=function(e){return(jr[e]||Er).map((function(e){return e()}))},Or=function(){var e=Date.now(),t=[];e-Mr>2&&(Ar("matchMediaInit"),xr.forEach((function(e){var r,n,s,i,o=e.queries,a=e.conditions;for(n in o)(r=u.matchMedia(o[n]).matches)&&(s=1),r!==a[n]&&(a[n]=r,i=1);i&&(e.revert(),s&&t.push(e))})),Ar("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e,(function(t){return e.add(null,t)}))})),Mr=e,Ar("matchMedia"))},Sr=function(){function e(e,t){this.selector=t&&ot(t),this.data=[],this._r=[],this.isReverted=!1,this.id=Tr++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,r){L(e)&&(r=t,t=e,e=L);var n=this,s=function(){var e,s=a,i=n.selector;return s&&s!==n&&s.data.push(n),r&&(n.selector=ot(r)),a=n,e=t.apply(n,arguments),L(e)&&n._r.push(e),a=s,n.selector=i,n.isReverted=!1,e};return n.last=s,e===L?s(n,(function(e){return n.add(null,e)})):e?n[e]=s:s},t.ignore=function(e){var t=a;a=null,e(this),a=t},t.getTweens=function(){var t=[];return this.data.forEach((function(r){return r instanceof e?t.push.apply(t,r.getTweens()):r instanceof ar&&!(r.parent&&"nested"===r.parent.data)&&t.push(r)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var r=this;if(e?function(){for(var t,n=r.getTweens(),s=r.data.length;s--;)"isFlip"===(t=r.data[s]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(e){return n.splice(n.indexOf(e),1)})));for(n.map((function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}})).sort((function(e,t){return t.g-e.g||-1/0})).forEach((function(t){return t.t.revert(e)})),s=r.data.length;s--;)(t=r.data[s])instanceof Qt?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof ar)&&t.revert&&t.revert(e);r._r.forEach((function(t){return t(e,r)})),r.isReverted=!0}():this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t)for(var n=xr.length;n--;)xr[n].id===this.id&&xr.splice(n,1)},t.revert=function(e){this.kill(e||{})},e}(),Cr=function(){function e(e){this.contexts=[],this.scope=e,a&&a.data.push(this)}var t=e.prototype;return t.add=function(e,t,r){I(e)||(e={matches:e});var n,s,i,o=new Sr(0,r||this.scope),l=o.conditions={};for(s in a&&!o.selector&&(o.selector=a.selector),this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===s?i=1:(n=u.matchMedia(e[s]))&&(xr.indexOf(o)<0&&xr.push(o),(l[s]=n.matches)&&(i=1),n.addListener?n.addListener(Or):n.addEventListener("change",Or));return i&&t(o,(function(e){return o.add(null,e)})),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),kr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return Mt(e)}))},timeline:function(e){return new Qt(e)},getTweensOf:function(e,t){return l.getTweensOf(e,t)},getProperty:function(e,t,r,n){P(e)&&(e=it(e)[0]);var s=fe(e||{}).get,i=r?Ee:je;return"native"===r&&(r=""),e?t?i((le[t]&&le[t].get||s)(e,t,r,n)):function(t,r,n){return i((le[t]&&le[t].get||s)(e,t,r,n))}:e},quickSetter:function(e,t,r){if((e=it(e)).length>1){var n=e.map((function(e){return Rr.quickSetter(e,t,r)})),s=n.length;return function(e){for(var t=s;t--;)n[t](e)}}e=e[0]||{};var i=le[t],o=fe(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var n=new i;f._pt=0,n.init(e,r?t+r:t,f,0,[e]),n.render(1,n),f._pt&&gr(1,f)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},quickTo:function(e,t,r){var n,s=Rr.to(e,Me(((n={})[t]="+=0.1",n.paused=!0,n.stagger=0,n),r||{})),i=function(e,r,n){return s.resetTo(t,e,r,n)};return i.tween=s,i},isTweening:function(e){return l.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=qt(e.ease,j.ease)),Ae(j,e||{})},config:function(e){return Ae(x,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,n=e.plugins,s=e.defaults,i=e.extendTimeline;(n||"").split(",").forEach((function(e){return e&&!le[e]&&!$[e]&&J(t+" effect requires "+e+" plugin.")})),ue[t]=function(e,t,n){return r(it(e),Me(t||{},s),n)},i&&(Qt.prototype[t]=function(e,r,n){return this.add(ue[t](e,I(r)?r:(n=r)&&{},this),n)})},registerEase:function(e,t){Dt[e]=qt(t)},parseEase:function(e,t){return arguments.length?qt(e,t):Dt},getById:function(e){return l.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,n,s=new Qt(e);for(s.smoothChildTiming=D(e.smoothChildTiming),l.remove(s),s._dp=0,s._time=s._tTime=l._time,r=l._first;r;)n=r._next,!t&&!r._dur&&r instanceof ar&&r.vars.onComplete===r._targets[0]||He(s,r,r._start-r._delay),r=n;return He(l,s,0),s},context:function(e,t){return e?new Sr(e,t):a},matchMedia:function(e){return new Cr(e)},matchMediaRefresh:function(){return xr.forEach((function(e){var t,r,n=e.conditions;for(r in n)n[r]&&(n[r]=!1,t=1);t&&e.revert()}))||Or()},addEventListener:function(e,t){var r=jr[e]||(jr[e]=[]);~r.indexOf(t)||r.push(t)},removeEventListener:function(e,t){var r=jr[e],n=r&&r.indexOf(t);n>=0&&r.splice(n,1)},utils:{wrap:gt,wrapYoyo:_t,distribute:lt,random:dt,snap:ht,normalize:ft,getUnit:et,clamp:tt,splitColor:St,toArray:it,selector:ot,mapRange:yt,pipe:ct,unitize:pt,interpolate:bt,shuffle:at},install:K,effects:ue,ticker:Ft,updateRoot:Qt.updateRoot,plugins:le,globalTimeline:l,core:{PropTween:wr,globals:ee,Tween:ar,Timeline:Qt,Animation:$t,getCache:fe,_removeLinkedListItem:ke,reverting:function(){return o},context:function(e){return e&&a&&(a.data.push(e),e._ctx=a),a},suppressOverwrites:function(e){return i=e}}};ge("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return kr[e]=ar[e]})),Ft.add(Qt.updateRoot),f=kr.to({},{duration:0});var Pr=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},Lr=function(e,t){return{name:e,rawVars:1,init:function(e,r,n){n._onInit=function(e){var n,s;if(P(r)&&(n={},ge(r,(function(e){return n[e]=1})),r=n),t){for(s in n={},r)n[s]=t(r[s]);r=n}!function(e,t){var r,n,s,i=e._targets;for(r in t)for(n=i.length;n--;)(s=e._ptLookup[n][r])&&(s=s.d)&&(s._pt&&(s=Pr(s,r)),s&&s.modifier&&s.modifier(t[r],e,i[n],r))}(e,r)}}}},Rr=kr.registerPlugin({name:"attr",init:function(e,t,r,n,s){var i,o,a;for(i in this.tween=r,t)a=e.getAttribute(i)||"",(o=this.add(e,"setAttribute",(a||0)+"",t[i],n,s,0,0,i)).op=i,o.b=a,this._props.push(i)},render:function(e,t){for(var r=t._pt;r;)o?r.set(r.t,r.p,r.b,r):r.r(e,r.d),r=r._next}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r],0,0,0,0,0,1)}},Lr("roundProps",ut),Lr("modifiers"),Lr("snap",ht))||kr;ar.version=Qt.version=Rr.version="3.12.7",c=1,z()&&It();var Fr=Dt.Power0,Ir=Dt.Power1,Dr=Dt.Power2,zr=Dt.Power3,Nr=Dt.Power4,Ur=Dt.Linear,Br=Dt.Quad,Hr=Dt.Cubic,qr=Dt.Quart,Vr=Dt.Quint,Gr=Dt.Strong,Wr=Dt.Elastic,Xr=Dt.Back,Yr=Dt.SteppedEase,$r=Dt.Bounce,Qr=Dt.Sine,Kr=Dt.Expo,Zr=Dt.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Back:()=>n.Back,Bounce:()=>n.Bounce,CSSPlugin:()=>s.CSSPlugin,Circ:()=>n.Circ,Cubic:()=>n.Cubic,Elastic:()=>n.Elastic,Expo:()=>n.Expo,Linear:()=>n.Linear,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Quad:()=>n.Quad,Quart:()=>n.Quart,Quint:()=>n.Quint,Sine:()=>n.Sine,SteppedEase:()=>n.SteppedEase,Strong:()=>n.Strong,TimelineLite:()=>n.TimelineLite,TimelineMax:()=>n.TimelineMax,TweenLite:()=>n.TweenLite,TweenMax:()=>o,default:()=>i,gsap:()=>i});var n=r("./node_modules/gsap/gsap-core.js"),s=r("./node_modules/gsap/CSSPlugin.js"),i=n.gsap.registerPlugin(s.CSSPlugin)||n.gsap,o=i.core.Tween},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=n},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var n=r("./node_modules/lodash/_hashClear.js"),s=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_listCacheClear.js"),s=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=n},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_mapCacheClear.js"),s=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=n},"./node_modules/lodash/_Set.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=n},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js"),s=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=s,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new n(e);this.size=t.size}u.prototype.clear=s,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Symbol;e.exports=n},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=n},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=n},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=0,i=[];++r<n;){var o=e[r];t(o,r,e)&&(i[s++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseTimes.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),h=!r&&s(e),d=!r&&!h&&o(e),c=!r&&!h&&!d&&l(e),p=r||h||d||c,f=p?n(e.length,String):[],m=f.length;for(var g in e)!t&&!u.call(e,g)||p&&("length"==g||d&&("offset"==g||"parent"==g)||c&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=Array(n);++r<n;)s[r]=t(e[r],r,e);return s}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,n=t.length,s=e.length;++r<n;)e[s+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var n=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseForOwn.js"),s=r("./node_modules/lodash/_createBaseEach.js")(n);e.exports=s},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var n=r("./node_modules/lodash/_createBaseFor.js")();e.exports=n},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseFor.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&n(e,t,s)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=n(t,e)).length;null!=e&&r<i;)e=e[s(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayPush.js"),s=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return s(e)?i:n(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?s(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return s(e)&&"[object Arguments]"==n(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqualDeep.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!s(t)&&!s(r)?t!=t&&r!=r:n(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),h=r("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",c="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,m,g,_){var v=l(e),y=l(t),b=v?c:a(e),w=y?c:a(t),x=(b=b==d?p:b)==p,j=(w=w==d?p:w)==p,E=b==w;if(E&&u(e)){if(!u(t))return!1;v=!0,x=!1}if(E&&!x)return _||(_=new n),v||h(e)?s(e,t,r,m,g,_):i(e,t,b,r,m,g,_);if(!(1&r)){var M=x&&f.call(e,"__wrapped__"),T=j&&f.call(t,"__wrapped__");if(M||T){var A=M?e.value():e,O=T?t.value():t;return _||(_=new n),g(A,O,r,m,_)}}return!!E&&(_||(_=new n),o(e,t,r,m,g,_))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var h=(u=r[o])[0],d=e[h],c=u[1];if(l&&u[2]){if(void 0===d&&!(h in e))return!1}else{var p=new n;if(i)var f=i(d,c,h,e,t,p);if(!(void 0===f?s(c,d,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,h=l.toString,d=u.hasOwnProperty,c=RegExp("^"+h.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||s(e))&&(n(e)?c:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&s(e.length)&&!!o[n(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseMatches.js"),s=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?s(e[0],e[1]):n(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isPrototype.js"),s=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return s(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseEach.js"),s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=s(e)?Array(e.length):[];return n(e,(function(e,n,s){i[++r]=t(e,n,s)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsMatch.js"),s=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=s(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqual.js"),s=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=s(r,e);return void 0===o&&o===t?i(r,e):n(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return n(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=n?n.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return s(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:n}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return n(e)?e:s(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=n},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,s){if(null==r)return r;if(!n(r))return e(r,s);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==s(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,n){for(var s=-1,i=Object(t),o=n(t),a=o.length;a--;){var l=o[e?a:++s];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var n=r("./node_modules/lodash/_SetCache.js"),s=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,h=e.length,d=t.length;if(h!=d&&!(u&&d>h))return!1;var c=l.get(e),p=l.get(t);if(c&&p)return c==t&&p==e;var f=-1,m=!0,g=2&r?new n:void 0;for(l.set(e,t),l.set(t,e);++f<h;){var _=e[f],v=t[f];if(o)var y=u?o(v,_,f,t,e,l):o(_,v,f,e,t,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!s(t,(function(e,t){if(!i(g,t)&&(_===e||a(_,e,r,o,l)))return g.push(t)}))){m=!1;break}}else if(_!==v&&!a(_,v,r,o,l)){m=!1;break}}return l.delete(e),l.delete(t),m}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=n?n.prototype:void 0,h=u?u.valueOf:void 0;e.exports=function(e,t,r,n,u,d,c){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new s(e),new s(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var f=1&n;if(p||(p=l),e.size!=t.size&&!f)return!1;var m=c.get(e);if(m)return m==t;n|=2,c.set(e,t);var g=o(p(e),p(t),n,u,d,c);return c.delete(e),g;case"[object Symbol]":if(h)return h.call(e)==h.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getAllKeys.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=n(e),h=u.length;if(h!=n(t).length&&!l)return!1;for(var d=h;d--;){var c=u[d];if(!(l?c in t:s.call(t,c)))return!1}var p=a.get(e),f=a.get(t);if(p&&f)return p==t&&f==e;var m=!0;a.set(e,t),a.set(t,e);for(var g=l;++d<h;){var _=e[c=u[d]],v=t[c];if(i)var y=l?i(v,_,c,t,e,a):i(_,v,c,e,t,a);if(!(void 0===y?_===v||o(_,v,r,i,a):y)){m=!1;break}g||(g="constructor"==c)}if(m&&!g){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return a.delete(e),a.delete(t),m}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetAllKeys.js"),s=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return n(e,i,s)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isStrictComparable.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=s(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,n(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsNative.js"),s=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=s(e,t);return n(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=Object.prototype,i=s.hasOwnProperty,o=s.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var s=o.call(e);return n&&(t?e[a]=r:delete e[a]),s}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayFilter.js"),s=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),n(o(e),(function(t){return i.call(e,t)})))}:s;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_DataView.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),h="[object Map]",d="[object Promise]",c="[object Set]",p="[object WeakMap]",f="[object DataView]",m=u(n),g=u(s),_=u(i),v=u(o),y=u(a),b=l;(n&&b(new n(new ArrayBuffer(1)))!=f||s&&b(new s)!=h||i&&b(i.resolve())!=d||o&&b(new o)!=c||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,n=r?u(r):"";if(n)switch(n){case m:return f;case g:return h;case _:return d;case v:return c;case y:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,h=(t=n(t,e)).length,d=!1;++u<h;){var c=l(t[u]);if(!(d=null!=e&&r(e,c)))break;e=e[c]}return d||++u!=h?d:!!(h=null==e?0:e.length)&&a(h)&&o(c,h)&&(i(e)||s(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=n?n(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return s.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:s.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!s(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var n,s=r("./node_modules/lodash/_coreJsData.js"),i=(n=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var n=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!n(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js"),s=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0)&&(r==t.length-1?t.pop():s.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return n(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,s=n(r,e);return s<0?(++this.size,r.push([e,t])):r[s][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Hash.js"),s=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||s),string:new n}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=n(this,e),s=r.size;return r.set(e,t),this.size+=r.size==s?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var n=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=n},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=n},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_freeGlobal.js"),s=t&&!t.nodeType&&t,i=s&&e&&!e.nodeType&&e,o=i&&i.exports===s&&n.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var n=r("./node_modules/lodash/_freeGlobal.js"),s="object"==typeof self&&self&&self.Object===Object&&self,i=n||s||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new n,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var o=r.__data__;if(!s||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_memoizeCapped.js"),s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(s,(function(e,r,n,s){t.push(n?s.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayEach.js"),s=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:s)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var s=null==e?void 0:n(e,t);return void 0===s?r:s}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseHasIn.js"),s=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&s(e,t,n)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsArguments.js"),s=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=n(function(){return arguments}())?n:function(e){return s(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&s(e.length)&&!n(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_root.js"),s=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?n.Buffer:void 0,l=(a?a.isBuffer:void 0)||s;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!s(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||s(e)&&"[object Symbol]"==n(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsTypedArray.js"),s=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?s(o):n;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayLikeKeys.js"),s=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?n(e):s(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayMap.js"),s=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:i)(e,s(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js");function s(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,s=t?t.apply(this,n):n[0],i=r.cache;if(i.has(s))return i.get(s);var o=e.apply(this,n);return r.cache=i.set(s,o)||i,o};return r.cache=new(s.Cache||n),r}s.Cache=n,e.exports=s},"./node_modules/lodash/property.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseProperty.js"),s=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?n(o(e)):s(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":n(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var n=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),s=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return o.call(t,(function(t){if(t.href){var s=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);d(s)&&!0!==t.visited&&s&&(l(t,s),r=!0)}})),r}function h(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,o,l,d=function(e){var t=s[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}s[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),s=r&&r[1];return s&&e?e.split(",").map((function(e){var r=new RegExp("".concat(s,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,s),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void h();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),h())},o=50,l=0,function(){var e=this,t=arguments;clearTimeout(l),l=setTimeout((function(){return r.apply(e,t)}),o)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,n,s,i,o,a,l,u,h,d,c,p,f,m,g=!1;function _(){if(!g){g=!0;var e=navigator.userAgent,_=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),v=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(c=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),h=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),m=/Mobile/i.exec(e),d=!!/Win64/.exec(e),_){(t=_[1]?parseFloat(_[1]):_[5]?parseFloat(_[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);o=y?parseFloat(y[1])+4:t,r=_[2]?parseFloat(_[2]):NaN,n=_[3]?parseFloat(_[3]):NaN,(s=_[4]?parseFloat(_[4]):NaN)?(_=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=_&&_[1]?parseFloat(_[1]):NaN):i=NaN}else t=r=n=i=s=NaN;if(v){if(v[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!v[2],u=!!v[3]}else a=l=u=!1}}var v={ie:function(){return _()||t},ieCompatibilityMode:function(){return _()||o>t},ie64:function(){return v.ie()&&d},firefox:function(){return _()||r},opera:function(){return _()||n},webkit:function(){return _()||s},safari:function(){return v.webkit()},chrome:function(){return _()||i},windows:function(){return _()||l},osx:function(){return _()||a},linux:function(){return _()||u},iphone:function(){return _()||c},mobile:function(){return _()||c||p||h||m},nativeApp:function(){return _()||f},android:function(){return _()||h},ipad:function(){return _()||p}};e.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var n,s=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");s.canUseDOM&&(n=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!s.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&n&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var n=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),s=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,n=0,s=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),n=10*t,s=10*r,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||s)&&e.deltaMode&&(1==e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!r&&(r=s<1?-1:1),{spinX:t,spinY:r,pixelX:n,pixelY:s}}i.getEventType=function(){return n.firefox()?"DOMMouseScroll":s("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new s.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends n.Transform{constructor(e,{near:t=.1,far:r=100,fov:n=45,aspect:o=1,left:a,right:l,bottom:u,top:h,zoom:d=1}={}){super(),Object.assign(this,{near:t,far:r,fov:n,aspect:o,left:a,right:l,bottom:u,top:h,zoom:d}),this.projectionMatrix=new s.Mat4,this.viewMatrix=new s.Mat4,this.projectionViewMatrix=new s.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:n=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:n}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:n,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left||-1,right:n=this.right||1,bottom:s=this.bottom||-1,top:i=this.top||1,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:n,bottom:s,top:i,zoom:o}),r/=o,n/=o,s/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:n,bottom:s,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}updateProjectionMatrix(){return"perspective"===this.type?this.perspective():this.orthographic()}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e,t=e.worldMatrix){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const r=a;r.copy(e.geometry.bounds.center),r.applyMatrix4(t);const n=e.geometry.bounds.radius*t.getMaxScaleOnAxis();return this.frustumIntersectsSphere(r,n)}frustumIntersectsSphere(e,t){const r=l;for(let n=0;n<6;n++){const s=this.frustum[n];if(r.copy(s).dot(e)+s.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var n=r("./node_modules/ogl/src/math/Vec3.js");const s=new n.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.usage=t.usage||this.gl.STATIC_DRAW,t.buffer||this.updateAttribute(t),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){const t=!e.buffer;t&&(e.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),t?this.gl.bufferData(e.target,e.data,e.usage):this.gl.bufferSubData(e.target,0,e.data),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const n=this.attributes[t];this.gl.bindBuffer(n.target,n.buffer),this.glState.boundBuffer=n.buffer;let s=1;35674===r&&(s=2),35675===r&&(s=3),35676===r&&(s=4);const i=n.size/s,o=1===s?0:s*s*4,a=1===s?0:4*s;for(let t=0;t<s;t++)this.gl.vertexAttribPointer(e+t,i,n.type,n.normalized,n.stride+o,n.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,n.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)}));let r=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(r=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*r):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.size;this.bounds||(this.bounds={min:new n.Vec3,max:new n.Vec3,center:new n.Vec3,scale:new n.Vec3,radius:1/0});const s=this.bounds.min,i=this.bounds.max,o=this.bounds.center,a=this.bounds.scale;s.set(1/0),i.set(-1/0);for(let e=0,n=t.length;e<n;e+=r){const r=t[e],n=t[e+1],o=t[e+2];s.x=Math.min(r,s.x),s.y=Math.min(n,s.y),s.z=Math.min(o,s.z),i.x=Math.max(r,i.x),i.y=Math.max(n,i.y),i.z=Math.max(o,i.z)}a.sub(i,s),o.add(s,i).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.size;this.bounds||this.computeBoundingBox(e);let n=0;for(let e=0,i=t.length;e<i;e+=r)s.fromArray(t,e),n=Math.max(n,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(n)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends n.Transform{constructor(e,{geometry:t,program:r,mode:n=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=n,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})));let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let n=1;const s={};class i{constructor(e,{vertex:t,fragment:r,uniforms:s={},transparent:i=!1,cullFace:o=e.BACK,frontFace:a=e.CCW,depthTest:l=!0,depthWrite:u=!0,depthFunc:h=e.LEQUAL}={}){e.canvas||console.error("gl not passed as first argument to Program"),this.gl=e,this.uniforms=s,this.id=n++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=a,this.depthTest=l,this.depthWrite=u,this.depthFunc=h,this.blendFunc={},this.blendEquation={},this.stencilFunc={},this.stencilOp={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA)),this.vertexShader=e.createShader(e.VERTEX_SHADER),this.fragmentShader=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),e.attachShader(this.program,this.vertexShader),e.attachShader(this.program,this.fragmentShader),this.setShaders({vertex:t,fragment:r})}setShaders({vertex:e,fragment:t}){if(e&&(this.gl.shaderSource(this.vertexShader,e),this.gl.compileShader(this.vertexShader),""!==this.gl.getShaderInfoLog(this.vertexShader)&&console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\nVertex Shader\n${a(e)}`)),t&&(this.gl.shaderSource(this.fragmentShader,t),this.gl.compileShader(this.fragmentShader),""!==this.gl.getShaderInfoLog(this.fragmentShader)&&console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\nFragment Shader\n${a(t)}`)),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS))return console.warn(this.gl.getProgramInfoLog(this.program));this.uniformLocations=new Map;let r=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_UNIFORMS);for(let e=0;e<r;e++){let t=this.gl.getActiveUniform(this.program,e);this.uniformLocations.set(t,this.gl.getUniformLocation(this.program,t.name));const r=t.name.match(/(\w+)/g);t.uniformName=r[0],t.nameComponents=r.slice(1)}this.attributeLocations=new Map;const n=[],s=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_ATTRIBUTES);for(let e=0;e<s;e++){const t=this.gl.getActiveAttrib(this.program,e),r=this.gl.getAttribLocation(this.program,t.name);-1!==r&&(n[r]=t.name,this.attributeLocations.set(t,r))}this.attributeOrder=n.join("")}setBlendFunc(e,t,r,n){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=n,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}setStencilFunc(e,t,r){this.stencilRef=t,this.stencilFunc.func=e,this.stencilFunc.ref=t,this.stencilFunc.mask=r}setStencilOp(e,t,r){this.stencilOp.stencilFail=e,this.stencilOp.depthFail=t,this.stencilOp.depthPass=r}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha),this.stencilFunc.func||this.stencilOp.stencilFail?this.gl.renderer.enable(this.gl.STENCIL_TEST):this.gl.renderer.disable(this.gl.STENCIL_TEST),this.gl.renderer.setStencilFunc(this.stencilFunc.func,this.stencilFunc.ref,this.stencilFunc.mask),this.gl.renderer.setStencilOp(this.stencilOp.stencilFail,this.stencilOp.depthFail,this.stencilOp.depthPass)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let n=this.uniforms[r.uniformName];for(const e of r.nameComponents){if(!n)break;if(!(e in n)){if(Array.isArray(n.value))break;n=void 0;break}n=n[e]}if(!n)return u(`Active uniform ${r.name} has not been supplied`);if(n&&void 0===n.value)return u(`${r.name} uniform is missing a value parameter`);if(n.value.texture)return t+=1,n.value.update(t),o(this.gl,r.type,e,t);if(n.value.length&&n.value[0].texture){const s=[];return n.value.forEach((e=>{t+=1,e.update(t),s.push(t)})),o(this.gl,r.type,e,s)}o(this.gl,r.type,e,n.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,n){n=n.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const n=t*r;let i=s[n];i||(s[n]=i=new Float32Array(n));for(let n=0;n<t;n++)i.set(e[n],n*r);return i}(n):n;const i=e.renderer.state.uniformLocations.get(r);if(n.length)if(void 0===i||i.length!==n.length)e.renderer.state.uniformLocations.set(r,n.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}(i,n))return;i.set?i.set(n):function(e,t){for(let r=0,n=e.length;r<n;r++)e[r]=t[r]}(i,n),e.renderer.state.uniformLocations.set(r,i)}else{if(i===n)return;e.renderer.state.uniformLocations.set(r,n)}switch(t){case 5126:return n.length?e.uniform1fv(r,n):e.uniform1f(r,n);case 35664:return e.uniform2fv(r,n);case 35665:return e.uniform3fv(r,n);case 35666:return e.uniform4fv(r,n);case 35670:case 5124:case 35678:case 36306:case 35680:case 36289:return n.length?e.uniform1iv(r,n):e.uniform1i(r,n);case 35671:case 35667:return e.uniform2iv(r,n);case 35672:case 35668:return e.uniform3iv(r,n);case 35673:case 35669:return e.uniform4iv(r,n);case 35674:return e.uniformMatrix2fv(r,!1,n);case 35675:return e.uniformMatrix3fv(r,!1,n);case 35676:return e.uniformMatrix4fv(r,!1,n)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const n=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let s=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:n=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:h=!1,powerPreference:d="default",autoClear:c=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:h,powerPreference:d};this.dpr=n,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=c,this.id=s++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LEQUAL,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t,r=0,n=0){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.state.viewport.x=r,this.state.viewport.y=n,this.gl.viewport(r,n,e,t))}setScissor(e,t,r=0,n=0){this.gl.scissor(r,n,e,t)}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,n){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===n||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=n,void 0!==r?this.gl.blendFuncSeparate(e,t,r,n):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}setStencilMask(e){this.state.stencilMask!==e&&(this.state.stencilMask=e,this.gl.stencilMask(e))}setStencilFunc(e,t,r){this.state.stencilFunc===e&&this.state.stencilRef===t&&this.state.stencilFuncMask===r||(this.state.stencilFunc=e||this.gl.ALWAYS,this.state.stencilRef=t||0,this.state.stencilFuncMask=r||0,this.gl.stencilFunc(e||this.gl.ALWAYS,t||0,r||0))}setStencilOp(e,t,r){this.state.stencilFail===e&&this.state.stencilDepthFail===t&&this.state.stencilDepthPass===r||(this.state.stencilFail=e,this.state.stencilDepthFail=t,this.state.stencilDepthPass=r,this.gl.stencilOp(e,t,r))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:s}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),s){const e=[],r=[],s=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):s.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(n),n.applyMatrix4(t.projectionViewMatrix),i.zDepth=n.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),s.sort(this.sortUI),i=e.concat(r,s)}return i}render({scene:e,camera:t,target:r=null,update:n=!0,sort:s=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),(this.stencil||!r||r.stencil)&&(this.enable(this.gl.STENCIL_TEST),this.setStencilMask(255)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),n&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:s}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const n=new Uint8Array(4);function s(e){return!(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:n=e.UNSIGNED_BYTE,format:s=e.RGBA,internalFormat:o=s,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,wrapR:u=e.CLAMP_TO_EDGE,generateMipmaps:h=r===(e.TEXTURE_2D||e.TEXTURE_CUBE_MAP),minFilter:d=(h?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:c=e.LINEAR,premultiplyAlpha:p=!1,unpackAlignment:f=4,flipY:m=r==(e.TEXTURE_2D||e.TEXTURE_3D),anisotropy:g=0,level:_=0,width:v,height:y=v,length:b=1}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=n,this.format=s,this.internalFormat=o,this.minFilter=d,this.magFilter=c,this.wrapS=a,this.wrapT=l,this.wrapR=u,this.generateMipmaps=h,this.premultiplyAlpha=p,this.unpackAlignment=f,this.flipY=m,this.anisotropy=Math.min(g,this.gl.renderer.parameters.maxAnisotropy),this.level=_,this.width=v,this.height=y,this.length=b,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.wrapR!==this.state.wrapR&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_R,this.wrapR),this.state.wrapR=this.wrapR),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image):this.target!==this.gl.TEXTURE_2D_ARRAY&&this.target!==this.gl.TEXTURE_3D||this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);else this.width?this.target===this.gl.TEXTURE_2D?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage3D(this.target,this.level,this.internalFormat,this.width,this.height,this.length,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var n=r("./node_modules/ogl/src/math/Vec3.js"),s=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new n.Vec3,this.quaternion=new s.Quat,this.scale=new n.Vec3(1),this.rotation=new o.Euler,this.up=new n.Vec3(0,1,0),this.rotation._target.onChange=()=>this.quaternion.fromEuler(this.rotation,!0),this.quaternion._target.onChange=()=>this.rotation.fromQuaternion(this.quaternion,void 0,!0)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.decompose(this.quaternion._target,this.position,this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion._target),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>s});var n=r("./node_modules/ogl/src/core/Geometry.js");class s extends n.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:n=1,heightSegments:i=1,attributes:o={}}={}){const a=n,l=i,u=(a+1)*(l+1),h=a*l*6,d=new Float32Array(3*u),c=new Float32Array(3*u),p=new Float32Array(2*u),f=h>65536?new Uint32Array(h):new Uint16Array(h);s.buildPlane(d,c,p,f,t,r,0,a,l),Object.assign(o,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:p},index:{data:f}}),super(e,o)}static buildPlane(e,t,r,n,s,i,o,a,l,u=0,h=1,d=2,c=1,p=-1,f=0,m=0){const g=f,_=s/a,v=i/l;for(let y=0;y<=l;y++){let b=y*v-i/2;for(let i=0;i<=a;i++,f++){let v=i*_-s/2;if(e[3*f+u]=v*c,e[3*f+h]=b*p,e[3*f+d]=o/2,t[3*f+u]=0,t[3*f+h]=0,t[3*f+d]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;n[6*m]=w,n[6*m+1]=x,n[6*m+2]=E,n[6*m+3]=x,n[6*m+4]=j,n[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var n=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const s=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,n="YXZ"){super(e,t,r),this.order=n,this.onChange=()=>{},this._target=this;const s=["0","1","2"];return new Proxy(this,{set(e,t){const r=Reflect.set(...arguments);return r&&s.includes(t)&&e.onChange(),r}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this._target[0]=e,this.onChange()}set y(e){this._target[1]=e,this.onChange()}set z(e){this._target[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this._target[0]=e,this._target[1]=t,this._target[2]=r,this.onChange(),this)}copy(e){return this._target[0]=e[0],this._target[1]=e[1],this._target[2]=e[2],this.onChange(),this}reorder(e){return this._target.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return n.fromRotationMatrix(this._target,e,t),this.onChange(),this}fromQuaternion(e,t=this.order,r){return s.fromQuaternion(e),this._target.fromRotationMatrix(s,t),r||this.onChange(),this}fromArray(e,t=0){return this._target[0]=e[t],this._target[1]=e[t+1],this._target[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=1,i=0,o=0,a=0,l=1){return super(e,t,r,n,s,i,o,a,l),this}set(e,t,r,s,i,o,a,l,u){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t=this){return n.rotate(this,t,e),this}scale(e,t=this){return n.scale(this,t,e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromMatrix4(e){return n.fromMat4(this,e),this}fromQuaternion(e){return n.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return n.invert(this,e),this}getNormalMatrix(e){return n.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=0,i=1,o=0,a=0,l=0,u=0,h=1,d=0,c=0,p=0,f=0,m=1){return super(e,t,r,n,s,i,o,a,l,u,h,d,c,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,s,i,o,a,l,u,h,d,c,p,f,m,g){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u,h,d,c,p,f,m,g),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t,r=this){return n.rotate(this,r,e,t),this}scale(e,t=this){return n.scale(this,t,"number"==typeof e?[e,e,e]:e),this}add(e,t){return t?n.add(this,e,t):n.add(this,this,e),this}sub(e,t){return t?n.subtract(this,e,t):n.subtract(this,this,e),this}multiply(e,t){return e.length?t?n.multiply(this,e,t):n.multiply(this,this,e):n.multiplyScalar(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:s}={}){return n.perspective(this,e,t,r,s),this}fromOrthogonal({left:e,right:t,bottom:r,top:s,near:i,far:o}){return n.ortho(this,e,t,r,s,i,o),this}fromQuaternion(e){return n.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return n.invert(this,e),this}compose(e,t,r){return n.compose(this,e,t,r),this}decompose(e,t,r){return n.decompose(this,e,t,r),this}getRotation(e){return n.getRotation(e,this),this}getTranslation(e){return n.getTranslation(e,this),this}getScaling(e){return n.getScaling(e,this),this}getMaxScaleOnAxis(){return n.getMaxScaleOnAxis(this)}lookAt(e,t,r){return n.targetTo(this,e,t,r),this}determinant(){return n.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>s});var n=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class s extends Array{constructor(e=0,t=0,r=0,n=1){super(e,t,r,n),this.onChange=()=>{},this._target=this;const s=["0","1","2","3"];return new Proxy(this,{set(e,t){const r=Reflect.set(...arguments);return r&&s.includes(t)&&e.onChange(),r}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this._target[0]=e,this.onChange()}set y(e){this._target[1]=e,this.onChange()}set z(e){this._target[2]=e,this.onChange()}set w(e){this._target[3]=e,this.onChange()}identity(){return n.identity(this._target),this.onChange(),this}set(e,t,r,s){return e.length?this.copy(e):(n.set(this._target,e,t,r,s),this.onChange(),this)}rotateX(e){return n.rotateX(this._target,this._target,e),this.onChange(),this}rotateY(e){return n.rotateY(this._target,this._target,e),this.onChange(),this}rotateZ(e){return n.rotateZ(this._target,this._target,e),this.onChange(),this}inverse(e=this._target){return n.invert(this._target,e),this.onChange(),this}conjugate(e=this._target){return n.conjugate(this._target,e),this.onChange(),this}copy(e){return n.copy(this._target,e),this.onChange(),this}normalize(e=this._target){return n.normalize(this._target,e),this.onChange(),this}multiply(e,t){return t?n.multiply(this._target,e,t):n.multiply(this._target,this._target,e),this.onChange(),this}dot(e){return n.dot(this._target,e)}fromMatrix3(e){return n.fromMat3(this._target,e),this.onChange(),this}fromEuler(e,t){return n.fromEuler(this._target,e,e.order),t||this.onChange(),this}fromAxisAngle(e,t){return n.setAxisAngle(this._target,e,t),this.onChange(),this}slerp(e,t){return n.slerp(this._target,this._target,e,t),this.onChange(),this}fromArray(e,t=0){return this._target[0]=e[t],this._target[1]=e[t+1],this._target[2]=e[t+2],this._target[3]=e[t+3],this.onChange(),this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class s extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(n.set(this,e,t,r),this)}copy(e){return n.copy(this,e),this}add(e,t){return t?n.add(this,e,t):n.add(this,this,e),this}sub(e,t){return t?n.subtract(this,e,t):n.subtract(this,this,e),this}multiply(e){return e.length?n.multiply(this,this,e):n.scale(this,this,e),this}divide(e){return e.length?n.divide(this,this,e):n.scale(this,this,1/e),this}inverse(e=this){return n.inverse(this,e),this}len(){return n.length(this)}distance(e){return e?n.distance(this,e):n.length(this)}squaredLen(){return n.squaredLength(this)}squaredDistance(e){return e?n.squaredDistance(this,e):n.squaredLength(this)}negate(e=this){return n.negate(this,e),this}cross(e,t){return t?n.cross(this,e,t):n.cross(this,this,e),this}scale(e){return n.scale(this,this,e),this}normalize(){return n.normalize(this,this),this}dot(e){return n.dot(this,e)}equals(e){return n.exactEquals(this,e)}applyMatrix3(e){return n.transformMat3(this,this,e),this}applyMatrix4(e){return n.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return n.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return n.transformQuat(this,this,e),this}angle(e){return n.angle(this,e)}lerp(e,t){return n.lerp(this,this,e,t),this}smoothLerp(e,t,r){return n.smoothLerp(this,this,e,t,r),this}clone(){return new s(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],n=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*n,this[1]=e[1]*t+e[5]*r+e[9]*n,this[2]=e[2]*t+e[6]*r+e[10]*n,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function n(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>n})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>_,copy:()=>i,determinant:()=>h,fromMat4:()=>n,fromQuat:()=>s,identity:()=>a,invert:()=>u,multiply:()=>d,multiplyScalar:()=>y,normalFromMat4:()=>m,projection:()=>g,rotate:()=>p,scale:()=>f,set:()=>o,subtract:()=>v,translate:()=>c,transpose:()=>l});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function s(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,h=n*o,d=n*a,c=s*o,p=s*a,f=s*l,m=i*o,g=i*a,_=i*l;return e[0]=1-d-f,e[3]=h-_,e[6]=c+g,e[1]=h+_,e[4]=1-u-f,e[7]=p-m,e[2]=c-g,e[5]=p+m,e[8]=1-u-d,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,n,s,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],n=t[2],s=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=s}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],h=t[8],d=h*o-a*u,c=-h*i+a*l,p=u*i-o*l,f=r*d+n*c+s*p;return f?(f=1/f,e[0]=d*f,e[1]=(-h*n+s*u)*f,e[2]=(a*n-s*o)*f,e[3]=c*f,e[4]=(h*r-s*l)*f,e[5]=(-a*r+s*i)*f,e[6]=p*f,e[7]=(-u*r+n*l)*f,e[8]=(o*r-n*i)*f,e):null}function h(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*s+o*a)+n*(l*s-i*a)}function d(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],d=t[8],c=r[0],p=r[1],f=r[2],m=r[3],g=r[4],_=r[5],v=r[6],y=r[7],b=r[8];return e[0]=c*n+p*o+f*u,e[1]=c*s+p*a+f*h,e[2]=c*i+p*l+f*d,e[3]=m*n+g*o+_*u,e[4]=m*s+g*a+_*h,e[5]=m*i+g*l+_*d,e[6]=v*n+y*o+b*u,e[7]=v*s+y*a+b*h,e[8]=v*i+y*l+b*d,e}function c(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],d=t[8],c=r[0],p=r[1];return e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=c*n+p*o+u,e[7]=c*s+p*a+h,e[8]=c*i+p*l+d,e}function p(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],d=t[8],c=Math.sin(r),p=Math.cos(r);return e[0]=p*n+c*o,e[1]=p*s+c*a,e[2]=p*i+c*l,e[3]=p*o-c*n,e[4]=p*a-c*s,e[5]=p*l-c*i,e[6]=u,e[7]=h,e[8]=d,e}function f(e,t,r){let n=r[0],s=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=s*t[3],e[4]=s*t[4],e[5]=s*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function m(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],h=t[8],d=t[9],c=t[10],p=t[11],f=t[12],m=t[13],g=t[14],_=t[15],v=r*a-n*o,y=r*l-s*o,b=r*u-i*o,w=n*l-s*a,x=n*u-i*a,j=s*u-i*l,E=h*m-d*f,M=h*g-c*f,T=h*_-p*f,A=d*g-c*m,O=d*_-p*m,S=c*_-p*g,C=v*S-y*O+b*A+w*T-x*M+j*E;return C?(C=1/C,e[0]=(a*S-l*O+u*A)*C,e[1]=(l*T-o*S-u*M)*C,e[2]=(o*O-a*T+u*E)*C,e[3]=(s*O-n*S-i*A)*C,e[4]=(r*S-s*T+i*M)*C,e[5]=(n*T-r*O-i*E)*C,e[6]=(m*j-g*x+_*w)*C,e[7]=(g*b-f*j-_*y)*C,e[8]=(f*x-m*b+_*v)*C,e):null}function g(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function _(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function v(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function y(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>T,compose:()=>b,copy:()=>i,decompose:()=>y,determinant:()=>h,fromQuat:()=>x,fromRotationTranslationScale:()=>w,getMaxScaleOnAxis:()=>_,getRotation:()=>v,getScaling:()=>g,getTranslation:()=>m,identity:()=>a,invert:()=>u,multiply:()=>d,multiplyScalar:()=>O,ortho:()=>E,perspective:()=>j,rotate:()=>f,scale:()=>p,set:()=>o,subtract:()=>A,targetTo:()=>M,translate:()=>c,transpose:()=>l});var n=r("./node_modules/ogl/src/math/functions/Vec3Func.js");const s=1e-6;function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function o(e,t,r,n,s,i,o,a,l,u,h,d,c,p,f,m,g){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=h,e[10]=d,e[11]=c,e[12]=p,e[13]=f,e[14]=m,e[15]=g,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function l(e,t){if(e===t){let r=t[1],n=t[2],s=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=i,e[11]=t[14],e[12]=s,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function u(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],h=t[8],d=t[9],c=t[10],p=t[11],f=t[12],m=t[13],g=t[14],_=t[15],v=r*a-n*o,y=r*l-s*o,b=r*u-i*o,w=n*l-s*a,x=n*u-i*a,j=s*u-i*l,E=h*m-d*f,M=h*g-c*f,T=h*_-p*f,A=d*g-c*m,O=d*_-p*m,S=c*_-p*g,C=v*S-y*O+b*A+w*T-x*M+j*E;return C?(C=1/C,e[0]=(a*S-l*O+u*A)*C,e[1]=(s*O-n*S-i*A)*C,e[2]=(m*j-g*x+_*w)*C,e[3]=(c*x-d*j-p*w)*C,e[4]=(l*T-o*S-u*M)*C,e[5]=(r*S-s*T+i*M)*C,e[6]=(g*b-f*j-_*y)*C,e[7]=(h*j-c*b+p*y)*C,e[8]=(o*O-a*T+u*E)*C,e[9]=(n*T-r*O-i*E)*C,e[10]=(f*x-m*b+_*v)*C,e[11]=(d*b-h*x-p*v)*C,e[12]=(a*M-o*A-l*E)*C,e[13]=(r*A-n*M+s*E)*C,e[14]=(m*y-f*w-g*v)*C,e[15]=(h*w-d*y+c*v)*C,e):null}function h(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],h=e[9],d=e[10],c=e[11],p=e[12],f=e[13],m=e[14],g=e[15];return(t*o-r*i)*(d*g-c*m)-(t*a-n*i)*(h*g-c*f)+(t*l-s*i)*(h*m-d*f)+(r*a-n*o)*(u*g-c*p)-(r*l-s*o)*(u*m-d*p)+(n*l-s*a)*(u*f-h*p)}function d(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],d=t[8],c=t[9],p=t[10],f=t[11],m=t[12],g=t[13],_=t[14],v=t[15],y=r[0],b=r[1],w=r[2],x=r[3];return e[0]=y*n+b*a+w*d+x*m,e[1]=y*s+b*l+w*c+x*g,e[2]=y*i+b*u+w*p+x*_,e[3]=y*o+b*h+w*f+x*v,y=r[4],b=r[5],w=r[6],x=r[7],e[4]=y*n+b*a+w*d+x*m,e[5]=y*s+b*l+w*c+x*g,e[6]=y*i+b*u+w*p+x*_,e[7]=y*o+b*h+w*f+x*v,y=r[8],b=r[9],w=r[10],x=r[11],e[8]=y*n+b*a+w*d+x*m,e[9]=y*s+b*l+w*c+x*g,e[10]=y*i+b*u+w*p+x*_,e[11]=y*o+b*h+w*f+x*v,y=r[12],b=r[13],w=r[14],x=r[15],e[12]=y*n+b*a+w*d+x*m,e[13]=y*s+b*l+w*c+x*g,e[14]=y*i+b*u+w*p+x*_,e[15]=y*o+b*h+w*f+x*v,e}function c(e,t,r){let n,s,i,o,a,l,u,h,d,c,p,f,m=r[0],g=r[1],_=r[2];return t===e?(e[12]=t[0]*m+t[4]*g+t[8]*_+t[12],e[13]=t[1]*m+t[5]*g+t[9]*_+t[13],e[14]=t[2]*m+t[6]*g+t[10]*_+t[14],e[15]=t[3]*m+t[7]*g+t[11]*_+t[15]):(n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],d=t[8],c=t[9],p=t[10],f=t[11],e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=h,e[8]=d,e[9]=c,e[10]=p,e[11]=f,e[12]=n*m+a*g+d*_+t[12],e[13]=s*m+l*g+c*_+t[13],e[14]=i*m+u*g+p*_+t[14],e[15]=o*m+h*g+f*_+t[15]),e}function p(e,t,r){let n=r[0],s=r[1],i=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*s,e[5]=t[5]*s,e[6]=t[6]*s,e[7]=t[7]*s,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function f(e,t,r,n){let i,o,a,l,u,h,d,c,p,f,m,g,_,v,y,b,w,x,j,E,M,T,A,O,S=n[0],C=n[1],k=n[2],P=Math.hypot(S,C,k);return Math.abs(P)<s?null:(P=1/P,S*=P,C*=P,k*=P,i=Math.sin(r),o=Math.cos(r),a=1-o,l=t[0],u=t[1],h=t[2],d=t[3],c=t[4],p=t[5],f=t[6],m=t[7],g=t[8],_=t[9],v=t[10],y=t[11],b=S*S*a+o,w=C*S*a+k*i,x=k*S*a-C*i,j=S*C*a-k*i,E=C*C*a+o,M=k*C*a+S*i,T=S*k*a+C*i,A=C*k*a-S*i,O=k*k*a+o,e[0]=l*b+c*w+g*x,e[1]=u*b+p*w+_*x,e[2]=h*b+f*w+v*x,e[3]=d*b+m*w+y*x,e[4]=l*j+c*E+g*M,e[5]=u*j+p*E+_*M,e[6]=h*j+f*E+v*M,e[7]=d*j+m*E+y*M,e[8]=l*T+c*A+g*O,e[9]=u*T+p*A+_*O,e[10]=h*T+f*A+v*O,e[11]=d*T+m*A+y*O,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function m(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function g(e,t){let r=t[0],n=t[1],s=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],h=t[10];return e[0]=Math.hypot(r,n,s),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,h),e}function _(e){let t=e[0],r=e[1],n=e[2],s=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const h=t*t+r*r+n*n,d=s*s+i*i+o*o,c=a*a+l*l+u*u;return Math.sqrt(Math.max(h,d,c))}const v=function(){const e=[1,1,1];return function(t,r){let n=e;g(n,r);let s=1/n[0],i=1/n[1],o=1/n[2],a=r[0]*s,l=r[1]*i,u=r[2]*o,h=r[4]*s,d=r[5]*i,c=r[6]*o,p=r[8]*s,f=r[9]*i,m=r[10]*o,_=a+d+m,v=0;return _>0?(v=2*Math.sqrt(_+1),t[3]=.25*v,t[0]=(c-f)/v,t[1]=(p-u)/v,t[2]=(l-h)/v):a>d&&a>m?(v=2*Math.sqrt(1+a-d-m),t[3]=(c-f)/v,t[0]=.25*v,t[1]=(l+h)/v,t[2]=(p+u)/v):d>m?(v=2*Math.sqrt(1+d-a-m),t[3]=(p-u)/v,t[0]=(l+h)/v,t[1]=.25*v,t[2]=(c+f)/v):(v=2*Math.sqrt(1+m-a-d),t[3]=(l-h)/v,t[0]=(p+u)/v,t[1]=(c+f)/v,t[2]=.25*v),t}}();function y(e,t,r,s){let i=n.length([e[0],e[1],e[2]]);const o=n.length([e[4],e[5],e[6]]),a=n.length([e[8],e[9],e[10]]);h(e)<0&&(i=-i),r[0]=e[12],r[1]=e[13],r[2]=e[14];const l=e.slice(),u=1/i,d=1/o,c=1/a;l[0]*=u,l[1]*=u,l[2]*=u,l[4]*=d,l[5]*=d,l[6]*=d,l[8]*=c,l[9]*=c,l[10]*=c,v(t,l),s[0]=i,s[1]=o,s[2]=a}function b(e,t,r,n){const s=e,i=t[0],o=t[1],a=t[2],l=t[3],u=i+i,h=o+o,d=a+a,c=i*u,p=i*h,f=i*d,m=o*h,g=o*d,_=a*d,v=l*u,y=l*h,b=l*d,w=n[0],x=n[1],j=n[2];return s[0]=(1-(m+_))*w,s[1]=(p+b)*w,s[2]=(f-y)*w,s[3]=0,s[4]=(p-b)*x,s[5]=(1-(c+_))*x,s[6]=(g+v)*x,s[7]=0,s[8]=(f+y)*j,s[9]=(g-v)*j,s[10]=(1-(c+m))*j,s[11]=0,s[12]=r[0],s[13]=r[1],s[14]=r[2],s[15]=1,s}function w(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3],l=s+s,u=i+i,h=o+o,d=s*l,c=s*u,p=s*h,f=i*u,m=i*h,g=o*h,_=a*l,v=a*u,y=a*h,b=n[0],w=n[1],x=n[2];return e[0]=(1-(f+g))*b,e[1]=(c+y)*b,e[2]=(p-v)*b,e[3]=0,e[4]=(c-y)*w,e[5]=(1-(d+g))*w,e[6]=(m+_)*w,e[7]=0,e[8]=(p+v)*x,e[9]=(m-_)*x,e[10]=(1-(d+f))*x,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function x(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,h=n*o,d=n*a,c=s*o,p=s*a,f=s*l,m=i*o,g=i*a,_=i*l;return e[0]=1-d-f,e[1]=h+_,e[2]=c-g,e[3]=0,e[4]=h-_,e[5]=1-u-f,e[6]=p+m,e[7]=0,e[8]=c+g,e[9]=p-m,e[10]=1-u-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function j(e,t,r,n,s){let i=1/Math.tan(t/2),o=1/(n-s);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(s+n)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*s*n*o,e[15]=0,e}function E(e,t,r,n,s,i,o){let a=1/(t-r),l=1/(n-s),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(s+n)*l,e[14]=(o+i)*u,e[15]=1,e}function M(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=n[0],l=n[1],u=n[2],h=s-r[0],d=i-r[1],c=o-r[2],p=h*h+d*d+c*c;0===p?c=1:(p=1/Math.sqrt(p),h*=p,d*=p,c*=p);let f=l*c-u*d,m=u*h-a*c,g=a*d-l*h;return p=f*f+m*m+g*g,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*c-u*d,m=u*h-a*c,g=a*d-l*h,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,e[0]=f,e[1]=m,e[2]=g,e[3]=0,e[4]=d*g-c*m,e[5]=c*f-h*g,e[6]=h*m-d*f,e[7]=0,e[8]=h,e[9]=d,e[10]=c,e[11]=0,e[12]=s,e[13]=i,e[14]=o,e[15]=1,e}function T(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function A(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function O(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>_,conjugate:()=>c,copy:()=>m,dot:()=>y,fromEuler:()=>f,fromMat3:()=>p,identity:()=>s,invert:()=>d,length:()=>w,lerp:()=>b,multiply:()=>o,normalize:()=>x,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,scale:()=>v,set:()=>g,setAxisAngle:()=>i,slerp:()=>h});var n=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function s(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],h=r[3];return e[0]=n*h+o*a+s*u-i*l,e[1]=s*h+o*l+i*a-n*u,e[2]=i*h+o*u+n*l-s*a,e[3]=o*h-n*a-s*l-i*u,e}function a(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+o*a,e[1]=s*l+i*a,e[2]=i*l-s*a,e[3]=o*l-n*a,e}function l(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l-i*a,e[1]=s*l+o*a,e[2]=i*l+n*a,e[3]=o*l-s*a,e}function u(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+s*a,e[1]=s*l-n*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function h(e,t,r,n){let s,i,o,a,l,u=t[0],h=t[1],d=t[2],c=t[3],p=r[0],f=r[1],m=r[2],g=r[3];return i=u*p+h*f+d*m+c*g,i<0&&(i=-i,p=-p,f=-f,m=-m,g=-g),1-i>1e-6?(s=Math.acos(i),o=Math.sin(s),a=Math.sin((1-n)*s)/o,l=Math.sin(n*s)/o):(a=1-n,l=n),e[0]=a*u+l*p,e[1]=a*h+l*f,e[2]=a*d+l*m,e[3]=a*c+l*g,e}function d(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-n*a,e[2]=-s*a,e[3]=i*a,e}function c(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let n=0;t[4]>t[0]&&(n=1),t[8]>t[3*n+n]&&(n=2);let s=(n+1)%3,i=(n+2)%3;r=Math.sqrt(t[3*n+n]-t[3*s+s]-t[3*i+i]+1),e[n]=.5*r,r=.5/r,e[3]=(t[3*s+i]-t[3*i+s])*r,e[s]=(t[3*s+n]+t[3*n+s])*r,e[i]=(t[3*i+n]+t[3*n+i])*r}return e}function f(e,t,r="YXZ"){let n=Math.sin(.5*t[0]),s=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"YXZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"ZXY"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"ZYX"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"YZX"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l-n*i*a):"XZY"===r&&(e[0]=n*o*l-s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l+n*i*a),e}const m=n.copy,g=n.set,_=n.add,v=n.scale,y=n.dot,b=n.lerp,w=n.length,x=n.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>o,angle:()=>M,copy:()=>s,cross:()=>v,distance:()=>d,divide:()=>u,dot:()=>_,exactEquals:()=>T,inverse:()=>m,length:()=>n,lerp:()=>y,multiply:()=>l,negate:()=>f,normalize:()=>g,scale:()=>h,scaleRotateMat4:()=>x,set:()=>i,smoothLerp:()=>b,squaredDistance:()=>c,squaredLength:()=>p,subtract:()=>a,transformMat3:()=>j,transformMat4:()=>w,transformQuat:()=>E});function n(e){let t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function h(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function d(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}function c(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}function p(e){let t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function m(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function g(e,t){let r=t[0],n=t[1],s=t[2],i=r*r+n*n+s*s;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function _(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function v(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=s*l-i*a,e[1]=i*o-n*l,e[2]=n*a-s*o,e}function y(e,t,r,n){let s=t[0],i=t[1],o=t[2];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e}function b(e,t,r,n,s){const i=Math.exp(-n*s);let o=t[0],a=t[1],l=t[2];return e[0]=r[0]+(o-r[0])*i,e[1]=r[1]+(a-r[1])*i,e[2]=r[2]+(l-r[2])*i,e}function w(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i+r[12])/o,e[1]=(r[1]*n+r[5]*s+r[9]*i+r[13])/o,e[2]=(r[2]*n+r[6]*s+r[10]*i+r[14])/o,e}function x(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i)/o,e[1]=(r[1]*n+r[5]*s+r[9]*i)/o,e[2]=(r[2]*n+r[6]*s+r[10]*i)/o,e}function j(e,t,r){let n=t[0],s=t[1],i=t[2];return e[0]=n*r[0]+s*r[3]+i*r[6],e[1]=n*r[1]+s*r[4]+i*r[7],e[2]=n*r[2]+s*r[5]+i*r[8],e}function E(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*s,h=l*n-o*i,d=o*s-a*n,c=a*d-l*h,p=l*u-o*d,f=o*h-a*u,m=2*r[3];return u*=m,h*=m,d*=m,c*=2,p*=2,f*=2,e[0]=n+u+c,e[1]=s+h+p,e[2]=i+d+f,e}const M=function(){const e=[0,0,0],t=[0,0,0];return function(r,n){s(e,r),s(t,n),g(e,e),g(t,t);let i=_(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function T(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>i,copy:()=>n,dot:()=>u,length:()=>a,lerp:()=>h,normalize:()=>l,scale:()=>o,set:()=>s});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function s(e,t,r,n,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],n=e[2],s=e[3];return Math.sqrt(t*t+r*r+n*n+s*s)}function l(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=n*o,e[2]=s*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function h(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e[3]=a+n*(r[3]-a),e}},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],n=/([A-Z])/g,s={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),s=r.length;s--;){var i=r[s]+n;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in s?s[e]:s[e]=i(e)},e.exports.dash=function(e){return e=i(e),n.test(e)&&(e="-"+e.replace(n,"-$1"),n.lastIndex=0),e.toLowerCase()}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/webpack-dev-server/client/utils/log.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}var o=function(){return e=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){n.log.error(e)}},t=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}],t&&s(e.prototype,t),r&&s(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":(e,t,r)=>{"use strict";r.r(t),r.d(t,{createSocketURL:()=>A,getCurrentScriptSource:()=>g,parseURL:()=>_});var n=r("./node_modules/webpack/hot/log.js"),s=r.n(n),i=r("./node_modules/webpack/hot/emitter.js"),o=r.n(i),a=r("./node_modules/webpack-dev-server/client/socket.js"),l=r("./node_modules/webpack-dev-server/client/overlay.js"),u=r("./node_modules/webpack-dev-server/client/utils/log.js"),h=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/progress.js");function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var f=function(e){"object"==typeof e&&["warnings","errors","runtimeErrors"].forEach((function(t){if("string"==typeof e[t]){var r=decodeURIComponent(e[t]);e[t]=new Function("message","var callback = ".concat(r,"\n        return callback(message)"))}}))},m={isUnloading:!1,currentHash:r.h()},g=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")},_=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.slice(1).split("&"),n=0;n<r.length;n++){var s=r[n].split("=");t[s[0]]=decodeURIComponent(s[1])}else{var i,o=g();try{i=new URL(o,self.location.href)}catch(e){}i&&((t=i).fromCurrentScript=!0)}return t},v=_("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),y={"Hot Module Replacement":!1,"Live Reloading":!1,Progress:!1,Overlay:!1},b={hot:!1,liveReload:!1,progress:!1,overlay:!1};if("true"===v.hot&&(b.hot=!0,y["Hot Module Replacement"]=!0),"true"===v["live-reload"]&&(b.liveReload=!0,y["Live Reloading"]=!0),"true"===v.progress&&(b.progress=!0,y.Progress=!0),v.overlay){try{b.overlay=JSON.parse(v.overlay)}catch(e){u.log.error("Error parsing overlay options from resource query:",e)}"object"==typeof b.overlay&&(b.overlay=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({errors:!0,warnings:!0,runtimeErrors:!0},b.overlay),f(b.overlay)),y.Overlay=!0}v.logging&&(b.logging=v.logging),void 0!==v.reconnect&&(b.reconnect=Number(v.reconnect));var w=function(e){s().setLogLevel("verbose"===e||"log"===e?"info":e),(0,u.setLogLevel)(e)};b.logging&&w(b.logging);!function(e){var t=Object.keys(e);if(e&&0!==t.length){for(var r="Server started:",n=0;n<t.length;n++){var s=t[n];r+=" ".concat(s," ").concat(e[s]?"enabled":"disabled",",")}r=r.slice(0,-1).concat("."),u.log.info(r)}}(y),self.addEventListener("beforeunload",(function(){m.isUnloading=!0}));var x="undefined"!=typeof window?(0,l.createOverlay)("object"==typeof b.overlay?{trustedTypesPolicyName:b.overlay.trustedTypesPolicyName,catchRuntimeError:b.overlay.runtimeErrors}:{trustedTypesPolicyName:!1,catchRuntimeError:b.overlay}):{send:function(){}},j=function(e,t){var r=e.hot,n=e.liveReload;if(!t.isUnloading){var s=t.currentHash,i=t.previousHash;if(!(s.indexOf(i)>=0)){var a=self.location.search.toLowerCase(),l=-1===a.indexOf("webpack-dev-server-hot=false"),h=-1===a.indexOf("webpack-dev-server-live-reload=false");if(r&&l)u.log.info("App hot update..."),o().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(n&&h)var d=self,c=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&p(d,c)}))}}function p(e,t){clearInterval(t),u.log.info("App updated. Reloading..."),e.location.reload()}},E=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g"),M=function(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace(E,"")},T={hot:function(){"false"!==v.hot&&(b.hot=!0)},liveReload:function(){"false"!==v["live-reload"]&&(b.liveReload=!0)},invalid:function(){u.log.info("App updated. Recompiling..."),b.overlay&&x.send({type:"DISMISS"}),(0,h.default)("Invalid")},hash:function(e){m.previousHash=m.currentHash,m.currentHash=e},logging:w,overlay:function(e){"undefined"!=typeof document&&(b.overlay=e,f(b.overlay))},reconnect:function(e){"false"!==v.reconnect&&(b.reconnect=e)},progress:function(e){b.progress=e},"progress-update":function(e){if(b.progress&&u.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,d.isProgressSupported)()&&"string"==typeof b.progress){var t=document.querySelector("wds-progress");t||((0,d.defineProgressElement)(),t=document.createElement("wds-progress"),document.body.appendChild(t)),t.setAttribute("progress",e.percent),t.setAttribute("type",b.progress)}(0,h.default)("Progress",e)},"still-ok":function(){u.log.info("Nothing changed."),b.overlay&&x.send({type:"DISMISS"}),(0,h.default)("StillOk")},ok:function(){(0,h.default)("Ok"),b.overlay&&x.send({type:"DISMISS"}),j(b,m)},"static-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){u.log.warn("Warnings while compiling.");var r=e.map((function(e){var t=(0,l.formatProblem)("warning",e),r=t.header,n=t.body;return"".concat(r,"\n").concat(M(n))}));(0,h.default)("Warnings",r);for(var n=0;n<r.length;n++)u.log.warn(r[n]);var s="boolean"==typeof b.overlay?b.overlay:b.overlay&&b.overlay.warnings;s&&(("function"==typeof s?e.filter(s):e).length&&x.send({type:"BUILD_ERROR",level:"warning",messages:e}));t&&t.preventReloading||j(b,m)},errors:function(e){u.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,l.formatProblem)("error",e),r=t.header,n=t.body;return"".concat(r,"\n").concat(M(n))}));(0,h.default)("Errors",t);for(var r=0;r<t.length;r++)u.log.error(t[r]);var n="boolean"==typeof b.overlay?b.overlay:b.overlay&&b.overlay.errors;n&&(("function"==typeof n?e.filter(n):e).length&&x.send({type:"BUILD_ERROR",level:"error",messages:e}))},error:function(e){u.log.error(e)},close:function(){u.log.info("Disconnected!"),b.overlay&&x.send({type:"DISMISS"}),(0,h.default)("Close")}},A=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var n=e.protocol||self.location.protocol;("auto:"===n||t&&r&&"https:"===self.location.protocol)&&(n=self.location.protocol),n=n.replace(/^(?:http|.+-extension|file)/i,"ws");var s="";e.username&&(s=e.username,e.password&&(s=s.concat(":",e.password)));var i=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),o=e.port;o&&"0"!==o||(o=self.location.port);var a="/ws";return e.pathname&&!e.fromCurrentScript&&(a=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var r=e.auth||"";r&&(r=(r=encodeURIComponent(r)).replace(/%3A/i,":"),r+="@");var n="";e.hostname&&(n=r+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(n+=":".concat(e.port)));var s=e.pathname||"";e.slashes?(n="//".concat(n||""),s&&"/"!==s.charAt(0)&&(s="/".concat(s))):n||(n="");var i=e.search||"";i&&"?"!==i.charAt(0)&&(i="?".concat(i));var o=e.hash||"";return o&&"#"!==o.charAt(0)&&(o="#".concat(o)),s=s.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),i=i.replace("#","%23"),"".concat(t).concat(n).concat(s).concat(i).concat(o)}({protocol:n,auth:s,hostname:i,port:o,pathname:a,slashes:!0})},O=A(v);(0,a.default)(O,T,b.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/tapable.js":function(e,t,r){function n(){return{call:function(){}}}r.r(t),r.d(t,{SyncBailHook:function(){return n}})},"./node_modules/webpack/lib/logging/Logger.js":function(e){function t(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,s(n.key),n)}}function s(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}var i=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});e.exports.LogType=i;var o=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),u=function(){return e=function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[o]=t,this.getChildLogger=r},r=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this[o](i.error,r)}}},{key:"trace",value:function(){this[o](i.trace,["Trace"])}},{key:"clear",value:function(){this[o](i.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupCollapsed,t)}},{key:"groupEnd",value:function(){this[o](i.groupEnd)}},{key:"profile",value:function(e){this[o](i.profile,[e])}},{key:"profileEnd",value:function(e){this[o](i.profileEnd,[e])}},{key:"time",value:function(e){this[a]=this[a]||new Map,this[a].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var r=this[a]&&this[a].get(e);if(!r)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var n=process.hrtime(r);this[o](i.time,[e].concat(t(n)))}},{key:"timeEnd",value:function(e){var r=this[a]&&this[a].get(e);if(!r)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var n=process.hrtime(r);this[a].delete(e),this[o](i.time,[e].concat(t(n)))}},{key:"timeAggregate",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[a].delete(e),this[l]=this[l]||new Map;var n=this[l].get(e);void 0!==n&&(r[1]+n[1]>1e9?(r[0]+=n[0]+1,r[1]=r[1]-1e9+n[1]):(r[0]+=n[0],r[1]+=n[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var r=this[l].get(e);void 0!==r&&(this[l].delete(e),this[o](i.time,[e].concat(t(r))))}}}],r&&n(e.prototype,r),s&&n(e,s),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,r,s}();e.exports.Logger=u},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||e["@@iterator"];if(null!=r){var n,s,i,o,a=[],l=!0,u=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(a.push(n.value),a.length!==t);l=!0);}catch(e){u=!0,s=e}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(u)throw s}}return a}}(e,t)||i(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return o(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}var a=r("./node_modules/webpack/lib/logging/Logger.js").LogType,l=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},u={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,i=e.debug,o=void 0!==i&&i,h=e.console,d="boolean"==typeof o?[function(){return o}]:[].concat(o).map(l),c=u["".concat(r)]||0;return function(e,t,r){var i=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(s(r.slice(1))):["[".concat(e,"]")].concat(s(r)):[]},o=d.some((function(t){return t(e)}));switch(t){case a.debug:if(!o)return;"function"==typeof h.debug?h.debug.apply(h,s(i())):h.log.apply(h,s(i()));break;case a.log:if(!o&&c>u.log)return;h.log.apply(h,s(i()));break;case a.info:if(!o&&c>u.info)return;h.info.apply(h,s(i()));break;case a.warn:if(!o&&c>u.warn)return;h.warn.apply(h,s(i()));break;case a.error:if(!o&&c>u.error)return;h.error.apply(h,s(i()));break;case a.trace:if(!o)return;h.trace();break;case a.groupCollapsed:if(!o&&c>u.log)return;if(!o&&c>u.verbose){"function"==typeof h.groupCollapsed?h.groupCollapsed.apply(h,s(i())):h.log.apply(h,s(i()));break}case a.group:if(!o&&c>u.log)return;"function"==typeof h.group?h.group.apply(h,s(i())):h.log.apply(h,s(i()));break;case a.groupEnd:if(!o&&c>u.log)return;"function"==typeof h.groupEnd&&h.groupEnd();break;case a.time:if(!o&&c>u.log)return;var l=n(r,3),p=l[0],f=1e3*l[1]+l[2]/1e6,m="[".concat(e,"] ").concat(p,": ").concat(f," ms");"function"==typeof h.logTime?h.logTime(m):h.log(m);break;case a.profile:"function"==typeof h.profile&&h.profile.apply(h,s(i()));break;case a.profileEnd:"function"==typeof h.profileEnd&&h.profileEnd.apply(h,s(i()));break;case a.clear:if(!o&&c>u.log)return;"function"==typeof h.clear&&h.clear();break;case a.status:if(!o&&c>u.info)return;"function"==typeof h.status?r&&0!==r.length?h.status.apply(h,s(i())):h.status():r&&0!==r.length&&h.info.apply(h,s(i()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)({}).hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(null,arguments)}var s=r("./client-src/modules/logger/tapable.js").SyncBailHook,i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,o=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=o(a);e.exports.getLogger=function(t){return new i((function(r,n){void 0===e.exports.hooks.log.call(t,r,n)&&l(t,r,n)}),(function(r){return e.exports.getLogger("".concat(t,"/").concat(r))}))},e.exports.configureDefaultLogger=function(e){n(a,e),l=o(a)},e.exports.hooks={log:new s(["origin","type","args"])}}},r={};function n(t){var s=r[t];if(void 0!==s)return s.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};!function(){n.r(s),n.d(s,{default:function(){return e}});var e=n("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var o in s)i[o]=s[o];s.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{createOverlay:()=>b,formatProblem:()=>y});var n=r("./node_modules/ansi-html-community/index.js"),s=r.n(n);function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var l=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},u={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"};var h=function(e){var t,r,n,s,i,a,l,u,h=e.hideOverlay,d=e.showOverlay;return r={actions:{dismissMessages:function(){return{messages:[],level:"error",messageSource:"build"}},appendMessages:function(e,t){return{messages:e.messages.concat(t.messages),level:t.level||e.level,messageSource:"RUNTIME_ERROR"===t.type?"runtime":"build"}},setMessages:function(e,t){return{messages:t.messages,level:t.level||e.level,messageSource:"RUNTIME_ERROR"===t.type?"runtime":"build"}},hideOverlay:h,showOverlay:d}},n=(t={initial:"hidden",context:{level:"error",messages:[],messageSource:"build"},states:{hidden:{on:{BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["setMessages","showOverlay"]}}},displayBuildError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["appendMessages","showOverlay"]}}},displayRuntimeError:{on:{DISMISS:{target:"hidden",actions:["dismissMessages","hideOverlay"]},RUNTIME_ERROR:{target:"displayRuntimeError",actions:["appendMessages","showOverlay"]},BUILD_ERROR:{target:"displayBuildError",actions:["setMessages","showOverlay"]}}}}}).states,s=t.context,i=t.initial,a=r.actions,l=i,u=s,{send:function(e){var t=n[l].on,r=t&&t[e.type];r&&(l=r.target,r.actions&&r.actions.forEach((function(t){var r=a[t],n=r&&r(u,e);n&&(u=o(o({},u),n))})))}}},d=function(e){if(!(e&&e instanceof Error))throw new Error("parseErrorToStacks expects Error object");if("string"==typeof e.stack)return e.stack.split("\n").filter((function(t){return t!=="Error: ".concat(e.message)}))},c={error:{backgroundColor:"rgba(206, 17, 38, 0.1)",color:"#fccfcf"},warning:{backgroundColor:"rgba(251, 245, 180, 0.1)",color:"#fbf5b4"}},p={position:"fixed",top:0,left:0,right:0,bottom:0,width:"100vw",height:"100vh",border:"none","z-index":9999999999},f={position:"fixed",boxSizing:"border-box",left:0,top:0,right:0,bottom:0,width:"100vw",height:"100vh",fontSize:"large",padding:"2rem 2rem 4rem 2rem",lineHeight:"1.2",whiteSpace:"pre-wrap",overflow:"auto",backgroundColor:"rgba(0, 0, 0, 0.9)",color:"white"},m={color:"#e83b46",fontSize:"2em",whiteSpace:"pre-wrap",fontFamily:"sans-serif",margin:"0 2rem 2rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"},g={color:"#ffffff",lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0,backgroundColor:"transparent",border:"none"},_={color:"#e83b46",fontSize:"1.2em",marginBottom:"1rem",fontFamily:"sans-serif"},v={lineHeight:"1.5",fontSize:"1rem",fontFamily:"Menlo, Consolas, monospace"};s().setColors({reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"});var y=function(e,t){var r="warning"===e?"WARNING":"ERROR",n="";if("string"==typeof t)n+=t;else{var s=t.file||"",i=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",o=t.loc;r+="".concat(i||s?" in ".concat(i?"".concat(i).concat(s?" (".concat(s,")"):""):s).concat(o?" ".concat(o):""):""),n+=t.message||""}return Array.isArray(t.stack)&&t.stack.forEach((function(e){"string"==typeof e&&(n+="\r\n".concat(e))})),{header:r,body:n}},b=function(e){var t,r,n,i,a=[];function b(e,t){Object.keys(t).forEach((function(r){e.style[r]=t[r]}))}function w(e,s){if(r)return r.innerHTML=i?i.createHTML(""):"",void e(r);a.push(e),t||function(e){window.trustedTypes&&(i=window.trustedTypes.createPolicy(e||"webpack-dev-server#overlay",{createHTML:function(e){return e}})),(t=document.createElement("iframe")).id="webpack-dev-server-client-overlay",t.src="about:blank",b(t,p),t.onload=function(){var e=t.contentDocument.createElement("div");r=t.contentDocument.createElement("div"),e.id="webpack-dev-server-client-overlay-div",b(e,f),(n=document.createElement("div")).innerText="Compiled with problems:",b(n,m);var s=document.createElement("button");b(s,g),s.innerText="×",s.ariaLabel="Dismiss",s.addEventListener("click",(function(){E.send({type:"DISMISS"})})),e.appendChild(n),e.appendChild(s),e.appendChild(r),t.contentDocument.body.appendChild(e),a.forEach((function(t){t(e)})),a=[],t.onload=null},document.body.appendChild(t)}(s)}function x(e,t,a,h){w((function(){n.innerText="runtime"===h?"Uncaught runtime errors:":"Compiled with problems:",t.forEach((function(t){var n=document.createElement("div");b(n,o(o({},"warning"===e?c.warning:c.error),{},{padding:"1rem 1rem 1.5rem 1rem"}));var a=document.createElement("div"),h=y(e,t),d=h.header,p=h.body;a.innerText=d,b(a,_),t.moduleIdentifier&&(b(a,{cursor:"pointer"}),a.setAttribute("data-can-open",!0),a.addEventListener("click",(function(){fetch("/webpack-dev-server/open-editor?fileName=".concat(t.moduleIdentifier))})));var f=s()(function(e){return e?function(e,t,r){t.lastIndex=0;var n,s=t.exec(e);if(s){n="";var i=0;do{i!==s.index&&(n+=e.substring(i,s.index));var o=s[0];n+=r(o),i=s.index+o.length}while(s=t.exec(e));i!==e.length&&(n+=e.substring(i))}else n=e;return n}(e,/[<>'"&]/g,(function(e){var t=u[e];if(!t){var r=e.length>1?l(e,0):e.charCodeAt(0);t="&#".concat(r,";")}return t})):""}(p)),m=document.createElement("div");b(m,v),m.innerHTML=i?i.createHTML(f):f,n.appendChild(a),n.appendChild(m),r.appendChild(n)}))}),a)}var j,E=h({showOverlay:function(t){var r=t.level,n=void 0===r?"error":r,s=t.messages,i=t.messageSource;return x(n,s,e.trustedTypesPolicyName,i)},hideOverlay:function(){t&&(document.body.removeChild(t),t=null,r=null)}});if(e.catchRuntimeError){var M=function(t,r){var n=t instanceof Error?t:new Error(t||r);("function"!=typeof e.catchRuntimeError||e.catchRuntimeError(n))&&E.send({type:"RUNTIME_ERROR",messages:[{message:n.message,stack:d(n)}]})};j=function(e){var t=e.error,r=e.message;(t||r)&&M(t,r)},window.addEventListener("error",j),function(e){window.addEventListener("unhandledrejection",e)}((function(e){var t=e.reason;M(t,"Unknown promise rejection reason")}))}return E}},"./node_modules/webpack-dev-server/client/progress.js":(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,s(n.key),n)}}function s(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}function i(e,t,r){return t=u(t),function(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,a()?Reflect.construct(t,r||[],u(e).constructor):t.apply(e,r))}function o(e){var t="function"==typeof Map?new Map:void 0;return o=function(e){if(null===e||!function(e){try{return-1!==Function.toString.call(e).indexOf("[native code]")}catch(t){return"function"==typeof e}}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return function(e,t,r){if(a())return Reflect.construct.apply(null,arguments);var n=[null];n.push.apply(n,t);var s=new(e.bind.apply(e,n));return r&&l(s,r.prototype),s}(e,arguments,u(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l(r,e)},o(e)}function a(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(a=function(){return!!e})()}function l(e,t){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},l(e,t)}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function h(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function d(e,t,r){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:r;throw new TypeError("Private element is not present on this object")}function c(){return"customElements"in self&&!!HTMLElement.prototype.attachShadow}function p(){var e;if(!customElements.get("wds-progress")){var t=new WeakSet,r=function(e){function r(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),h(e=i(this,r),t),e.attachShadow({mode:"open"}),e.maxDashOffset=-219.99078369140625,e.animationTimer=null,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&l(e,t)}(r,e),o=r,u=[{key:"observedAttributes",get:function(){return["progress","type"]}}],(a=[{key:"connectedCallback",value:function(){d(t,this,s).call(this)}},{key:"attributeChangedCallback",value:function(e,r,n){"progress"===e?d(t,this,c).call(this,Number(n)):"type"===e&&d(t,this,s).call(this)}}])&&n(o.prototype,a),u&&n(o,u),Object.defineProperty(o,"prototype",{writable:!1}),o;var o,a,u}(o(HTMLElement));e=r,customElements.define("wds-progress",r)}function s(){var r,n;clearTimeout(this.animationTimer),this.animationTimer=null;var s=null===(r=this.getAttribute("type"))||void 0===r?void 0:r.toLowerCase();this.type="circular"===s?"circular":"linear";var i="circular"===this.type?a.call(e):u.call(e);this.shadowRoot.innerHTML=i,this.initialProgress=null!==(n=Number(this.getAttribute("progress")))&&void 0!==n?n:0,d(t,this,c).call(this,this.initialProgress)}function a(){return'\n        <style>\n        :host {\n            width: 200px;\n            height: 200px;\n            position: fixed;\n            right: 5%;\n            top: 5%;\n            transition: opacity .25s ease-in-out;\n            z-index: 2147483645;\n        }\n\n        circle {\n            fill: #282d35;\n        }\n\n        path {\n            fill: rgba(0, 0, 0, 0);\n            stroke: rgb(186, 223, 172);\n            stroke-dasharray: 219.99078369140625;\n            stroke-dashoffset: -219.99078369140625;\n            stroke-width: 10;\n            transform: rotate(90deg) translate(0px, -80px);\n        }\n\n        text {\n            font-family: \'Open Sans\', sans-serif;\n            font-size: 18px;\n            fill: #ffffff;\n            dominant-baseline: middle;\n            text-anchor: middle;\n        }\n\n        tspan#percent-super {\n            fill: #bdc3c7;\n            font-size: 0.45em;\n            baseline-shift: 10%;\n        }\n\n        @keyframes fade {\n            0% { opacity: 1; transform: scale(1); }\n            100% { opacity: 0; transform: scale(0); }\n        }\n\n        .disappear {\n            animation: fade 0.3s;\n            animation-fill-mode: forwards;\n            animation-delay: 0.5s;\n        }\n\n        .hidden {\n            display: none;\n        }\n        </style>\n        <svg id="progress" class="hidden noselect" viewBox="0 0 80 80">\n        <circle cx="50%" cy="50%" r="35"></circle>\n        <path d="M5,40a35,35 0 1,0 70,0a35,35 0 1,0 -70,0"></path>\n        <text x="50%" y="51%">\n            <tspan id="percent-value">0</tspan>\n            <tspan id="percent-super">%</tspan>\n        </text>\n        </svg>\n      '}function u(){return'\n        <style>\n        :host {\n            position: fixed;\n            top: 0;\n            left: 0;\n            height: 4px;\n            width: 100vw;\n            z-index: 2147483645;\n        }\n\n        #bar {\n            width: 0%;\n            height: 4px;\n            background-color: rgb(186, 223, 172);\n        }\n\n        @keyframes fade {\n            0% { opacity: 1; }\n            100% { opacity: 0; }\n        }\n\n        .disappear {\n            animation: fade 0.3s;\n            animation-fill-mode: forwards;\n            animation-delay: 0.5s;\n        }\n\n        .hidden {\n            display: none;\n        }\n        </style>\n        <div id="progress"></div>\n        '}function c(e){var r=this.shadowRoot.querySelector("#progress");if("circular"===this.type){var n=this.shadowRoot.querySelector("path"),s=this.shadowRoot.querySelector("#percent-value"),i=(100-e)/100*this.maxDashOffset;n.style.strokeDashoffset=i,s.textContent=e}else r.style.width="".concat(e,"%");e>=100?d(t,this,f).call(this):e>0&&d(t,this,p).call(this)}function p(){this.shadowRoot.querySelector("#progress").classList.remove("hidden")}function f(){var e=this,r=this.shadowRoot.querySelector("#progress");"circular"===this.type?(r.classList.add("disappear"),r.addEventListener("animationend",(function(){r.classList.add("hidden"),d(t,e,c).call(e,0)}),{once:!0})):"linear"===this.type&&(r.classList.add("disappear"),this.animationTimer=setTimeout((function(){r.classList.remove("disappear"),r.classList.add("hidden"),r.style.width="0%",e.animationTimer=null}),800))}}r.r(t),r.d(t,{defineProgressElement:()=>p,isProgressSupported:()=>c})},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{client:()=>u,default:()=>d});var n=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),s=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=void 0!==i?void 0!==i.default?i.default:i:n.default,a=0,l=10,u=null,h=function(e,t,r){(u=new o(e)).onOpen((function(){a=0,void 0!==r&&(l=r)})),u.onClose((function(){if(0===a&&t.close(),u=null,a<l){var n=1e3*Math.pow(2,a)+100*Math.random();a+=1,s.log.info("Trying to reconnect..."),setTimeout((function(){h(e,t,r)}),n)}})),u.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data,r.params)}))};const d=h},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>o,setLogLevel:()=>i});var n=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),s=r.n(n);function i(e){s().configureDefaultLogger({level:e})}i("info");var o=s().getLogger("webpack-dev-server")},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var n,s=function(){return n.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),o=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void("undefined"!=typeof window&&window.location.reload());s()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),s()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),i("warning","[HMR] "+i.formatError(t)),"undefined"!=typeof window&&window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){n=t,s()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),o())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var n=e.filter((function(e){return t&&t.indexOf(e)<0})),s=r("./node_modules/webpack/hot/log.js");(n.length>0&&(s("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),n.forEach((function(e){s("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(s("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");s.groupCollapsed("info","[HMR]  - "+t.pop()),s("info","[HMR]  - "+e),s.groupEnd("info")}else s("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&s("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):s("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function s(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=s(i),e.exports.groupCollapsed=s(o),e.exports.groupEnd=s(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";var n,s;r.r(t),n=void 0,s=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:""}),e.hot.data&&e.hot.data.value&&e.hot.data.value!==n?e.hot.invalidate():e.hot.accept(),e.hot.dispose((function(e){e.value=n,s()}))}},n={};function s(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={id:e,loaded:!1,exports:{}},o={id:e,module:i,factory:r[e],require:s};return s.i.forEach((function(e){e(o)})),i=o.module,o.factory.call(i.exports,i,i.exports,o.require),i.loaded=!0,i.exports}s.m=r,s.c=n,s.i=[],s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>{},s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"e88667e8f63cecd854f1",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="floema:",s.l=(r,n,i,o)=>{if(e[r])e[r].push(n);else{var a,l;if(void 0!==i)for(var u=document.getElementsByTagName("script"),h=0;h<u.length;h++){var d=u[h];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+i){a=d;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var c=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var s=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((e=>e(n))),t)return t(n)},p=setTimeout(c.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=c.bind(null,a.onerror),a.onload=c.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,n={},i=s.c,o=[],a=[],l="idle",u=0,h=[];function d(e){l=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t).then((function(){}))}function c(){0==--u&&d("ready").then((function(){if(0===u){var e=h;h=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return d("check").then(s.hmrM).then((function(r){return r?d("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,i){return s.hmrC[i](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):d("ready").then((function(){return n}))},0===u?t():new Promise((function(e){h.push((function(){e(t())}))}));var t}))})):d(g()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):m(e)}function m(e){e=e||{},g();var n=t.map((function(t){return t(e)}));t=void 0;var s=n.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return d("abort").then((function(){throw s[0]}));var i=d("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var o,a=d("apply"),l=function(e){o||(o=e)},u=[];return n.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([i,a]).then((function(){return o?d("fail").then((function(){throw o})):r?m(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return u}))}))}function g(){if(r)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){r.forEach((function(r){s.hmrI[e](r,t)}))})),r=void 0,!0}s.hmrD=n,s.i.push((function(h){var m,g,_,v,y=h.module,b=function(t,r){var n=i[r];if(!n)return t;var s=function(s){if(n.hot.active){if(i[s]){var a=i[s].parents;-1===a.indexOf(r)&&a.push(r)}else o=[r],e=s;-1===n.children.indexOf(s)&&n.children.push(s)}else console.warn("[HMR] unexpected require("+s+") from disposed module "+r),o=[];return t(s)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var h in t)Object.prototype.hasOwnProperty.call(t,h)&&"e"!==h&&Object.defineProperty(s,h,a(h));return s.e=function(e,r){return function(e){switch(l){case"ready":d("prepare");case"prepare":return u++,e.then(c,c),e;default:return e}}(t.e(e,r))},s}(h.require,h.id);y.hot=(m=h.id,g=y,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:_=e!==m,_requireSelf:function(){o=g.parents.slice(),e=_?void 0:m,s(m)},active:!0,accept:function(e,t,r){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)v._acceptedDependencies[e[n]]=t||function(){},v._acceptedErrorHandlers[e[n]]=r;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)})),d("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return l;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:n[m]},e=void 0,v),y.parents=o,y.children=[],o=[],h.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{if("undefined"!=typeof document){var e=(e,t,r,n,i)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",s.nc&&(o.nonce=s.nc);return o.onerror=o.onload=r=>{if(o.onerror=o.onload=null,"load"===r.type)n();else{var s=r&&r.type,a=r&&r.target&&r.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+s+": "+a+")");l.name="ChunkLoadError",l.code="CSS_CHUNK_LOAD_FAILED",l.type=s,l.request=a,o.parentNode&&o.parentNode.removeChild(o),i(l)}},o.href=t,r?r.parentNode.insertBefore(o,r.nextSibling):document.head.appendChild(o),o},t=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var s=(o=r[n]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(s===e||s===t))return o}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var o;if((s=(o=i[n]).getAttribute("data-href"))===e||s===t)return o}},r=[],n=[],i=e=>({dispose:()=>{for(var e=0;e<r.length;e++){var t=r[e];t.parentNode&&t.parentNode.removeChild(t)}r.length=0},apply:()=>{for(var e=0;e<n.length;e++)n[e].rel="stylesheet";n.length=0}});s.hmrC.miniCss=(o,a,l,u,h,d)=>{h.push(i),o.forEach((i=>{var o=s.miniCssF(i),a=s.p+o,l=t(o,a);l&&u.push(new Promise(((t,s)=>{var o=e(i,a,l,(()=>{o.as="style",o.rel="preload",t()}),s);r.push(l),n.push(o)})))}))}}})(),(()=>{var e,t,r,n,i,o=s.hmrS_jsonp=s.hmrS_jsonp||{main:0},a={};function l(t,r){return e=r,new Promise(((e,r)=>{a[t]=e;var n=s.p+s.hu(t),i=new Error;s.l(n,(e=>{if(a[t]){a[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+n+": "+s+")",i.name="ChunkLoadError",i.type=n,i.request=s,r(i)}}))}))}function u(e){function a(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),o=i.id,a=i.chain,u=s.c[o];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var h=0;h<u.parents.length;h++){var d=u.parents[h],c=s.c[d];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([d]),moduleId:o,parentId:d};-1===t.indexOf(d)&&(c.hot._acceptedDependencies[o]?(r[d]||(r[d]=[]),l(r[d],[o])):(delete r[d],t.push(d),n.push({chain:a.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,t=void 0;var u={},h=[],d={},c=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(s.o(r,p)){var f=r[p],m=f?a(p):{type:"disposed",moduleId:p},g=!1,_=!1,v=!1,y="";switch(m.chain&&(y="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+m.moduleId+y));break;case"declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+y));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(m),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+y));break;case"accepted":e.onAccepted&&e.onAccepted(m),_=!0;break;case"disposed":e.onDisposed&&e.onDisposed(m),v=!0;break;default:throw new Error("Unexception type "+m.type)}if(g)return{error:g};if(_)for(p in d[p]=f,l(h,m.outdatedModules),m.outdatedDependencies)s.o(m.outdatedDependencies,p)&&(u[p]||(u[p]=[]),l(u[p],m.outdatedDependencies[p]));v&&(l(h,[m.moduleId]),d[p]=c)}r=void 0;for(var b,w=[],x=0;x<h.length;x++){var j=h[x],E=s.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&d[j]!==c&&!E.hot._selfInvalidated&&w.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var t,r=h.slice();r.length>0;){var i=r.pop(),a=s.c[i];if(a){var l={},d=a.hot._disposeHandlers;for(x=0;x<d.length;x++)d[x].call(null,l);for(s.hmrD[i]=l,a.hot.active=!1,delete s.c[i],delete u[i],x=0;x<a.children.length;x++){var c=s.c[a.children[x]];c&&((e=c.parents.indexOf(i))>=0&&c.parents.splice(e,1))}}}for(var p in u)if(s.o(u,p)&&(a=s.c[p]))for(b=u[p],x=0;x<b.length;x++)t=b[x],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(t){for(var r in d)s.o(d,r)&&(s.m[r]=d[r]);for(var n=0;n<i.length;n++)i[n](s);for(var o in u)if(s.o(u,o)){var a=s.c[o];if(a){b=u[o];for(var l=[],c=[],p=[],f=0;f<b.length;f++){var m=b[f],g=a.hot._acceptedDependencies[m],_=a.hot._acceptedErrorHandlers[m];if(g){if(-1!==l.indexOf(g))continue;l.push(g),c.push(_),p.push(m)}}for(var v=0;v<l.length;v++)try{l[v].call(null,b)}catch(r){if("function"==typeof c[v])try{c[v](r,{moduleId:o,dependencyId:p[v]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[v],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[v],error:r}),e.ignoreErrored||t(r)}}}for(var y=0;y<w.length;y++){var x=w[y],j=x.module;try{x.require(j)}catch(r){if("function"==typeof x.errorHandler)try{x.errorHandler(r,{moduleId:j,module:s.c[j]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:j,error:r}),e.ignoreErrored||t(r)}}return h}}}self.webpackHotUpdatefloema=(t,n,o)=>{for(var l in n)s.o(n,l)&&(r[l]=n[l],e&&e.push(l));o&&i.push(o),a[t]&&(a[t](),a[t]=void 0)},s.hmrI.jsonp=function(e,t){r||(r={},i=[],n=[],t.push(u)),s.o(r,e)||(r[e]=s.m[e])},s.hmrC.jsonp=function(e,a,h,d,c,p){c.push(u),t={},n=a,r=h.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){s.o(o,e)&&void 0!==o[e]?(d.push(l(e,p)),t[e]=!0):t[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,r){t&&s.o(t,e)&&!t[e]&&(r.push(l(e)),t[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true"),s("./node_modules/webpack/hot/dev-server.js"),s("./app/index.js");s("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ2JrckQsQ0FDWCxDQVVPLFNBQVMyQyxFQUFTM0MsRUFBSzNwRCxFQUFHdkIsR0FpQjdCLE9BaEJBa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksR0FBSzNwRCxFQUFFLEdBQUt2QixFQUFFLEdBQ2xCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ3BCa3JELEVBQUksSUFBTTNwRCxFQUFFLElBQU12QixFQUFFLElBQ2JrckQsQ0FDWCxDQVVPLFNBQVM0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LEVBQzdCTyxFQUFnQk4sRUFBZS92RCxRQUFPLFNBQVVwTCxFQUFLMXJCLEdBRXBELE9BREEwckIsRUFBSTFyQixJQUFPLEVBQ0owckIsQ0FDUixHQUFHLENBQUMsR0FDSjI3RCxFQUF1QixHQUN2QlYsRUFBU3hwRixTQUFRLFNBQVVza0YsR0FFekIzTyxFQUFvQjVsQyxFQUFFbzZDLEVBQWlCN0YsU0FDVnR4RSxJQUE3Qm0zRSxFQUFnQjdGLElBRWhCOEIsRUFBUzloRixLQUFLZ21GLEVBQWdCaEcsRUFBU3NGLElBQ3ZDRyxFQUFvQnpGLElBQVcsR0FFL0J5RixFQUFvQnpGLElBQVcsQ0FFakMsSUFDSTNPLEVBQW9CM3hELElBQ3ZCMnhELEVBQW9CM3hELEVBQUVnbkUsU0FBVyxTQUFVMUcsRUFBUzhCLEdBRWxEMkQsR0FDQXBVLEVBQW9CNWxDLEVBQUVnNkMsRUFBcUJ6RixLQUMxQ3lGLEVBQW9CekYsS0FFckI4QixFQUFTOWhGLEtBQUtnbUYsRUFBZ0JoRyxJQUM5QnlGLEVBQW9CekYsSUFBVyxFQUVqQyxFQUVGLEVBRUEzTyxFQUFvQnVRLEtBQU8sS0FDMUIsR0FBcUIsb0JBQVZ0NkUsTUFBdUIsTUFBTSxJQUFJd0UsTUFBTSxzQ0FDbEQsT0FBT3hFLE1BQU0rcEUsRUFBb0JwOUQsRUFBSW85RCxFQUFvQjZPLFFBQVF6L0MsTUFBTWlvRCxJQUN0RSxHQUF1QixNQUFwQkEsRUFBU25oRixPQUFaLENBQ0EsSUFBSW1oRixFQUFTM1osR0FBSSxNQUFNLElBQUlqakUsTUFBTSxtQ0FBcUM0OEUsRUFBU0MsWUFDL0UsT0FBT0QsRUFBU0UsTUFGa0IsQ0FFWixHQUNyQixNQ25mSHZYLEVBQW9CLCtLQUNwQkEsRUFBb0IsNENBQ3BCQSxFQUFvQixrQkFDTUEsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9hbmltYXRpb25zL0hpZ2hsaWdodC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvYW5pbWF0aW9ucy9MYWJlbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvYW5pbWF0aW9ucy9QYXJhZ3JhcGguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2FuaW1hdGlvbnMvVGl0bGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL0FzeW5jbG9hZC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY2xhc3Nlcy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NsYXNzZXMvQ29sb3JzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jbGFzc2VzL0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY2xhc3Nlcy9QYWdlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9JbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvY29tcG9uZW50cy9Ib21lLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL01lZGlhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL05hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL2NvbXBvbmVudHMvcHJlbG9hZGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvcGFnZXMvQWJvdXQvSW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3BhZ2VzL0NvbGxlY3Rpb25zL0luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9wYWdlcy9EZXRhaWwvSW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3BhZ2VzL0hvbWUvSW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vYXBwL3NoYWRlcnMvcGxhbmUtZnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvc2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly9mbG9lbWEvLi9hcHAvdXRpbHMvY29sb3JzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC91dGlscy90ZXh0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9hbnNpLWh0bWwtY29tbXVuaXR5L2luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvZ3NhcC9nc2FwLWNvcmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yT3duLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzSW4uanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VFYWNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxBcnJheXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZWFjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tZW1vaXplLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvQ2FtZXJhLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9NZXNoLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvUHJvZ3JhbS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1JlbmRlcmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVGV4dHVyZS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvUGxhbmUuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9FdWxlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9NYXQ0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvUXVhdC5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL1ZlYzMuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL01hdDNGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL01hdDRGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1F1YXRGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1ZlYzNGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1ZlYzRGdW5jLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy9wcmVmaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9wcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9kZXYtc2VydmVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzIiwid2VicGFjazovL2Zsb2VtYS8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiLCJ3ZWJwYWNrOi8vZmxvZW1hLy4vc3R5bGVzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2Zsb2VtYS93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svcnVudGltZS9jc3MgbG9hZGluZyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vZmxvZW1hL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJmbG9lbWE6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJpbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuLi9jbGFzc2VzL0FuaW1hdGlvbidcblxuaW1wb3J0IHsgY2FsY3VsYXRlLCBzcGxpdCB9IGZyb20gJy4uL3V0aWxzL3RleHQnXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIaWdobGlnaHQgZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvciAoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudCxcbiAgICAgIGVsZW1lbnRzXG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcblxuICAgIHRoaXMudGltZWxpbmVJbiA9IEdTQVAudGltZWxpbmVcbiAgICAoe1xuICAgICAgZGVsYXk6IDAuNVxuICAgIH0pO1xuXG4gICAgdGhpcy50aW1lbGluZUluLmZyb21Ubyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgIHNjYWxlOiAxLjIsXG4gICAgfSwge1xuICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgIGVhc2U6ICdleHBvLm91dCcsXG4gICAgICAgIHNjYWxlOiAxLFxuXG4gICAgICB9KTtcbiAgfVxuICBhbmltYXRlT3V0KCkge1xuICAgIEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgYXV0b0FscGhhOiAwXG4gICAgfSlcbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuXG4gIH1cbn1cbiIsImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4uL2NsYXNzZXMvQW5pbWF0aW9uJ1xuXG5pbXBvcnQgeyBjYWxjdWxhdGUsIHNwbGl0IH0gZnJvbSAnLi4vdXRpbHMvdGV4dCdcbmltcG9ydCBlYWNoIGZyb20gJ2xvZGFzaC9lYWNoJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYmVsIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IgKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBlbGVtZW50c1xuICAgIH0pXG5cbiAgICB0aGlzLmVsZW1lbnRMaW5lc1NwYW5zID0gc3BsaXQoe1xuICAgICAgYXBwZW5kOnRydWUsXG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsIFxuICAgIH0pXG4gIH1cblxuICBhbmltYXRlSW4oKSB7XG4gICAgdGhpcy50aW1lbGluZUluID0gR1NBUC50aW1lbGluZSh7ZGVsYXk6IDAuNX0pO1xuICAgIHRoaXMudGltZWxpbmVJbi5zZXQodGhpcy5lbGVtZW50LCB7IGF1dG9BbHBoYTogMSB9KTtcbiAgICBlYWNoKHRoaXMuZWxlbWVudHNMaW5lcywgKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICB0aGlzLnRpbWVsaW5lSW4uZnJvbVRvKGxpbmUsIHtcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICB5OiAnMTAwJSdcbiAgICAgIH0sICB7XG4gICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgZGVsYXk6IGluZGV4ICogMC4yLFxuICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICBlYXNlOiAnZXhwby5vdXQnLFxuICAgICAgICB5OiAnMCUnXG4gICAgICB9LCAwKVxuICAgIH0pXG4gIH1cbiAgYW5pbWF0ZU91dCgpIHtcbiAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGF1dG9BbHBoYTogMFxuICAgIH0pXG4gIH1cbiAgb25SZXNpemUoKSB7XG4gICAgdGhpcy5lbGVtZW50c0xpbmVzID0gY2FsY3VsYXRlKHRoaXMuZWxlbWVudExpbmVzU3BhbnMpXG4gIH1cbn1cbiIsImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4uL2NsYXNzZXMvQW5pbWF0aW9uJ1xuXG5pbXBvcnQgeyBjYWxjdWxhdGUsIHNwbGl0IH0gZnJvbSAnLi4vdXRpbHMvdGV4dCdcbmltcG9ydCBlYWNoIGZyb20gJ2xvZGFzaC9lYWNoJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcmFncmFwaCBleHRlbmRzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudHNcbiAgICB9KVxuXG4gICAgdGhpcy5lbGVtZW50TGluZXNTcGFucyA9IHNwbGl0KHtcbiAgICAgIGFwcGVuZDp0cnVlLFxuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LCBcbiAgICB9KVxuICB9XG5cbiAgYW5pbWF0ZUluKCkge1xuICAgIHRoaXMudGltZWxpbmVJbiA9IEdTQVAudGltZWxpbmUoe2RlbGF5OiAwLjV9KVxuICAgIHRoaXMudGltZWxpbmVJbi5zZXQodGhpcy5lbGVtZW50LCB7IGF1dG9BbHBoYTogMSB9KVxuICAgIGVhY2godGhpcy5lbGVtZW50c0xpbmVzLCAobGluZSwgaW5kZXgpID0+IHtcbiAgICAgIHRoaXMudGltZWxpbmVJbi5mcm9tVG8obGluZSwge1xuICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgIHk6ICcxMDAlJ1xuICAgICAgfSwgIHtcbiAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgICBkZWxheTogaW5kZXggKiAwLjIsXG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgIGVhc2U6ICdleHBvLm91dCcsXG4gICAgICAgIHk6ICcwJSdcbiAgICAgIH0sIDApXG4gICAgfSlcbiAgfVxuICBhbmltYXRlT3V0KCkge1xuICAgIEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xuICAgICAgYXV0b0FscGhhOiAwXG4gICAgfSlcbiAgfVxuICBvblJlc2l6ZSgpIHtcbiAgICB0aGlzLmVsZW1lbnRzTGluZXMgPSBjYWxjdWxhdGUodGhpcy5lbGVtZW50TGluZXNTcGFucylcbiAgfVxufVxuIiwiaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCBBbmltYXRpb24gZnJvbSAnLi4vY2xhc3Nlcy9BbmltYXRpb24nXG5cbmltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tICcuLi91dGlscy90ZXh0J1xuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvciAoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudCxcbiAgICAgIGVsZW1lbnRzXG4gICAgfSlcblxuICAgIHNwbGl0KHtlbGVtZW50OiB0aGlzLmVsZW1lbnQsIGFwcGVuZDp0cnVlfSlcbiAgICBcbiAgICBzcGxpdCh7ZWxlbWVudDogdGhpcy5lbGVtZW50LCBhcHBlbmQ6dHJ1ZX0pXG5cbiAgICB0aGlzLmVsZW1lbnRMaW5lc1NwYW5zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG5cbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcbiAgICB0aGlzLnRpbWVsaW5lSW4gPSBHU0FQLnRpbWVsaW5lKHtkZWxheTogMC41fSlcblxuICAgIHRoaXMudGltZWxpbmVJbi5zZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICBhdXRvQWxwaGE6IDFcbiAgICB9KVxuICAgIGVhY2godGhpcy5lbGVtZW50c0xpbmVzLCAobGluZSwgaW5kZXgpID0+IHtcbiAgICAgIHRoaXMudGltZWxpbmVJbi5mcm9tVG8obGluZSwge1xuICAgICAgICB5OiAnMTAwJSdcbiAgICAgIH0sICB7XG4gICAgICAgIGRlbGF5OiBpbmRleCAqIDAuMixcbiAgICAgICAgZHVyYXRpb246IDEuMixcbiAgICAgICAgZWFzZTogJ2V4cG8ub3V0JyxcbiAgICAgICAgeTogJzAlJ1xuICAgICAgfSwgMClcbiAgICB9KVxuICB9XG4gIGFuaW1hdGVPdXQoKSB7XG4gICAgR1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XG4gICAgICBhdXRvQWxwaGE6IDBcbiAgICB9KVxuICB9XG4gIG9uUmVzaXplKCkge1xuICAgIHRoaXMuZWxlbWVudHNMaW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRMaW5lc1NwYW5zKVxuXG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnQuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQsIGVsZW1lbnRzfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBlbGVtZW50c1xuICAgIH0pXG5cbiAgICB0aGlzLmNyZWF0ZU9ic2VydmVyKClcblxuICAgIHRoaXMuYW5pbWF0ZU91dCgpXG5cbiAgICB9XG5cbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgdGhpcy5hbmltYXRlSW4oKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgICB0aGlzLk9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50KVxuICB9XG5cbiAgYW5pbWF0ZUluKCkge1xuICB9XG5cbiAgYW5pbWF0ZU91dCgpIHtcbiAgfVxufSIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcImNsYXNzZXMvQ29tcG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzeW5jbG9hZCBleHRlbmRzIENvbXBvbmVudHtcbmNvbnN0cnVjdG9yKHtlbGVtZW50fSkge1xuICBzdXBlcih7IGVsZW1lbnQgIH0pXG5cbiAgdGhpcy5jcmVhdGVPYnNlcnZlcigpXG59XG5cbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnQuc3JjKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3JjID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm9ubG9hZCA9IF8gPT4ge1xuICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJykgLy9jbGFzc0xpc3QgYWRkaXRpb24gaXMgdXNlZCBpbiB0aGUgYmFzZS5zY3NzIGZpbGUgd2hlbiB0aGUgaW1hZ2UgaXMgbG9hZGVkLCBtYWtpbmcgaXQgdmlzaWJsZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMuT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXG4gIH1cbn0iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuL0NvbXBvbmVudFwiXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoeyBlbGVtZW50IH0pIHtcbiAgICBzdXBlcih7IGVsZW1lbnQgfSlcblxuICAgIHRoaXMucGF0aCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcigncGF0aDpsYXN0LWNoaWxkJylcbiAgICB0aGlzLnBhdGhMZW5ndGggPSB0aGlzLnBhdGguZ2V0VG90YWxMZW5ndGgoKVxuICAgIGNvbnNvbGUubG9nKHRoaXMucGF0aC5nZXRUb3RhbExlbmd0aClcblxuICAgIHRoaXMudGltZWxpbmUgPSBHU0FQLnRpbWVsaW5lKHsgcGF1c2VkOiB0cnVlIH0pXG4gICAgdGhpcy50aW1lbGluZS5mcm9tVG8odGhpcy5wYXRoLCB7XG4gICAgICBzdHJva2VEYXNob2Zmc2V0OiB0aGlzLnBhdGhMZW5ndGgsIC8vIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgcGF0aFxuICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHt0aGlzLnBhdGhMZW5ndGh9ICR7dGhpcy5wYXRoTGVuZ3RofWAsXG4gICAgfSwge1xuICAgICAgc3Ryb2tlRGFzaG9mZnNldDogMCxcbiAgICAgIHN0cm9rZURhc2hhcnJheTogYCR7dGhpcy5wYXRoTGVuZ3RofSAke3RoaXMucGF0aExlbmd0aH1gLFxuICAgIH0pXG4gIH1cblxuICBvbk1vdXNlRW50ZXIgKCkge1xuICAgIGNvbnNvbGUubG9nKCdlbnRlcicpXG4gICAgdGhpcy50aW1lbGluZS5wbGF5KClcbiAgfVxuXG4gIG9uTW91c2VMZWF2ZSAoKSB7XG4gICAgY29uc29sZS5sb2coJ2xlYXZlJylcbiAgICB0aGlzLnRpbWVsaW5lLnJldmVyc2UoKVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5vbk1vdXNlRW50ZXJFdmVudCA9IHRoaXMub25Nb3VzZUVudGVyLmJpbmQodGhpcykgLy8gYmluZGluZyB0aGUgY29udGV4dCBvZiB0aGUgY2xhc3MgdG8gdGhlIGV2ZW50IGxpc3RlbmVyXG4gICAgdGhpcy5vbk1vdXNlTGVhdmVFdmVudCA9IHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcylcblxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXJFdmVudClcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZUxlYXZlRXZlbnQpXG4gIH1cbiAgXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkgeyAgXG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm9uTW91c2VFbnRlckV2ZW50KVxuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmVFdmVudClcbiAgfVxufVxuIiwiaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCc7XG5cbmNsYXNzIENvbG9ycyB7XG4gIGNoYW5nZSh7XG4gICAgYmFja2dyb3VuZENvbG9yLFxuICAgIGNvbG9yLFxuICB9KSB7XG4gICAgR1NBUC50byhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgIGNvbG9yLFxuICAgICAgZHVyYXRpb246IDEuMixcbiAgICB9KVxuXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IENvbG9yc01hbmFnZXIgPSBuZXcgQ29sb3JzKCk7IiwiXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCcgLy8tIGxpYnJhcnkgdG8gdXNlIGVhY2ggaW5zdGVhZCBvZiBmb3JFYWNoIG1ldGhvZCwgd2hpY2ggaXNuJ3QgYXZhaWxhYmxlIGluIE5vZGUuanNcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXJ7XG4gIGNvbnN0cnVjdG9yICh7IFxuICAgIGVsZW1lbnQsIFxuICAgIGVsZW1lbnRzXG4gIH0pIHtcbiAgICBzdXBlcigpXG4gICAgXG4gICAgICB0aGlzLnNlbGVjdG9yID0gZWxlbWVudFxuICAgICAgdGhpcy5zZWxlY3RvckNoaWxkcmVuID0ge1xuICAgICAgICAuLi5lbGVtZW50c1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNyZWF0ZSgpXG5cbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG4gIGNyZWF0ZSgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zZWxlY3RvclxuICAgIH0gZWxzZSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKVxuICB9XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9XG5cbiAgICBpZiAoIXRoaXMuZWxlbWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWFjaCh0aGlzLnNlbGVjdG9yQ2hpbGRyZW4sIChlbnRyeSwga2V5KSAgPT4ge1xuICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8IGVudHJ5IGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0IHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVudHJ5KVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNba2V5XS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBudWxsXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZW50cnkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG5cbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuXG4gIH1cbn1cbiIsImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnIC8vLSBsaWJyYXJ5IEdyZWVuIFNvY2sgQXBwIHRvIGFuaW1hdGUgZWxlbWVudHNcbmltcG9ydCBQcmVmaXggZnJvbSAncHJlZml4JyAvLy0gbGlicmFyeSB0byB1c2UgcHJlZml4ZXMgZm9yIENTUyBwcm9wZXJ0aWVzXG5pbXBvcnQgbm9ybWFsaXplV2hlZWwgZnJvbSAnbm9ybWFsaXplLXdoZWVsJyAvLy0gbGlicmFyeSB0byBub3JtYWxpemUgdGhlIG1vdXNlIHdoZWVsXG5cbmltcG9ydCBUaXRsZSBmcm9tICcuLi9hbmltYXRpb25zL1RpdGxlJ1xuaW1wb3J0IEhpZ2hsaWdodCBmcm9tICcuLi9hbmltYXRpb25zL0hpZ2hsaWdodCdcbmltcG9ydCBQYXJhZ3JhcGggZnJvbSAnLi4vYW5pbWF0aW9ucy9QYXJhZ3JhcGgnXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vYW5pbWF0aW9ucy9MYWJlbCdcblxuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnIC8vLSBsaWJyYXJ5IHRvIHVzZSBlYWNoIGluc3RlYWQgb2YgZm9yRWFjaCBtZXRob2QsIHdoaWNoIGlzbid0IGF2YWlsYWJsZSBpbiBOb2RlLmpzXG5pbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5cbmltcG9ydCB7IENvbG9yc01hbmFnZXIgfSBmcm9tICcuL0NvbG9ycydcbmltcG9ydCBQcmVsb2FkZXIgZnJvbSAnLi4vY29tcG9uZW50cy9wcmVsb2FkZXInXG5pbXBvcnQgQXN5bmNsb2FkIGZyb20gJy4vQXN5bmNsb2FkJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2Uge1xuICBjb25zdHJ1Y3RvciAoeyBcbiAgICBlbGVtZW50LCBcbiAgICBlbGVtZW50cyxcbiAgICBpZCB9KSB7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gZWxlbWVudFxuICAgICAgdGhpcy5zZWxlY3RvckNoaWxkcmVuID0ge1xuICAgICAgICAuLi5lbGVtZW50cyxcblxuICAgICAgICBhbmltYXRpb25zTGFiZWxzOiAnW2RhdGEtYW5pbWF0aW9uPVwibGFiZWxcIl0nLCAgLy90aG9zZSBpbiBiZXR3ZWVuIGJyYWNrZXRzIGFyZSBzZWxlY3RvcnMgKHN5bnRheGUgZm9yIGpzKVxuICAgICAgICBhbmltYXRpb25zVGl0bGVzOiAnW2RhdGEtYW5pbWF0aW9uPVwidGl0bGVcIl0nLCBcbiAgICAgICAgYW5pbWF0aW9uc1BhcmFncmFwaHM6ICdbZGF0YS1hbmltYXRpb249XCJwYXJhZ3JhcGhcIl0nLFxuICAgICAgICBhbmltYXRpb25zSGlnaGxpZ2h0czogJ1tkYXRhLWFuaW1hdGlvbj1cImhpZ2hsaWdodFwiXScsXG5cbiAgICAgICAgcHJlbG9hZGVyczogJ1tkYXRhLXNyY10nIC8vIGFsbG93IHRvIHByZWxvYWQgYWxsIHRoZSBpbWcgZGVwZW5kaW5nIG9uIHRoZSBwYWdlIGxvYWRlZCAoY2YgYmVsb3cgaW4gY3JlYXRlUHJlbG9hZGVyKVxuICAgICAgfVxuXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy50cmFuc2Zvcm1QcmVmaXggPSBQcmVmaXgoJ3RyYW5zZm9ybScpXG5cbiAgICB0aGlzLm9uTW91c2VXaGVlbEV2ZW50ID0gdGhpcy5vbk1vdXNlV2hlZWwuYmluZCh0aGlzKVxuICAgIFxuICAgIHRoaXMuc2Nyb2xsID0gIHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsYXN0OiAwLFxuICAgICAgbGltaXQ6IDEwMDBcbiAgICB9XG4gIFxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3RvcilcbiAgICB0aGlzLmVsZW1lbnRzID0ge31cblxuICAgIHRoaXMuc2Nyb2xsID0gIHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsYXN0OiAwLFxuICAgICAgbGltaXQ6IDBcbiAgICB9XG5cbiAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKGVudHJ5LCBrZXkpICA9PiB7XG4gICAgICBpZiAoZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHwgZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZW50cnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZW50cnkpXG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGxcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbnRyeSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5jcmVhdGVBbmltYXRpb25zKClcbiAgICB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXG4gIH1cblxuICBjcmVhdGVBbmltYXRpb25zKCkge1xuICAgIHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xuXG4vL1RpdGxlc1xuICAgIHRoaXMuYW5pbWF0aW9uc1RpdGxlcyA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNUaXRsZXMsIChlbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFRpdGxlKHtcbiAgICAgICAgZWxlbWVudCxcbiAgICAgIH0pXG4gIH0pXG5cbiAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25zVGl0bGVzKVxuXG4gIC8vUGFyYWdyYXBoc1xuICAgIHRoaXMuYW5pbWF0aW9uc1BhcmFncmFwaHMgPSBtYXAodGhpcy5lbGVtZW50cy5hbmltYXRpb25zUGFyYWdyYXBocywgKGVsZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUGFyYWdyYXBoKHtcbiAgICAgICAgZWxlbWVudCxcbiAgICAgIH0pXG4gIH0pXG5cbiAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25zUGFyYWdyYXBocylcblxuICAvL0xhYmVsc1xuICAgIHRoaXMuYW5pbWF0aW9uc0xhYmVscyA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNMYWJlbHMsIChlbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IExhYmVsKHtcbiAgICAgICAgZWxlbWVudCxcbiAgICAgIH0pXG4gIH0pXG4gIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0xhYmVscylcblxuICAgIC8vSGlnaGxpZ2h0c1xuICAgIHRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMgPSBtYXAodGhpcy5lbGVtZW50cy5hbmltYXRpb25zSGlnaGxpZ2h0cywgKGVsZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgSGlnaGxpZ2h0KHtcbiAgICAgICAgZWxlbWVudCxcbiAgICAgIH0pXG4gIH0pXG4gIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMpXG59XG5cbmNyZWF0ZVByZWxvYWRlcigpIHtcbiAgdGhpcy5wcmVsb2FkZXJzID0gbWFwKHRoaXMuZWxlbWVudHMucHJlbG9hZGVycywgKGVsZW1lbnQpID0+IHsgIC8vYWxsb3dzIHRvIHByZWxvYWQgYWxsIHRoZSBpbWcgZGVwZW5kaW5nIG9uIHRoZSBwYWdlIGxvYWRlZFxuICAgIHJldHVybiBuZXcgQXN5bmNsb2FkKHsgZWxlbWVudCB9KVxuICB9KVxufVxuLyoqXG4gKiBBbmltYXRpb25zXG4gKi9cbiAgc2hvdygpIHsgLy8gdG8gYmUgZGVjaWRlZCBpZiBuZWNlc3NhcnkgdG8gYW5pbWF0ZSB0aGlzIHBhZ2UgYmVjYXVzZSBpdCBpcyBhIGxpdHRsZSBidWdneVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIENvbG9yc01hbmFnZXIuY2hhbmdlKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJhY2tncm91bmQnKSxcbiAgICAgICAgY29sb3I6IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sb3InKSxcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuYW5pbWF0ZUluID0gR1NBUC50aW1lbGluZSgpXG5cbiAgICAgIHRoaXMuYW5pbWF0ZUluLmZyb21Ubyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgfSlcblxuICAgICAgdGhpcy5hbmltYXRlSW4uY2FsbChfID0+IHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXG5cbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9KVxuXG4gICAgfSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhpcy5kZXN0cm95KClcblxuICAgICAgdGhpcy5hbmltYXRlT3V0ID0gR1NBUC50aW1lbGluZSgpXG5cbiAgICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICBvbkNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KVxuICAgIH0pIFxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50c1xuICAgKi9cbiAgb25Nb3VzZVdoZWVsIChldmVudCkgIHsgLy8gYWxsb3dzIHRvIHNjcm9sbCB0aGUgcGFnZSBzbW9vdGhseVxuICAgIGNvbnN0IHsgcGl4ZWxZIH0gPSBub3JtYWxpemVXaGVlbChldmVudCkgICAgXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHBpeGVsWVxuICB9XG5cbiAgb25SZXNpemUoKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudHMud3JhcHBlcikgeyB0aGlzLnNjcm9sbC5saW1pdCA9IHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICB9XG4gICAgZWFjaCh0aGlzLmFuaW1hdGlvbnMsIChhbmltYXRpb24pID0+IGFuaW1hdGlvbi5vblJlc2l6ZSgpKTtcbiAgfVxuLyoqXG4gKiBMb29wc1xuICovXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gR1NBUC51dGlscy5jbGFtcChcbiAgICAgIDAsIHRoaXMuc2Nyb2xsLmxpbWl0LCBcbiAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldFxuICAgICk7XG5cbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZShcbiAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQsIFxuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0LCAwLlxuICAgICk7XG5cbiAgICBpZiAodGhpcy5zY3JvbGwudGFyZ2V0IDwgMC4wMSkge1xuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gMFxuICAgIH1cbiAgICBpZiAodGhpcy5lbGVtZW50cy53cmFwcGVyKSB7ICBcbiAgICAgIHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZVtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1QcmVmaXhcbiAgICAgIF0gPSBgdHJhbnNsYXRlWSgtJHt0aGlzLnNjcm9sbC5jdXJyZW50fXB4KWBcbiAgICB9XG4gIH1cbiAgICAgXG4gIC8qKlxuICAgKiBMaXN0ZW5lcnNcbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXJzICgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIHRoaXMub25Nb3VzZVdoZWVsRXZlbnQpXG4gIH0gXG4gIFxuICByZW1vdmVFdmVudExpc3RlbmVycyAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLm9uTW91c2VXaGVlbEV2ZW50KVxuICB9IFxuLyoqXG4gKiBEZXN0cm95LCByZW1vdmUgdGhlIGxpc3RlbmVycyBcbiAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbn1cbiIsImltcG9ydCB7IENhbWVyYSwgUmVuZGVyZXIsIFRyYW5zZm9ybSB9IGZyb20gJ29nbCcgIFxuXG5pbXBvcnQgSG9tZSBmcm9tICdjb21wb25lbnRzL0hvbWUnXG4vLyBDYW1lcmEsIFJlbmRlcmVyIGFuZCBUcmFuc2Zvcm0gYXJlIHRoZSB0aHJlZSBlbGVtZW50cyBuZWVkZWQgdG8gY3JlYXRlIGEgM0Qgc2NlbmUgLVxuLy8gQm94LCBQcm9ncmFtIGFuZCBNZXNoIGFyZSB0aGUgdGhyZWUgZWxlbWVudHMgbmVlZGVkIHRvIGNyZWF0ZSBhIDNEIG9iamVjdFxuLy8gYWxsIHRoZSBlbGVtZW50cyBhcmUgaW1wb3J0ZWQgZnJvbSB0aGUgb2dsIGxpYnJhcnlcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW52YXMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5jcmVhdGVDYW1lcmEoKVxuICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKVxuICAgIHRoaXMuY3JlYXRlU2NlbmUoKVxuICAgIHRoaXMuY3JlYXRlSG9tZSgpXG5cbiAgfVxuXG4gIGNyZWF0ZVJlbmRlcmVyKCkge1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXJcblxuICAgIHRoaXMuZ2wgPSB0aGlzLnJlbmRlcmVyLmdsXG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZ2wuY2FudmFzKVxuICB9XG5cbiAgY3JlYXRlQ2FtZXJhKCkge1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLmdsKVxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1IC8vIHNldCB0aGUgY2FtZXJhIHBvc2l0aW9uIG9uIHRoZSB6LWF4aXMgdG8gNVxuICB9XG5cbiAgY3JlYXRlU2NlbmUoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUcmFuc2Zvcm0oKVxuICB9XG4gIGNyZWF0ZUhvbWUoKSB7XG4gICAgdGhpcy5ob21lID0gbmV3IEhvbWUoe1xuICAgICAgZ2w6IHRoaXMuZ2wsXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZVxuICAgIH0pXG4gIH1cblxuICBvblJlc2l6ZSgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICBcbiAgICB0aGlzLmNhbWVyYS5wZXJzcGVjdGl2ZSh7XG4gICAgICBhc3BlY3Q6IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0XG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHtcbiAgICAgIGNhbWVyYTogdGhpcy5jYW1lcmEsXG4gICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgICB9KVxuICB9XG59XG5cblxuIiwiaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEnXG5pbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUge1xuICBjb25zdHJ1Y3Rvcih7IGdsLCBzY2VuZSB9KSB7XG4gICAgdGhpcy5nbCA9IGdsXG4gICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKVxuXG4gICAgdGhpcy5tZWRpYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ob21lX19nYWxsZXJ5X19tZWRpYV9faW1hZ2UnKVxuXG4gICAgdGhpcy5jcmVhdGVHZW9tZXRyeSgpXG4gICAgdGhpcy5jcmVhdGVHYWxsZXJ5KClcblxuICAgIHRoaXMuZ3JvdXAuc2V0UGFyZW50KHNjZW5lKVxuICB9XG5cbiAgY3JlYXRlR2VvbWV0cnkoKSB7XG4gICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxuICB9XG5cbiAgY3JlYXRlR2FsbGVyeSgpIHtcbiAgICBtYXAodGhpcy5tZWRpYSwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IE1lZGlhKHtcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXG4gICAgICAgIGluZGV4LFxuICAgICAgICBnbDogdGhpcy5nbCxcbiAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXG4gICAgICB9KVxuXG4gICAgfSlcbiAgfVxufVxuIiwiaW1wb3J0IHtNZXNoLCBUZXh0dXJlLCBQcm9ncmFtfSBmcm9tICdvZ2wnXG5cbmltcG9ydCB2ZXJ0ZXggZnJvbSAnc2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbCdcbmltcG9ydCBmcmFnbWVudCBmcm9tICdzaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2wnXG5cbi8vIFRoZSBNZWRpYSBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhlIDNEIG9iamVjdHMgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgY2FudmFzXG4vLyBUaGUgTWVkaWEgY2xhc3MgaXMgaW1wb3J0ZWQgaW4gdGhlIEhvbWUgY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lZGlhIHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBnZW9tZXRyeSwgZ2wsIHNjZW5lLCBpbmRleCB9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCBcbiAgICB0aGlzLmdsID0gZ2xcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcbiAgICB0aGlzLnNjZW5lID0gc2NlbmVcbiAgICB0aGlzLmluZGV4ID0gaW5kZXhcblxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXG4gICAgdGhpcy5jcmVhdGVQcm9ncmFtKClcbiAgICB0aGlzLmNyZWF0ZU1lc2goKVxuICB9XG5cbiAgY3JlYXRlVGV4dHVyZSgpIHtcbiAgICB0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSh0aGlzLmdsKVxuICAgICBcbiAgICBjb25zb2xlLmxvZyh0aGlzLmVsZW1lbnQpXG5cblxuICAgIHRoaXMuaW1hZ2UgPSBuZXcgd2luZG93LkltYWdlKClcbiAgICB0aGlzLmltYWdlLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cydcbiAgICB0aGlzLmltYWdlLnNyYyA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJylcbiAgICB0aGlzLmltYWdlLm9ubG9hZCA9IF8gPT4gKHRoaXMudGV4dHVyZS5pbWFnZSA9IHRoaXMuaW1hZ2UpXG5cbiAgfVxuICBjcmVhdGVQcm9ncmFtKCkge1xuICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcbiAgICAgIGZyYWdtZW50LFxuICAgICAgdmVydGV4LFxuICAgICAgdW5pZm9ybXM6IHsgLy91c2VkIGluIHRoZSBmcmFnbWVudCBzaGFkZXIgKHBsYW5lLWZyYWdtZW50KVxuICAgICAgICB0TWFwOiB7IHZhbHVlOiB0aGlzLnRleHR1cmUgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjcmVhdGVNZXNoKCkge1xuICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcbiAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtXG4gICAgfSlcblxuICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSkgLy8gc2V0IHRoZSBwYXJlbnQgb2YgdGhlIG1lc2ggdG8gdGhlIHNjZW5lXG4gICAgdGhpcy5tZXNoLnBvc2l0aW9uLnggKz0gdGhpcy5pbmRleCAqIHRoaXMubWVzaC5zY2FsZS54IC8vIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lc2ggb24gdGhlIHgtYXhpc1xuXG4gIH1cbn0iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jbGFzc2VzL0NvbXBvbmVudFwiO1xuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7Q09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFLCBDT0xPUl9CUklHSFRfR1JFWSAgfSBmcm9tICd1dGlscy9jb2xvcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7dGVtcGxhdGV9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudDogXCIubmF2aWdhdGlvblwiLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICBsaW5rczogKCcubmF2aWdhdGlvbl9fbGlzdF9fbGluaycpLFxuICAgICAgIGl0ZW1zOiAoJy5uYXZpZ2F0aW9uX19saXN0X19pdGVtJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm9uQ2hhbmdlKHRlbXBsYXRlKSBcbiAgfVxuICBvbkNoYW5nZSh0ZW1wbGF0ZSkge1xuICAgIGlmICh0ZW1wbGF0ZSA9PT0gJ2Fib3V0Jykge1xuICAgICAgR1NBUC50byh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgY29sb3I6IENPTE9SX0JSSUdIVF9HUkVZLFxuICAgICAgICBkdXJhdGlvbjogMS4yXG4gICAgICB9KVxuICAgICAgR1NBUC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzBdLCB7XG4gICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgZGVsYXk6IDAuNzUsXG4gICAgICAgIGR1cmF0aW9uOiAwLjc1LFxuICAgICAgfSlcbiAgICAgIEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1sxXSwge1xuICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgIGR1cmF0aW9uOiAwLjc1LFxuXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBHU0FQLnRvKHRoaXMuZWxlbWVudCwge1xuICAgICAgICBjb2xvcjogQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFLFxuICAgICAgICBkdXJhdGlvbjogMS4yXG4gICAgICB9KVxuICAgICAgR1NBUC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzBdLCB7XG4gICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgZHVyYXRpb246IDAuNzUsXG4gICAgICB9KVxuICAgICAgR1NBUC50byh0aGlzLmVsZW1lbnRzLml0ZW1zWzFdLCB7XG4gICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgZGVsYXk6IDAuNzUsXG4gICAgICAgIGR1cmF0aW9uOiAwLjc1LFxuICAgICAgfSlcbiAgICB9IFxuICB9XG59IiwiaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jbGFzc2VzL0NvbXBvbmVudFwiO1xuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnO1xuaW1wb3J0IHsgc3BsaXQgfSBmcm9tICcuLi91dGlscy90ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudDogXCIucHJlbG9hZGVyXCIsXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICB0aXRsZTogJy5wcmVsb2FkZXJfX3RleHQnLFxuICAgICAgICBudW1iZXI6ICcucHJlbG9hZGVyX19udW1iZXInLCAvLyBnZXQgYWNjZXNzIHRvIHRoZSBsb2FkZXIgbnVtYmVyXG4gICAgICAgIG51bWJlclRleHQ6ICcucHJlbG9hZGVyX19udW1iZXJfX3RleHQnLFxuICAgICAgICBpbWFnZXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzcGxpdCh7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLnRpdGxlLFxuICAgICAgZXhwcmVzc2lvbjogJzxicj4nXG4gICAgfSlcblxuICAgIHNwbGl0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMudGl0bGUsXG4gICAgICBleHByZXNzaW9uOiAnPGJyPidcbiAgICB9KVxuXG5cbiAgICB0aGlzLmVsZW1lbnRzLnRpdGxlU3BhbnMgPSB0aGlzLmVsZW1lbnRzLnRpdGxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG5cbiAgICB0aGlzLmxlbmd0aCA9IDBcblxuXG4gICAgdGhpcy5jcmVhdGVMb2FkZXIoKTtcbiAgfVxuXG4gIGNyZWF0ZUxvYWRlcigpIHtcbiAgICBlYWNoKHRoaXMuZWxlbWVudHMuaW1hZ2VzLCBpbWcgPT4ge1xuXG4gICAgICBpbWcuc3JjID0gaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKVxuICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHRoaXMub25Bc3NldExvYWRlZChpbWcpXG4gICAgfSlcbiAgfVxuXG4gIG9uQXNzZXRMb2FkZWQoaW1hZ2UpIHtcbiAgICB0aGlzLmxlbmd0aCArPSAxXG5cbiAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5sZW5ndGggLyB0aGlzLmVsZW1lbnRzLmltYWdlcy5sZW5ndGhcblxuICAgIHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dC5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKHBlcmNlbnQgKiAxMDApfSVgXG5cbiAgICBpZiAocGVyY2VudCA9PT0gMSkge1xuICAgICAgdGhpcy5vbkxvYWRlZCgpXG4gICAgfVxuICB9XG4gIG9uTG9hZGVkKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgdGhpcy5hbmltYXRlT3V0ID0gR1NBUC50aW1lbGluZSh7XG4gICAgICBkZWxheTogMS41XG4gICAgfSlcbiAgXG4gICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudHMudGl0bGVTcGFucywge1xuICAgICAgLy8gYXV0b0FscGhhOiAwLCByZW1vdmVkIGJlY2F1c2Ugd2Ugbm90IGdvbm5hIGZhZGUgb3V0IHRoZSB0ZXh0LCBidXQgbWFrZSBpdCB0cmFuc2xhdGUgZG93blxuICAgICAgZHVyYXRpb246IDEsXG4gICAgICBlYXNlOiAnZXhwby5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4zLFxuICAgICAgeTogJzEwMCUnXG4gICAgfSlcblxuXG4gICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dCwgeyAvLyBmYWRlIG91dCB0aGUgMTAwJSBudW1iZXJcbiAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICBlYXNlOiAnZXhwby5PdXQnLFxuICAgICAgc3RhZ2dlcjogMC4zLFxuICAgICAgeTogJzEwMCUnXG4gICAgfSwgJy09MC4zJylcblxuICAgIHRoaXMuYW5pbWF0ZU91dC50byh0aGlzLmVsZW1lbnQsIHsgLy8gcmVtb3ZlIHRoZSBwcmVsb2FkZXJcbiAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICBlYXNlOiAnZXhwby5vdXQnLFxuICAgICAgc2NhbGVZOiAwLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCAwJ1xuICAgIH0pXG5cbiAgICB0aGlzLmFuaW1hdGVPdXQuY2FsbCgoKSA9PiB7IC8vIGNhbGwgdGhlIHJlc29sdmUgZnVuY3Rpb24gd2hlbiBjb21wbGV0aW5nIHRoZSBhbmltYXRpb25cbiAgICAgIHRoaXMuZW1pdCgnY29tcGxldGVkJylcbiAgICB9KVxuICB9KVxufVxuICBkZXN0cm95KCkgeyAgXG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KVxuICB9IFxufSIsIi8vIHNjcmlwdChzcmM9XCIvbWFpbi5qc1wiKVxuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnIC8vLSBsaWJyYXJ5IHRvIHVzZSBlYWNoIGluc3RlYWQgb2YgZm9yRWFjaCBtZXRob2QsIHdoaWNoIGlzbid0IGF2YWlsYWJsZSBpbiBOb2RlLmpzXG5cbmltcG9ydCBDYW52YXMgZnJvbSAnLi9jb21wb25lbnRzL0NhbnZhcy9JbmRleCdcbmltcG9ydCBQcmVsb2FkZXIgZnJvbSAnLi9jb21wb25lbnRzL3ByZWxvYWRlcidcbmltcG9ydCBBYm91dCBmcm9tICcuL3BhZ2VzL0Fib3V0L0luZGV4J1xuaW1wb3J0IENvbGxlY3Rpb25zIGZyb20gJy4vcGFnZXMvQ29sbGVjdGlvbnMvSW5kZXgnXG5pbXBvcnQgRGV0YWlsIGZyb20gJy4vcGFnZXMvRGV0YWlsL0luZGV4J1xuaW1wb3J0IEhvbWUgZnJvbSAnLi9wYWdlcy9Ib21lL0luZGV4J1xuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSAnLi9jb21wb25lbnRzL05hdmlnYXRpb24nXG5cblxuY2xhc3MgQXBwIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY3JlYXRlQ29udGVudCgpXG4gICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKVxuICAgIHRoaXMuY3JlYXRlTmF2aWdhdGlvbigpXG4gICAgdGhpcy5jcmVhdGVDYW52YXMoKVxuICAgIHRoaXMuY3JlYXRlUGFnZXMoKVxuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXG4gICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKCkgLy8gcm91dGluZyB0aGUgcGFnZXNcblxuICAgIHRoaXMudXBkYXRlKClcbiAgfVxuXG4gIGNyZWF0ZU5hdmlnYXRpb24oKSB7XG4gICAgdGhpcy5uYXZpZ2F0aW9uID0gbmV3IE5hdmlnYXRpb24oe1xuICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVQcmVsb2FkZXIgKCkge1xuICAgIHRoaXMucHJlbG9hZGVyID0gbmV3IFByZWxvYWRlcigpXG4gICAgdGhpcy5wcmVsb2FkZXIub25jZSgnY29tcGxldGVkJywgdGhpcy5vblByZWxvYWRlZC5iaW5kKHRoaXMpKVxuXG4gIH1cblxuICBjcmVhdGVDYW52YXMoKSB7XG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKClcbiAgfVxuXG4gIGNyZWF0ZUNvbnRlbnQgKCkge1xuICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JylcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpXG4gIH1cblxuICBjcmVhdGVQYWdlcyAoKSAge1xuICAgIHRoaXMucGFnZXMgPSB7XG4gICAgICBhYm91dDogbmV3IEFib3V0KCksXG4gICAgICBjb2xsZWN0aW9uczogbmV3IENvbGxlY3Rpb25zKCksXG4gICAgICBkZXRhaWw6IG5ldyBEZXRhaWwoKSxcbiAgICAgIGhvbWU6IG5ldyBIb21lKClcbiAgICB9XG5cbiAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMudGVtcGxhdGVdXG4gICAgdGhpcy5wYWdlLmNyZWF0ZSgpXG4gIH1cblxuICAvKioqXG4gICAqIEV2ZW50c1xuICAgKi9cbiAgb25QcmVsb2FkZWQoKSB7XG4gICAgdGhpcy5wcmVsb2FkZXIuZGVzdHJveSgpXG4gICAgdGhpcy5vblJlc2l6ZSgpXG4gICAgdGhpcy5wYWdlLnNob3coKVxuXG4gIH1cblxuICBhc3luYyBvbkNoYW5nZSh1cmwpIHtcbiAgICBhd2FpdCB0aGlzLnBhZ2UuaGlkZSgpIC8vaGlkZSB0aGUgY3VycmVudCBwYWdlXG5cbiAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgd2luZG93LmZldGNoKHVybCkgLy8tIGZldGNoIHRoZSBuZXcgcGFnZSBoZXJlIC0gYXN5bmMvYXdhaXQgYWxsb3cgYXN5bmNocm9uZXMgcmVxdWVzdHMgZm9ydiBmZXRjaGluZyBkYXRhXG4gICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZXF1ZXN0LnRleHQoKVxuXG4gICAgICBjb25zdCBkaXY9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXG5cbiAgICAgIGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuXG4gICAgICB0aGlzLnRlbXBsYXRlID0gZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnKSAvLyB3aXRoIHRoaXMgbGluZSwgd2UgY2FuIGdldCB0aGUgdGVtcGxhdGUgb2YgdGhlIG5ldyBwYWdlXG5cbiAgICAgIHRoaXMubmF2aWdhdGlvbi5vbkNoYW5nZSh0aGlzLnRlbXBsYXRlKVxuXG4gICAgICB0aGlzLmNvbnRlbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJywgdGhpcy50ZW1wbGF0ZSkgLy8gd2l0aCB0aGlzIGxpbmUsIHdlIGNhbiBzZXQgdGhlIHRlbXBsYXRlIG9mIHRoZSBuZXcgcGFnZVxuXG4gICAgICB0aGlzLmNvbnRlbnQuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUwgIFxuXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMudGVtcGxhdGVdXG5cbiAgICAgIHRoaXMucGFnZS5jcmVhdGUoKVxuICAgICAgXG4gICAgICB0aGlzLm9uUmVzaXplKClcbiBcbiAgICAgIHRoaXMucGFnZS5zaG93KClcblxuICAgICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKClcbiAgICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdlcnJycnJycnJyb3InKVxuICB9XG59XG5cbm9uUmVzaXplKCkge1xuICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25SZXNpemUpIHsgIC8vIHRvIGV4cGxhaW4gOiBpZiB0aGUgY2FudmFzIGV4aXN0cyBhbmQgdGhlIG1ldGhvZCBvblJlc2l6ZSBvZiB0aGUgY2FudmFzIGV4aXN0cywgdGhlbiBleGVjdXRlIHRoZSBtZXRob2Qgb25SZXNpemUgb2YgdGhlIGNhbnZhc1xuICAgIHRoaXMuY2FudmFzLm9uUmVzaXplKClcbiAgfVxuXG4gIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uUmVzaXplKSB7IC8vIHRvIGV4cGxhaW4gOiBpZiB0aGUgcGFnZSBleGlzdHMgYW5kIHRoZSBtZXRob2Qgb25SZXNpemUgb2YgdGhlIHBhZ2UgZXhpc3RzLCB0aGVuIGV4ZWN1dGUgdGhlIG1ldGhvZCBvblJlc2l6ZSBvZiB0aGUgcGFnZVxuICAgIHRoaXMucGFnZS5vblJlc2l6ZSgpXG4gIH1cbn1cblxuXG4vKioqXG4gKiBMb29wXG4gKi9cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy51cGRhdGUpIHtcbiAgICAgIHRoaXMuY2FudmFzLnVwZGF0ZSgpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2UudXBkYXRlKSB7XG4gICAgICB0aGlzLnBhZ2UudXBkYXRlKClcbiAgICB9XG4gICAgdGhpcy5mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIC8qKipcbiAgICogTGlzdGVuZXJzXG4gICAqL1xuXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcykpXG4gIH1cblxuICBhZGRMaW5rTGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpIC8vLSBnYXRoZXIgYWxsIHRoZSBsaW5rcyBvZiB0aGUgcGFnZVxuICAgIGVhY2gobGlua3MsIGxpbmsgPT4ge1xuICAgICAgbGluay5vbmNsaWNrID0gZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIFxuICAgICAgICBjb25zdCB7IGhyZWYgfSA9IGxpbmsgLy8tIHRvIGdldCB0aGUgdXJsIGxpbmsgb2YgdGhlIHBhZ2VcbiAgICAgICAgdGhpcy5vbkNoYW5nZShocmVmKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxubmV3IEFwcCgpIiwiaW1wb3J0IFBhZ2UgZnJvbSAnY2xhc3Nlcy9QYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXQgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudDogJy5hYm91dCcsXG4gICAgICBpZDogJ0Fib3V0JyxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIG5hdmlnYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uJyksXG4gICAgICAgIHRpdGxlOiAnLmFib3V0X190aXRsZScsXG4gICAgICAgIHdyYXBwZXI6ICcuYWJvdXRfX3dyYXBwZXInLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCBQYWdlIGZyb20gXCJjbGFzc2VzL1BhZ2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGVjdGlvbnMgZXh0ZW5kcyBQYWdlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICBzdXBlcih7IFxuICAgICAgICBpZDogJ0NvbGxlY3Rpb25zJyxcbiAgICAgICAgZWxlbWVudDogJy5jb2xsZWN0aW9ucycsXG4gICAgICAgIGVsZW1lbnRzOnt0aXRsZTogJy5jb2xsZWN0aW9uc19fdGl0bGVzJ31cbiAgICB9KVxuICB9XG59ICIsImltcG9ydCBQYWdlIGZyb20gXCJjbGFzc2VzL1BhZ2VcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcImNsYXNzZXMvQnV0dG9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldGFpbCBleHRlbmRzIFBhZ2Uge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoeyBcbiAgICAgIGVsZW1lbnQ6ICcuZGV0YWlsJyxcbiAgICAgIGlkOiAnRGV0YWlsJyxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGJ1dHRvbjogJy5kZXRhaWxfX2J1dHRvbicsXG4gICAgICB9XG4gICAgfSkgIFxuICB9XG5cbiAgY3JlYXRlKCkge1xuICAgICAgc3VwZXIuY3JlYXRlKCkgLy8gYXZvaWQgb3ZlcnJpZGluZyB0aGUgcGFyZW50IGNsYXNzIG1ldGhvZCBjcmVhdGUgb2YgUGFnZS5qc1xuICBcbiAgICAgIHRoaXMubGluayA9IG5ldyBCdXR0b24oe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy5idXR0b25cbiAgICAgIH0pXG4gICAgfVxuICBcbiAgICBkZXN0cm95ICgpIHtcbiAgICAgIHN1cGVyLmRlc3Ryb3koKSAvLyBhdm9pZCBvdmVycmlkaW5nIHRoZSBwYXJlbnQgY2xhc3MgbWV0aG9kIGRlc3Ryb3kgb2YgUGFnZS5qc1xuICAgICAgdGhpcy5saW5rLnJlbW92ZUV2ZW50TGlzdGVuZXJzKClcbiAgICB9XG59IiwiaW1wb3J0IFBhZ2UgZnJvbSBcImNsYXNzZXMvUGFnZVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiY2xhc3Nlcy9CdXR0b25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZSBleHRlbmRzIFBhZ2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgIHN1cGVyKHsgXG4gICAgICAgIGVsZW1lbnQ6ICcuaG9tZScsXG4gICAgICAgIGlkOiAnSG9tZScsXG4gICAgICAgIFxuICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgIG5hdmlnYXRpb246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW9uJyksXG4gICAgICAgICAgbGluazogJy5ob21lX19saW5rJ1xuICAgICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBzdXBlci5jcmVhdGUoKSAvLyBhdm9pZCBvdmVycmlkaW5nIHRoZSBwYXJlbnQgY2xhc3MgbWV0aG9kIGNyZWF0ZSBvZiBQYWdlLmpzXG5cbiAgICB0aGlzLmxpbmsgPSBuZXcgQnV0dG9uKHtcbiAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLmxpbmtcbiAgICB9KVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpIC8vIGF2b2lkIG92ZXJyaWRpbmcgdGhlIHBhcmVudCBjbGFzcyBtZXRob2QgZGVzdHJveSBvZiBQYWdlLmpzXG4gICAgdGhpcy5saW5rLnJlbW92ZUV2ZW50TGlzdGVuZXJzKClcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNkZWZpbmUgR0xTTElGWSAxXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdE1hcDtcXG4gICBcXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKHRNYXAsIHZVdik7XFxuXFxuICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmU7IC8vIHNldCB0aGUgY29sb3Igb3IgdGV4dHVyZSBvZiB0aGUgY3ViZSB0byByZWRcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICB2VXYgPSB1djtcXG4gIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVwiOyIsImV4cG9ydCBjb25zdCBDT0xPUl9RVUFSVEVSX1NQQU5JU0hfV0hJVEUgPSAnI2Y5ZjFFNydcbmV4cG9ydCBjb25zdCBDT0xPUl9CUklHSFRfR1JFWSA9ICAnIzM3Mzg0QydcblxuIiwiaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnO1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgc3BsaXRzIHRleHQgaW50byBzcGFucyAtIGNvcGllZCBmcm9tIGEgcHJvamVjdCBzbyBJIGNhbid0IGV4cGxhaW4gaXRcbiAqIEBwYXJhbSB7c3RyaW5nIHx8IEhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvblxuICogQHBhcmFtIHtib29sfSBhcHBlbmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0KHsgZWxlbWVudCwgZXhwcmVzc2lvbiA9ICcgJywgYXBwZW5kID0gdHJ1ZSB9KSB7XG4gIGNvbnN0IHdvcmRzID0gc3BsaXRUZXh0KGVsZW1lbnQuaW5uZXJIVE1MLnRvU3RyaW5nKCkudHJpbSgpLCBleHByZXNzaW9uKTtcblxuICBsZXQgaW5uZXJIVE1MID0gJyc7XG5cbiAgZWFjaCh3b3JkcywgKGxpbmUpID0+IHtcbiAgICBpZiAobGluZS5pbmRleE9mKCc8YnI+JykgPiAtMSkge1xuICAgICAgY29uc3QgbGluZXMgPSBsaW5lLnNwbGl0KCc8YnI+Jyk7XG5cbiAgICAgIGVhY2gobGluZXMsIChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICBpbm5lckhUTUwgKz0gaW5kZXggPiAwID8gJzxicj4nICsgcGFyc2VMaW5lKGxpbmUpIDogcGFyc2VMaW5lKGxpbmUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVySFRNTCArPSBwYXJzZUxpbmUobGluZSk7XG4gICAgfVxuICB9KTtcblxuICBlbGVtZW50LmlubmVySFRNTCA9IGlubmVySFRNTDtcblxuICBjb25zdCBzcGFucyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpO1xuXG4gIGlmIChhcHBlbmQpIHtcbiAgICBlYWNoKHNwYW5zLCAoc3BhbikgPT4ge1xuICAgICAgY29uc3QgaXNTaW5nbGVMZXR0ZXIgPSBzcGFuLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMTtcbiAgICAgIGNvbnN0IGlzTm90RW1wdHkgPSBzcGFuLmlubmVySFRNTC50cmltKCkgIT09ICcnO1xuICAgICAgY29uc3QgaXNOb3RBbmRDaGFyYWN0ZXIgPSBzcGFuLnRleHRDb250ZW50ICE9PSAnJic7XG4gICAgICBjb25zdCBpc05vdERhc2hDaGFyYWN0ZXIgPSBzcGFuLnRleHRDb250ZW50ICE9PSAnLSc7XG5cbiAgICAgIGlmIChcbiAgICAgICAgaXNTaW5nbGVMZXR0ZXIgJiZcbiAgICAgICAgaXNOb3RFbXB0eSAmJlxuICAgICAgICBpc05vdEFuZENoYXJhY3RlciAmJlxuICAgICAgICBpc05vdERhc2hDaGFyYWN0ZXJcbiAgICAgICkge1xuICAgICAgICBzcGFuLmlubmVySFRNTCA9IGAke3NwYW4udGV4dENvbnRlbnR9Jm5ic3A7YDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzcGFucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZShzcGFucykge1xuICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsaW5lcyA9IFtdO1xuICBsZXQgd29yZHMgPSBbXTtcblxuICBsZXQgcG9zaXRpb24gPSBzcGFuc1swXS5vZmZzZXRUb3A7XG5cbiAgZWFjaChzcGFucywgKHNwYW4sIGluZGV4KSA9PiB7XG4gICAgaWYgKHNwYW4ub2Zmc2V0VG9wID09PSBwb3NpdGlvbikge1xuICAgICAgd29yZHMucHVzaChzcGFuKTtcbiAgICB9XG5cbiAgICBpZiAoc3Bhbi5vZmZzZXRUb3AgIT09IHBvc2l0aW9uKSB7XG4gICAgICBsaW5lcy5wdXNoKHdvcmRzKTtcblxuICAgICAgd29yZHMgPSBbXTtcbiAgICAgIHdvcmRzLnB1c2goc3Bhbik7XG5cbiAgICAgIHBvc2l0aW9uID0gc3Bhbi5vZmZzZXRUb3A7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ICsgMSA9PT0gc3BhbnMubGVuZ3RoKSB7XG4gICAgICBsaW5lcy5wdXNoKHdvcmRzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsaW5lcztcbn1cblxuZnVuY3Rpb24gc3BsaXRUZXh0KHRleHQsIGV4cHJlc3Npb24pIHtcbiAgY29uc3Qgc3BsaXRzID0gdGV4dC5zcGxpdCgnPGJyPicpO1xuICAvLyBjb25zdCBzYWZlVGV4dCA9IHRleHQucmVwbGFjZSgvPCg/IWJyXFxzKlxcLz8pW14+XSs+L2csICcnKVxuICAvLyBjb25zdCBzcGxpdHMgPSBzYWZlVGV4dC5zcGxpdCgnPGJyPicpOyAtLT4gcGV1dCByZW1wbGFjZXIgY29ucyBzcGxpdCBhdSBkZXNzdXMsIG1haXMgZmFpdCBidWdnZXIgbGUgcHJlbG9hZGVyXG5cbiAgbGV0IHdvcmRzID0gW107XG5cbiAgZWFjaChzcGxpdHMsIChpdGVtLCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgIHdvcmRzLnB1c2goJzxicj4nKTtcbiAgICB9XG5cbiAgICB3b3JkcyA9IHdvcmRzLmNvbmNhdChpdGVtLnNwbGl0KGV4cHJlc3Npb24pKTtcblxuICAgIGxldCBpc0xpbmsgPSBmYWxzZTtcbiAgICBsZXQgbGluayA9ICcnO1xuXG4gICAgY29uc3QgaW5uZXJIVE1MID0gW107XG5cbiAgICBlYWNoKHdvcmRzLCAod29yZCkgPT4ge1xuICAgICAgaWYgKCFpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJzxhJykgfHwgd29yZC5pbmNsdWRlcygnPHN0cm9uZycpKSkge1xuICAgICAgICBsaW5rID0gJyc7XG5cbiAgICAgICAgaXNMaW5rID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTGluaykge1xuICAgICAgICBsaW5rICs9IGAgJHt3b3JkfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJy9hPicpIHx8IHdvcmQuaW5jbHVkZXMoJy9zdHJvbmc+JykpKSB7XG4gICAgICAgIGlubmVySFRNTC5wdXNoKGxpbmspO1xuXG4gICAgICAgIGxpbmsgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0xpbmsgJiYgbGluayA9PT0gJycpIHtcbiAgICAgICAgaW5uZXJIVE1MLnB1c2god29yZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJy9hPicpIHx8IHdvcmQuaW5jbHVkZXMoJy9zdHJvbmc+JykpKSB7XG4gICAgICAgIGlzTGluayA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgd29yZHMgPSBpbm5lckhUTUw7XG4gIH0pO1xuXG4gIHJldHVybiB3b3Jkcztcbn1cblxuZnVuY3Rpb24gcGFyc2VMaW5lKGxpbmUpIHtcbiAgbGluZSA9IGxpbmUudHJpbSgpO1xuXG4gIGlmIChsaW5lID09PSAnJyB8fCBsaW5lID09PSAnICcpIHtcbiAgICByZXR1cm4gbGluZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGluZSA9PT0gJzxicj4nXG4gICAgICA/ICc8YnI+J1xuICAgICAgOiBgPHNwYW4+JHtsaW5lfTwvc3Bhbj5gICsgKGxpbmUubGVuZ3RoID4gMSA/ICcgJyA6ICcnKTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMi43XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBzdHlsZSkge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSBjYWNoZS54ID8gY2FjaGVbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cblxuICAgICAgcHJvcGVydHkgPT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0aGlzLnRmbS56T3JpZ2luID0gY2FjaGUuek9yaWdpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcHJvcGVydHlBbGlhc2VzLnRyYW5zZm9ybS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gX3NhdmVTdHlsZS5jYWxsKF90aGlzLCBwLCBpc05vdENTUyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgdGhpcy5zdmdvID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcbiAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNOb3RDU1MsIFwiXCIpO1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gIH1cblxuICAoc3R5bGUgfHwgaXNOb3RDU1MpICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgaXNOb3RDU1MsIHN0eWxlW3Byb3BlcnR5XSk7XG59LFxuICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zbGF0ZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICB9XG59LFxuICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGksXG4gICAgICBwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIC8vIHN0b3JlZCBsaWtlIHRoaXM6IHByb3BlcnR5LCBpc05vdENTUywgdmFsdWVcbiAgICBpZiAoIXByb3BzW2kgKyAxXSkge1xuICAgICAgcHJvcHNbaSArIDJdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0uc3Vic3RyKDAsIDIpID09PSBcIi0tXCIgPyBwcm9wc1tpXSA6IHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSBpZiAocHJvcHNbaSArIDFdID09PSAyKSB7XG4gICAgICAvLyBub24tQ1NTIHZhbHVlIChmdW5jdGlvbi1iYXNlZClcbiAgICAgIHRhcmdldFtwcm9wc1tpXV0ocHJvcHNbaSArIDJdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm9uLUNTUyB2YWx1ZSAobm90IGZ1bmN0aW9uLWJhc2VkKVxuICAgICAgdGFyZ2V0W3Byb3BzW2ldXSA9IHByb3BzW2kgKyAyXTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy50Zm0pIHtcbiAgICBmb3IgKHAgaW4gdGhpcy50Zm0pIHtcbiAgICAgIGNhY2hlW3BdID0gdGhpcy50Zm1bcF07XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHRoaXMuc3ZnbyB8fCBcIlwiKTtcbiAgICB9XG5cbiAgICBpID0gX3JldmVydGluZygpO1xuXG4gICAgaWYgKCghaSB8fCAhaS5pc1N0YXJ0KSAmJiAhc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG4gICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcblxuICAgICAgaWYgKGNhY2hlLnpPcmlnaW4gJiYgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKSB7XG4gICAgICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSArPSBcIiBcIiArIGNhY2hlLnpPcmlnaW4gKyBcInB4XCI7IC8vIHNpbmNlIHdlJ3JlIHVuY2FjaGluZywgd2UgbXVzdCBwdXQgdGhlIHpPcmlnaW4gYmFjayBpbnRvIHRoZSB0cmFuc2Zvcm1PcmlnaW4gc28gdGhhdCB3ZSBjYW4gcHVsbCBpdCBvdXQgYWNjdXJhdGVseSB3aGVuIHdlIHBhcnNlIGFnYWluLiBPdGhlcndpc2UsIHdlJ2QgbG9zZSB0aGUgeiBwb3J0aW9uIG9mIHRoZSBvcmlnaW4gc2luY2Ugd2UgZXh0cmFjdCBpdCB0byBwcm90ZWN0IGZyb20gU2FmYXJpIGJ1Z3MuXG5cbiAgICAgICAgY2FjaGUuek9yaWdpbiA9IDA7XG4gICAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgfVxuXG4gICAgICBjYWNoZS51bmNhY2hlID0gMTsgLy8gaWYgaXQncyBhIHN0YXJ0QXQgdGhhdCdzIGJlaW5nIHJldmVydGVkIGluIHRoZSBfaW5pdFR3ZWVuKCkgb2YgdGhlIGNvcmUsIHdlIGRvbid0IG5lZWQgdG8gdW5jYWNoZSB0cmFuc2Zvcm1zLiBUaGlzIGlzIHB1cmVseSBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cbiAgICB9XG4gIH1cbn0sXG4gICAgX2dldFN0eWxlU2F2ZXIgPSBmdW5jdGlvbiBfZ2V0U3R5bGVTYXZlcih0YXJnZXQsIHByb3BlcnRpZXMpIHtcbiAgdmFyIHNhdmVyID0ge1xuICAgIHRhcmdldDogdGFyZ2V0LFxuICAgIHByb3BzOiBbXSxcbiAgICByZXZlcnQ6IF9yZXZlcnRTdHlsZSxcbiAgICBzYXZlOiBfc2F2ZVN0eWxlXG4gIH07XG4gIHRhcmdldC5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KTsgLy8ganVzdCBtYWtlIHN1cmUgdGhlcmUncyBhIF9nc2FwIGNhY2hlIGRlZmluZWQgYmVjYXVzZSB3ZSByZWFkIGZyb20gaXQgaW4gX3NhdmVTdHlsZSgpIGFuZCBpdCdzIG1vcmUgZWZmaWNpZW50IHRvIGp1c3QgY2hlY2sgaXQgaGVyZSBvbmNlLlxuXG4gIHByb3BlcnRpZXMgJiYgdGFyZ2V0LnN0eWxlICYmIHRhcmdldC5ub2RlVHlwZSAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHNhdmVyLnNhdmUocCk7XG4gIH0pOyAvLyBtYWtlIHN1cmUgaXQncyBhIERPTSBub2RlIHRvby5cblxuICByZXR1cm4gc2F2ZXI7XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlICYmIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3JldmVydGluZyA9IGdzYXAuY29yZS5yZXZlcnRpbmc7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRSZXBhcmVudGVkQ2xvbmVCQm94ID0gZnVuY3Rpb24gX2dldFJlcGFyZW50ZWRDbG9uZUJCb3godGFyZ2V0KSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBvd25lciA9IHRhcmdldC5vd25lclNWR0VsZW1lbnQsXG4gICAgICBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCBvd25lciAmJiBvd25lci5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgY2xvbmUgPSB0YXJnZXQuY2xvbmVOb2RlKHRydWUpLFxuICAgICAgYmJveDtcblxuICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICBzdmcuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgdHJ5IHtcbiAgICBiYm94ID0gY2xvbmUuZ2V0QkJveCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHN2Zy5yZW1vdmVDaGlsZChjbG9uZSk7XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzLCBjbG9uZWQ7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0UmVwYXJlbnRlZENsb25lQkJveCh0YXJnZXQpO1xuICAgIGNsb25lZCA9IDE7XG4gIH1cblxuICBib3VuZHMgJiYgKGJvdW5kcy53aWR0aCB8fCBib3VuZHMuaGVpZ2h0KSB8fCBjbG9uZWQgfHwgKGJvdW5kcyA9IF9nZXRSZXBhcmVudGVkQ2xvbmVCQm94KHRhcmdldCkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGZpcnN0MkNoYXJzO1xuXG4gICAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3ApIHtcbiAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlLnJlbW92ZVByb3BlcnR5KSB7XG4gICAgICBmaXJzdDJDaGFycyA9IHByb3BlcnR5LnN1YnN0cigwLCAyKTtcblxuICAgICAgaWYgKGZpcnN0MkNoYXJzID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgIC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcbiAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShmaXJzdDJDaGFycyA9PT0gXCItLVwiID8gcHJvcGVydHkgOiBwcm9wZXJ0eS5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG4gICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfYWRkTm9uVHdlZW5pbmdQVCA9IGZ1bmN0aW9uIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgYmVnaW5uaW5nLCBlbmQsIG9ubHlTZXRBdEVuZCkge1xuICB2YXIgcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIG9ubHlTZXRBdEVuZCA/IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIDogX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUpO1xuICBwbHVnaW4uX3B0ID0gcHQ7XG4gIHB0LmIgPSBiZWdpbm5pbmc7XG4gIHB0LmUgPSBlbmQ7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICBkZWc6IDEsXG4gIHJhZDogMSxcbiAgdHVybjogMVxufSxcbiAgICBfbm9uU3RhbmRhcmRMYXlvdXRzID0ge1xuICBncmlkOiAxLFxuICBmbGV4OiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IHVuaXQgIT09IFwicmVtXCIgJiYgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRvUGVyY2VudCAmJiAocHJvcGVydHkgPT09IFwiaGVpZ2h0XCIgfHwgcHJvcGVydHkgPT09IFwid2lkdGhcIikpIHtcbiAgICAgIC8vIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCB3aWR0aC9oZWlnaHQgdGhhdCdzIGluc2lkZSBhIGNvbnRhaW5lciB3aXRoIHBhZGRpbmcgYW5kL29yIGl0J3MgYSBmbGV4Ym94L2dyaWQgY29udGFpbmVyLCB3ZSBtdXN0IGFwcGx5IGl0IHRvIHRoZSB0YXJnZXQgaXRzZWxmIHJhdGhlciB0aGFuIHRoZSBfdGVtcERpdiBpbiBvcmRlciB0byBlbnN1cmUgY29tcGxldGUgYWNjdXJhY3ksIGZhY3RvcmluZyBpbiB0aGUgcGFyZW50J3MgcGFkZGluZy5cbiAgICAgIHZhciB2ID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcbiAgICAgIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSBhbW91bnQgKyB1bml0O1xuICAgICAgcHggPSB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHYgPyB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdiA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB9XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yNDU4My1ob3ctdG8tcmV0dXJuLWNvbG9ycy10aGF0LWktaGFkLWFmdGVyLXJldmVyc2UvXG4gICAgfVxuICB9XG5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LnN0eWxlLCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZyksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIGEsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydFZhbHVlcyxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgY29sb3IsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIGVuZFVuaXQsXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy8gZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wXTtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgc3RhcnRWYWx1ZSA/IHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0VmFsdWUgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICAgICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmICF0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpIHtcbiAgICAgIC8vIG5vdGU6IGluIDMuMy4wIHdlIHN3aXRjaGVkIHRhcmdldC5vZmZzZXRQYXJlbnQgdG8gX2RvYy5ib2R5LmNvbnRhaW5zKHRhcmdldCkgdG8gYXZvaWQgW3NvbWV0aW1lcyB1bm5lY2Vzc2FyeV0gTXV0YXRpb25PYnNlcnZlciBjYWxscyBidXQgdGhhdCB3YXNuJ3QgYWRlcXVhdGUgYmVjYXVzZSB0aGVyZSBhcmUgZWRnZSBjYXNlcyB3aGVyZSBuZXN0ZWQgcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIG5lZWQgdG8gZ2V0IHJlcGFyZW50ZWQgdG8gYWNjdXJhdGVseSBzZW5zZSB0cmFuc2Zvcm1zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zODggYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzc1LiBOb3RlOiBwb3NpdGlvbjogZml4ZWQgZWxlbWVudHMgcmVwb3J0IGEgbnVsbCBvZmZzZXRQYXJlbnQgYnV0IHRoZXkgY291bGQgYWxzbyBiZSBpbnZpc2libGUgYmVjYXVzZSB0aGV5J3JlIGluIGFuIGFuY2VzdG9yIHdpdGggZGlzcGxheTogbm9uZSwgc28gd2UgY2hlY2sgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuIFdlIG9ubHkgd2FudCB0byBhbHRlciB0aGUgRE9NIGlmIHdlIGFic29sdXRlbHkgaGF2ZSB0byBiZWNhdXNlIGl0IGNhbiBjYXVzZSBpZnJhbWUgY29udGVudCB0byByZWxvYWQsIGxpa2UgYSBWaW1lbyB2aWRlby5cbiAgICAgIGFkZGVkVG9ET00gPSAxOyAvL2ZsYWdcblxuICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTsgLy8gaWYgKCEoXCJ4T3JpZ2luXCIgaW4gY2FjaGUpICYmICh4T3JpZ2luIHx8IHlPcmlnaW4pKSB7IC8vIGFkZGVkIGluIDMuMTIuMywgcmV2ZXJ0ZWQgaW4gMy4xMi40OyByZXF1aXJlcyBtb3JlIGV4cGxvcmF0aW9uXG4gICAgLy8gXHR4T3JpZ2luIC09IGJvdW5kcy54O1xuICAgIC8vIFx0eU9yaWdpbiAtPSBib3VuZHMueTtcbiAgICAvLyB9XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7IC8vIHRoZW9yeTogd2Ugb25seSBoYWQgdG8gZG8gdGhpcyBmb3Igc21vb3RoaW5nIGFuZCBpdCBhc3N1bWVzIHRoYXQgdGhlIHByZXZpb3VzIG9uZSB3YXMgbm90IG9yaWdpbklzQWJzb2x1dGUuXG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3NbX3RyYW5zZm9ybVByb3BdICE9PSBcIm5vbmVcIiA/IGNzW190cmFuc2Zvcm1Qcm9wXSA6IFwiXCIpO1xuICAgIH1cblxuICAgIHN0eWxlLnNjYWxlID0gc3R5bGUucm90YXRlID0gc3R5bGUudHJhbnNsYXRlID0gXCJub25lXCI7XG4gIH1cblxuICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgaWYgKGNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIC8vIGlmIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSAoYW5kIG1heWJlIGlmIG9yaWdpbiBpcyAwLDApLCB3ZSBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFByZXZpb3VzbHkgd2UgbGV0IHRoZSBkYXRhLXN2Zy1vcmlnaW4gc3RheSBpbnN0ZWFkLCBidXQgd2hlbiBpbnRyb2R1Y2luZyByZXZlcnQoKSwgaXQgY29tcGxpY2F0ZWQgdGhpbmdzLlxuICAgICAgdDIgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgIHQxID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyAgUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG4gICAgfVxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAhdW5jYWNoZSAmJiBjYWNoZS56T3JpZ2luIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgY2hhbmdlcyEpXG59LFxuICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4ocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgZW5kVmFsdWUpIHtcbiAgdmFyIGNhcCA9IDM2MCxcbiAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpICogKGlzU3RyaW5nICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFkXCIpID8gX1JBRDJERUcgOiAxKSxcbiAgICAgIGNoYW5nZSA9IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eSxcbiAgICAgICAgaW5saW5lUHJvcHM7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7IC8vIHdlIG1heSBjYWxsIGluaXQoKSBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBwbHVnaW4gaW5zdGFuY2UsIGxpa2Ugd2hlbiBhZGRpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzLCBzbyBtYWtlIHN1cmUgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSByZXZlcnQgZGF0YSBvciBpbmxpbmVQcm9wc1xuXG4gICAgdGhpcy5zdHlsZXMgPSB0aGlzLnN0eWxlcyB8fCBfZ2V0U3R5bGVTYXZlcih0YXJnZXQpO1xuICAgIGlubGluZVByb3BzID0gdGhpcy5zdHlsZXMucHJvcHM7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGlmIChwID09PSBcImF1dG9Sb3VuZFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmRWYWx1ZSA9IHZhcnNbcF07XG5cbiAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgIC8vIHBsdWdpbnNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgIGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBlbmRWYWx1ZS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3BlY2lhbFByb3ApIHtcbiAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfSBlbHNlIGlmIChwLnN1YnN0cigwLCAyKSA9PT0gXCItLVwiKSB7XG4gICAgICAgIC8vQ1NTIHZhcmlhYmxlXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAoZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUocCkgKyBcIlwiKS50cmltKCk7XG4gICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAgIGlmICghX2NvbG9yRXhwLnRlc3Qoc3RhcnRWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBjb2xvcnMgZG9uJ3QgaGF2ZSB1bml0c1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVW5pdCA/IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnRWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgKyBlbmRVbml0KSA6IHN0YXJ0VW5pdCAmJiAoZW5kVmFsdWUgKz0gc3RhcnRVbml0KTtcbiAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgX2lzU3RyaW5nKHN0YXJ0VmFsdWUpICYmIH5zdGFydFZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpICYmIChzdGFydFZhbHVlID0gX3JlcGxhY2VSYW5kb20oc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgIGdldFVuaXQoc3RhcnRWYWx1ZSArIFwiXCIpIHx8IHN0YXJ0VmFsdWUgPT09IFwiYXV0b1wiIHx8IChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0gfHwgZ2V0VW5pdChfZ2V0KHRhcmdldCwgcCkpIHx8IFwiXCIpOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7IC8vIGNhbid0IHdvcmsgd2l0aCByZWxhdGl2ZSB2YWx1ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICByZWxhdGl2ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiAmJiBlbmRWYWx1ZS5zdWJzdHIoMCwgMik7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKFwidmlzaWJpbGl0eVwiLCAwLCBzdHlsZS52aXNpYmlsaXR5KTtcblxuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCAhPT0gXCJzY2FsZVwiICYmIHAgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgfnAuaW5kZXhPZihcIixcIikgJiYgKHAgPSBwLnNwbGl0KFwiLFwiKVswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkID0gcCBpbiBfdHJhbnNmb3JtUHJvcHM7IC8vLS0tIFRSQU5TRk9STS1SRUxBVEVEIC0tLVxuXG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlcy5zYXZlKHApO1xuXG4gICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Qcm9wVHdlZW4pIHtcbiAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtICYmICF2YXJzLnBhcnNlVHJhbnNmb3JtIHx8IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHZhcnMucGFyc2VUcmFuc2Zvcm0pOyAvLyBpZiwgZm9yIGV4YW1wbGUsIGdzYXAuc2V0KC4uLiB7dHJhbnNmb3JtOlwidHJhbnNsYXRlWCg1MHZ3KVwifSksIHRoZSBfZ2V0KCkgY2FsbCBkb2Vzbid0IHBhcnNlIHRoZSB0cmFuc2Zvcm0sIHRodXMgY2FjaGUucmVuZGVyVHJhbnNmb3JtIHdvbid0IGJlIHNldCB5ZXQgc28gZm9yY2UgdGhlIHBhcnNpbmcgb2YgdGhlIHRyYW5zZm9ybSBoZXJlLlxuXG4gICAgICAgICAgICBzbW9vdGggPSB2YXJzLnNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoO1xuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuID0gdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBzdHlsZSwgX3RyYW5zZm9ybVByb3AsIDAsIDEsIGNhY2hlLnJlbmRlclRyYW5zZm9ybSwgY2FjaGUsIDAsIC0xKTsgLy90aGUgZmlyc3QgdGltZSB0aHJvdWdoLCBjcmVhdGUgdGhlIHJlbmRlcmluZyBQcm9wVHdlZW4gc28gdGhhdCBpdCBydW5zIExBU1QgKGluIHRoZSBsaW5rZWQgbGlzdCwgd2Uga2VlcCBhZGRpbmcgdG8gdGhlIGJlZ2lubmluZylcblxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLmRlcCA9IDE7IC8vZmxhZyBpdCBhcyBkZXBlbmRlbnQgc28gdGhhdCBpZiB0aGluZ3MgZ2V0IGtpbGxlZC9vdmVyd3JpdHRlbiBhbmQgdGhpcyBpcyB0aGUgb25seSBQcm9wVHdlZW4gbGVmdCwgd2UgY2FuIHNhZmVseSBraWxsIHRoZSB3aG9sZSB0d2Vlbi5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGNhY2hlLCBcInNjYWxlWVwiLCBjYWNoZS5zY2FsZVksIChyZWxhdGl2ZSA/IF9wYXJzZVJlbGF0aXZlKGNhY2hlLnNjYWxlWSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIGNhY2hlLnNjYWxlWSB8fCAwLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgICB0aGlzLl9wdC51ID0gMDtcbiAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICBwICs9IFwiWFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikge1xuICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kVmFsdWUpIDogZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInNtb290aFwiLCBjYWNoZS5zbW9vdGgsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgY2FjaGVbcF0gPSBlbmRWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyh0aGlzLCBlbmRWYWx1ZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBwID0gX2NoZWNrUHJvcFByZWZpeChwKSB8fCBwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAoZW5kTnVtIHx8IGVuZE51bSA9PT0gMCkgJiYgKHN0YXJ0TnVtIHx8IHN0YXJ0TnVtID09PSAwKSAmJiAhX2NvbXBsZXhFeHAudGVzdChlbmRWYWx1ZSkgJiYgcCBpbiBzdHlsZSkge1xuICAgICAgICAgIHN0YXJ0VW5pdCA9IChzdGFydFZhbHVlICsgXCJcIikuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTsgLy8gcHJvdGVjdCBhZ2FpbnN0IE5hTlxuXG4gICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpIHx8IChwIGluIF9jb25maWcudW5pdHMgPyBfY29uZmlnLnVuaXRzW3BdIDogc3RhcnRVbml0KTtcbiAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBpc1RyYW5zZm9ybVJlbGF0ZWQgPyBjYWNoZSA6IHN0eWxlLCBwLCBzdGFydE51bSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIHJlbGF0aXZlICsgZW5kTnVtKSA6IGVuZE51bSkgLSBzdGFydE51bSwgIWlzVHJhbnNmb3JtUmVsYXRlZCAmJiAoZW5kVW5pdCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpICYmIHZhcnMuYXV0b1JvdW5kICE9PSBmYWxzZSA/IF9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA6IF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICB0aGlzLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgLy93aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXZlcnQgaXQgdG8gdGhlIE9MRC9PUklHSU5BTCB2YWx1ZSAod2l0aCB0aG9zZSB1bml0cykuIFdlIHJlY29yZCB0aGF0IGFzIGEgXCJiXCIgKGJlZ2lubmluZykgcHJvcGVydHkgYW5kIHBvaW50IHRvIGEgcmVuZGVyIG1ldGhvZCB0aGF0IGhhbmRsZXMgdGhhdC4gKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcbiAgICAgICAgICAgIHRoaXMuX3B0LmIgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgLy9tYXliZSBpdCdzIG5vdCBhIHN0eWxlIC0gaXQgY291bGQgYmUgYSBwcm9wZXJ0eSBhZGRlZCBkaXJlY3RseSB0byBhbiBlbGVtZW50IGluIHdoaWNoIGNhc2Ugd2UnbGwgdHJ5IHRvIGFuaW1hdGUgdGhhdC5cbiAgICAgICAgICAgIHRoaXMuYWRkKHRhcmdldCwgcCwgc3RhcnRWYWx1ZSB8fCB0YXJnZXRbcF0sIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIF9taXNzaW5nUGx1Z2luKHAsIGVuZFZhbHVlKTtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcuY2FsbCh0aGlzLCB0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIHJlbGF0aXZlID8gcmVsYXRpdmUgKyBlbmRWYWx1ZSA6IGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCB8fCAocCBpbiBzdHlsZSA/IGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pIDogdHlwZW9mIHRhcmdldFtwXSA9PT0gXCJmdW5jdGlvblwiID8gaW5saW5lUHJvcHMucHVzaChwLCAyLCB0YXJnZXRbcF0oKSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0aGlzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICBpZiAoZGF0YS50d2Vlbi5fdGltZSB8fCAhX3JldmVydGluZygpKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5nc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4oZnVuY3Rpb24gKHBvc2l0aW9uQW5kU2NhbGUsIHJvdGF0aW9uLCBvdGhlcnMsIGFsaWFzZXMpIHtcbiAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgX2ZvckVhY2hOYW1lKGFsaWFzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICB9KTtcbn0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJweFwiO1xufSk7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcbmV4cG9ydCB7IENTU1BsdWdpbiBhcyBkZWZhdWx0LCBfZ2V0QkJveCwgX2NyZWF0ZUVsZW1lbnQsIF9jaGVja1Byb3BQcmVmaXggYXMgY2hlY2tQcmVmaXggfTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjEyLjdcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDI1LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2NvbmZpZyA9IHtcbiAgYXV0b1NsZWVwOiAxMjAsXG4gIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICBudWxsVGFyZ2V0V2FybjogMSxcbiAgdW5pdHM6IHtcbiAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gIH1cbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICBkdXJhdGlvbjogLjUsXG4gIG92ZXJ3cml0ZTogZmFsc2UsXG4gIGRlbGF5OiAwXG59LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX3JldmVydGluZyxcbiAgICBfY29udGV4dCxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgX3dpbixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2RvYyxcbiAgICBfZ2xvYmFscyA9IHt9LFxuICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICBfY29yZVJlYWR5LFxuICAgIF9pbnN0YWxsID0gZnVuY3Rpb24gX2luc3RhbGwoc2NvcGUpIHtcbiAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG59LFxuICAgIF9taXNzaW5nUGx1Z2luID0gZnVuY3Rpb24gX21pc3NpbmdQbHVnaW4ocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xufSxcbiAgICBfd2FybiA9IGZ1bmN0aW9uIF93YXJuKG1lc3NhZ2UsIHN1cHByZXNzKSB7XG4gIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufSxcbiAgICBfYWRkR2xvYmFsID0gZnVuY3Rpb24gX2FkZEdsb2JhbChuYW1lLCBvYmopIHtcbiAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbn0sXG4gICAgX2VtcHR5RnVuYyA9IGZ1bmN0aW9uIF9lbXB0eUZ1bmMoKSB7XG4gIHJldHVybiAwO1xufSxcbiAgICBfc3RhcnRBdFJldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGlzU3RhcnQ6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cbn0sXG4gICAgX251bWVyaWNJZlBvc3NpYmxlID0gZnVuY3Rpb24gX251bWVyaWNJZlBvc3NpYmxlKHZhbHVlKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgfVxuICB9O1xufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzKF9pc0FycmF5KHZhcnMua2V5ZnJhbWVzKSkgOiBfc2V0RGVmYXVsdHM7XG5cbiAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBmdW5jKHZhcnMsIHBhcmVudC52YXJzLmRlZmF1bHRzKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2FycmF5c01hdGNoID0gZnVuY3Rpb24gX2FycmF5c01hdGNoKGExLCBhMikge1xuICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gIHdoaWxlIChtYXRjaCAmJiBpLS0gJiYgYTFbaV0gPT09IGEyW2ldKSB7fVxuXG4gIHJldHVybiBpIDwgMDtcbn0sXG4gICAgX2FkZExpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX2FkZExpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3AsIHNvcnRCeSkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHNvcnRCeSkge1xuICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgcHJldiA9IHByZXYuX3ByZXY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGlmIChjaGlsZC5fbmV4dCkge1xuICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgY2hpbGQuX3ByZXYgPSBwcmV2O1xuICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gIHJldHVybiBjaGlsZDtcbn0sXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gIH0gZWxzZSBpZiAocGFyZW50W2ZpcnN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBwcmV2O1xuICB9XG5cbiAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7IC8vIGRvbid0IGRlbGV0ZSB0aGUgX2RwIGp1c3Qgc28gd2UgY2FuIHJldmVydCBpZiBuZWNlc3NhcnkuIEJ1dCBwYXJlbnQgc2hvdWxkIGJlIG51bGwgdG8gaW5kaWNhdGUgdGhlIGl0ZW0gaXNuJ3QgaW4gYSBsaW5rZWQgbGlzdC5cbn0sXG4gICAgX3JlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCwgb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSkge1xuICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lIC8gY3ljbGVEdXJhdGlvbikpO1xuICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG59LFxuICAgIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lID0gZnVuY3Rpb24gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50VGltZSwgY2hpbGQpIHtcbiAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG59LFxuICAgIF9zZXRFbmQgPSBmdW5jdGlvbiBfc2V0RW5kKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xufSxcbiAgICBfYWxpZ25QbGF5aGVhZCA9IGZ1bmN0aW9uIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgdG90YWxUaW1lKSB7XG4gIC8vIGFkanVzdHMgdGhlIGFuaW1hdGlvbidzIF9zdGFydCBhbmQgX2VuZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIHRvdGFsVGltZSAob25seSBpZiB0aGUgcGFyZW50J3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSBhbmQgdGhlIGFuaW1hdGlvbiBpc24ndCBwYXVzZWQpLiBJdCBkb2Vzbid0IGRvIGFueSByZW5kZXJpbmcgb3IgZm9yY2luZyB0aGluZ3MgYmFjayBpbnRvIHBhcmVudCB0aW1lbGluZXMsIGV0Yy4gLSB0aGF0J3Mgd2hhdCB0b3RhbFRpbWUoKSBpcyBmb3IuXG4gIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIGFuaW1hdGlvbi5fdHMpIHtcbiAgICBhbmltYXRpb24uX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUgLSAoYW5pbWF0aW9uLl90cyA+IDAgPyB0b3RhbFRpbWUgLyBhbmltYXRpb24uX3RzIDogKChhbmltYXRpb24uX2RpcnR5ID8gYW5pbWF0aW9uLnRvdGFsRHVyYXRpb24oKSA6IGFuaW1hdGlvbi5fdER1cikgLSB0b3RhbFRpbWUpIC8gLWFuaW1hdGlvbi5fdHMpKTtcblxuICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgIHBhcmVudC5fZGlydHkgfHwgX3VuY2FjaGUocGFyZW50LCBhbmltYXRpb24pOyAvL2ZvciBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC4gSWYgdGhlIHBhcmVudCdzIGNhY2hlIGlzIGFscmVhZHkgZGlydHksIGl0IGFscmVhZHkgdG9vayBjYXJlIG9mIG1hcmtpbmcgdGhlIGFuY2VzdG9ycyBhcyBkaXJ0eSB0b28sIHNvIHNraXAgdGhlIGZ1bmN0aW9uIGNhbGwgaGVyZS5cbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuXG4vKlxuX3RvdGFsVGltZVRvVGltZSA9IChjbGFtcGVkVG90YWxUaW1lLCBkdXJhdGlvbiwgcmVwZWF0LCByZXBlYXREZWxheSwgeW95bykgPT4ge1xuXHRsZXQgY3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgcmVwZWF0RGVsYXksXG5cdFx0dGltZSA9IF9yb3VuZChjbGFtcGVkVG90YWxUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cdGlmICh0aW1lID4gZHVyYXRpb24pIHtcblx0XHR0aW1lID0gZHVyYXRpb247XG5cdH1cblx0cmV0dXJuICh5b3lvICYmICh+fihjbGFtcGVkVG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgJiAxKSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xufSxcbiovXG5fcG9zdEFkZENoZWNrcyA9IGZ1bmN0aW9uIF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCkge1xuICB2YXIgdDtcblxuICBpZiAoY2hpbGQuX3RpbWUgfHwgIWNoaWxkLl9kdXIgJiYgY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0IDwgdGltZWxpbmUuX3RpbWUgJiYgKGNoaWxkLl9kdXIgfHwgIWNoaWxkLmFkZCkpIHtcbiAgICAvLyBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQsIG9yIGlmIGl0J3MgYmVpbmcgaW5zZXJ0ZWQgaW50byBhIHRpbWVsaW5lIEJFRk9SRSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgY3VycmVudGx5LiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLiBTcGVjaWFsIGNhc2U6IGlmIGl0J3MgYSB0aW1lbGluZSAoaGFzIC5hZGQoKSBtZXRob2QpIGFuZCBubyBkdXJhdGlvbiwgd2UgY2FuIHNraXAgcmVuZGVyaW5nIGJlY2F1c2UgdGhlIHVzZXIgbWF5IGJlIHBvcHVsYXRpbmcgaXQgQUZURVIgYWRkaW5nIGl0IHRvIGEgcGFyZW50IHRpbWVsaW5lICh1bmNvbnZlbnRpb25hbCwgYnV0IHBvc3NpYmxlLCBhbmQgd2Ugd291bGRuJ3Qgd2FudCBpdCB0byBnZXQgcmVtb3ZlZCBpZiB0aGUgcGFyZW50J3MgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUpLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpOyAvLyBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBuZXcgY2hpbGQgbWFrZXMgaXQgbG9uZ2VyLCB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgdGhlIHBhcmVudCdzIF9zdGFydCAocHVzaCBpdCBiYWNrKVxuXG4gIHJldHVybiB0aW1lbGluZTtcbn0sXG4gICAgX3Njcm9sbFRyaWdnZXIgPSBmdW5jdGlvbiBfc2Nyb2xsVHJpZ2dlcihhbmltYXRpb24sIHRyaWdnZXIpIHtcbiAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbn0sXG4gICAgX2F0dGVtcHRJbml0VHdlZW4gPSBmdW5jdGlvbiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgIV9yZXZlcnRpbmcgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICByZXR1cm4gMTtcbiAgfVxufSxcbiAgICBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChfcmVmKSB7XG4gIHZhciBwYXJlbnQgPSBfcmVmLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xufSxcbiAgICAvLyBjaGVjayBwYXJlbnQncyBfbG9jayBiZWNhdXNlIHdoZW4gYSB0aW1lbGluZSByZXBlYXRzL3lveW9zIGFuZCBkb2VzIGl0cyBhcnRpZmljaWFsIHdyYXBwaW5nLCB3ZSBzaG91bGRuJ3QgZm9yY2UgdGhlIHJhdGlvIGJhY2sgdG8gMFxuX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gIHZhciBkYXRhID0gX3JlZjIuZGF0YTtcbiAgcmV0dXJuIGRhdGEgPT09IFwiaXNGcm9tU3RhcnRcIiB8fCBkYXRhID09PSBcImlzU3RhcnRcIjtcbn0sXG4gICAgX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuID0gZnVuY3Rpb24gX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICB2YXIgcHJldlJhdGlvID0gdHdlZW4ucmF0aW8sXG4gICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAvLyBpZiB0aGUgdHdlZW4gb3IgaXRzIHBhcmVudCBpcyByZXZlcnNlZCBhbmQgdGhlIHRvdGFsVGltZSBpcyAwLCB3ZSBzaG91bGQgZ28gdG8gYSByYXRpbyBvZiAwLiBFZGdlIGNhc2U6IGlmIGEgZnJvbSgpIG9yIGZyb21UbygpIHN0YWdnZXIgdHdlZW4gaXMgcGxhY2VkIGxhdGVyIGluIGEgdGltZWxpbmUsIHRoZSBcInN0YXJ0QXRcIiB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGNvdWxkIGluaXRpYWxseSByZW5kZXIgYXQgYSB0aW1lIHdoZW4gdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGlzIHRlY2huaWNhbGx5IEJFRk9SRSB3aGVyZSB0aGlzIHR3ZWVuIGlzLCBzbyBtYWtlIHN1cmUgdGhhdCBhbnkgXCJmcm9tXCIgYW5kIFwiZnJvbVRvXCIgc3RhcnRBdCB0d2VlbnMgYXJlIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lIGF0IGEgcmF0aW8gb2YgMS5cbiAgcmVwZWF0RGVsYXkgPSB0d2Vlbi5fckRlbGF5LFxuICAgICAgdFRpbWUgPSAwLFxuICAgICAgcHQsXG4gICAgICBpdGVyYXRpb24sXG4gICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gIGlmIChyZXBlYXREZWxheSAmJiB0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy8gaW4gY2FzZSB0aGVyZSdzIGEgemVyby1kdXJhdGlvbiB0d2VlbiB0aGF0IGhhcyBhIHJlcGVhdCB3aXRoIGEgcmVwZWF0RGVsYXlcbiAgICB0VGltZSA9IF9jbGFtcCgwLCB0d2Vlbi5fdER1ciwgdG90YWxUaW1lKTtcbiAgICBpdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBfYW5pbWF0aW9uQ3ljbGUodHdlZW4uX3RUaW1lLCByZXBlYXREZWxheSkpIHtcbiAgICAgIC8vIGlmIGl0ZXJhdGlvbiBjaGFuZ2VkXG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IF9yZXZlcnRpbmcgfHwgZm9yY2UgfHwgdHdlZW4uX3pUaW1lID09PSBfdGlueU51bSB8fCAhdG90YWxUaW1lICYmIHR3ZWVuLl96VGltZSkge1xuICAgIGlmICghdHdlZW4uX2luaXR0ZWQgJiYgX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzLCB0VGltZSkpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdG90YWxUaW1lIDwgMCAmJiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgdHJ1ZSk7XG4gICAgdHdlZW4uX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25VcGRhdGVcIik7XG4gICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgIGlmICgodG90YWxUaW1lID49IHR3ZWVuLl90RHVyIHx8IHRvdGFsVGltZSA8IDApICYmIHR3ZWVuLnJhdGlvID09PSByYXRpbykge1xuICAgICAgcmF0aW8gJiYgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4sIDEpO1xuXG4gICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICFfcmV2ZXJ0aW5nKSB7XG4gICAgICAgIF9jYWxsYmFjayh0d2VlbiwgcmF0aW8gPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgdHdlZW4uX3Byb20gJiYgdHdlZW4uX3Byb20oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIXR3ZWVuLl96VGltZSkge1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgfVxufSxcbiAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gIHZhciBjaGlsZDtcblxuICBpZiAodGltZSA+IHByZXZUaW1lKSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA8PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0ID4gcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fbGFzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA8IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fcHJldjtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3NldER1cmF0aW9uID0gZnVuY3Rpb24gX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgZHVyYXRpb24sIHNraXBVbmNhY2hlLCBsZWF2ZVBsYXloZWFkKSB7XG4gIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgIGR1ciA9IF9yb3VuZFByZWNpc2UoZHVyYXRpb24pIHx8IDAsXG4gICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uLl90VGltZSAvIGFuaW1hdGlvbi5fdER1cjtcbiAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCAmJiAoYW5pbWF0aW9uLl90aW1lICo9IGR1ciAvIGFuaW1hdGlvbi5fZHVyKTtcbiAgYW5pbWF0aW9uLl9kdXIgPSBkdXI7XG4gIGFuaW1hdGlvbi5fdER1ciA9ICFyZXBlYXQgPyBkdXIgOiByZXBlYXQgPCAwID8gMWUxMCA6IF9yb3VuZFByZWNpc2UoZHVyICogKHJlcGVhdCArIDEpICsgYW5pbWF0aW9uLl9yRGVsYXkgKiByZXBlYXQpO1xuICB0b3RhbFByb2dyZXNzID4gMCAmJiAhbGVhdmVQbGF5aGVhZCAmJiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKTtcbiAgYW5pbWF0aW9uLnBhcmVudCAmJiBfc2V0RW5kKGFuaW1hdGlvbik7XG4gIHNraXBVbmNhY2hlIHx8IF91bmNhY2hlKGFuaW1hdGlvbi5wYXJlbnQsIGFuaW1hdGlvbik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xufSxcbiAgICBfemVyb1Bvc2l0aW9uID0ge1xuICBfc3RhcnQ6IDAsXG4gIGVuZFRpbWU6IF9lbXB0eUZ1bmMsXG4gIHRvdGFsRHVyYXRpb246IF9lbXB0eUZ1bmNcbn0sXG4gICAgX3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbiBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLCBwZXJjZW50QW5pbWF0aW9uKSB7XG4gIHZhciBsYWJlbHMgPSBhbmltYXRpb24ubGFiZWxzLFxuICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgIGNsaXBwZWREdXJhdGlvbiA9IGFuaW1hdGlvbi5kdXJhdGlvbigpID49IF9iaWdOdW0gPyByZWNlbnQuZW5kVGltZShmYWxzZSkgOiBhbmltYXRpb24uX2R1cixcbiAgICAgIC8vaW4gY2FzZSB0aGVyZSdzIGEgY2hpbGQgdGhhdCBpbmZpbml0ZWx5IHJlcGVhdHMsIHVzZXJzIGFsbW9zdCBuZXZlciBpbnRlbmQgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnQgb2YgYSBuZXcgY2hpbGQgdG8gYmUgYmFzZWQgb24gYSBTVVBFUiBsb25nIHZhbHVlIGxpa2UgdGhhdCBzbyB3ZSBjbGlwIGl0IGFuZCBhc3N1bWUgdGhlIG1vc3QgcmVjZW50bHktYWRkZWQgY2hpbGQncyBlbmRUaW1lIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gIGksXG4gICAgICBvZmZzZXQsXG4gICAgICBpc1BlcmNlbnQ7XG5cbiAgaWYgKF9pc1N0cmluZyhwb3NpdGlvbikgJiYgKGlzTmFOKHBvc2l0aW9uKSB8fCBwb3NpdGlvbiBpbiBsYWJlbHMpKSB7XG4gICAgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cbiAgICBvZmZzZXQgPSBwb3NpdGlvbi5jaGFyQXQoMCk7XG4gICAgaXNQZXJjZW50ID0gcG9zaXRpb24uc3Vic3RyKC0xKSA9PT0gXCIlXCI7XG4gICAgaSA9IHBvc2l0aW9uLmluZGV4T2YoXCI9XCIpO1xuXG4gICAgaWYgKG9mZnNldCA9PT0gXCI8XCIgfHwgb2Zmc2V0ID09PSBcIj5cIikge1xuICAgICAgaSA+PSAwICYmIChwb3NpdGlvbiA9IHBvc2l0aW9uLnJlcGxhY2UoLz0vLCBcIlwiKSk7XG4gICAgICByZXR1cm4gKG9mZnNldCA9PT0gXCI8XCIgPyByZWNlbnQuX3N0YXJ0IDogcmVjZW50LmVuZFRpbWUocmVjZW50Ll9yZXBlYXQgPj0gMCkpICsgKHBhcnNlRmxvYXQocG9zaXRpb24uc3Vic3RyKDEpKSB8fCAwKSAqIChpc1BlcmNlbnQgPyAoaSA8IDAgPyByZWNlbnQgOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCkgLyAxMDAgOiAxKTtcbiAgICB9XG5cbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHBvc2l0aW9uIGluIGxhYmVscyB8fCAobGFiZWxzW3Bvc2l0aW9uXSA9IGNsaXBwZWREdXJhdGlvbik7XG4gICAgICByZXR1cm4gbGFiZWxzW3Bvc2l0aW9uXTtcbiAgICB9XG5cbiAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KHBvc2l0aW9uLmNoYXJBdChpIC0gMSkgKyBwb3NpdGlvbi5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChpc1BlcmNlbnQgJiYgcGVyY2VudEFuaW1hdGlvbikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC8gMTAwICogKF9pc0FycmF5KHBlcmNlbnRBbmltYXRpb24pID8gcGVyY2VudEFuaW1hdGlvblswXSA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaSA+IDEgPyBfcGFyc2VQb3NpdGlvbihhbmltYXRpb24sIHBvc2l0aW9uLnN1YnN0cigwLCBpIC0gMSksIHBlcmNlbnRBbmltYXRpb24pICsgb2Zmc2V0IDogY2xpcHBlZER1cmF0aW9uICsgb2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uID09IG51bGwgPyBjbGlwcGVkRHVyYXRpb24gOiArcG9zaXRpb247XG59LFxuICAgIF9jcmVhdGVUd2VlblR5cGUgPSBmdW5jdGlvbiBfY3JlYXRlVHdlZW5UeXBlKHR5cGUsIHBhcmFtcywgdGltZWxpbmUpIHtcbiAgdmFyIGlzTGVnYWN5ID0gX2lzTnVtYmVyKHBhcmFtc1sxXSksXG4gICAgICB2YXJzSW5kZXggPSAoaXNMZWdhY3kgPyAyIDogMSkgKyAodHlwZSA8IDIgPyAwIDogMSksXG4gICAgICB2YXJzID0gcGFyYW1zW3ZhcnNJbmRleF0sXG4gICAgICBpclZhcnMsXG4gICAgICBwYXJlbnQ7XG5cbiAgaXNMZWdhY3kgJiYgKHZhcnMuZHVyYXRpb24gPSBwYXJhbXNbMV0pO1xuICB2YXJzLnBhcmVudCA9IHRpbWVsaW5lO1xuXG4gIGlmICh0eXBlKSB7XG4gICAgaXJWYXJzID0gdmFycztcbiAgICBwYXJlbnQgPSB0aW1lbGluZTtcblxuICAgIHdoaWxlIChwYXJlbnQgJiYgIShcImltbWVkaWF0ZVJlbmRlclwiIGluIGlyVmFycykpIHtcbiAgICAgIC8vIGluaGVyaXRhbmNlIGhhc24ndCBoYXBwZW5lZCB5ZXQsIGJ1dCBzb21lb25lIG1heSBoYXZlIHNldCBhIGRlZmF1bHQgaW4gYW4gYW5jZXN0b3IgdGltZWxpbmUuIFdlIGNvdWxkIGRvIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIpIGJ1dCB0aGF0J2QgZXhhY3QgYSBzbGlnaHQgcGVyZm9ybWFuY2UgcGVuYWx0eSBiZWNhdXNlIF9pbmhlcml0RGVmYXVsdHMoKSBhbHNvIHJ1bnMgaW4gdGhlIFR3ZWVuIGNvbnN0cnVjdG9yLiBXZSdyZSBwYXlpbmcgYSBzbWFsbCBrYiBwcmljZSBoZXJlIHRvIGdhaW4gc3BlZWQuXG4gICAgICBpclZhcnMgPSBwYXJlbnQudmFycy5kZWZhdWx0cyB8fCB7fTtcbiAgICAgIHBhcmVudCA9IF9pc05vdEZhbHNlKHBhcmVudC52YXJzLmluaGVyaXQpICYmIHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShpclZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICB0eXBlIDwgMiA/IHZhcnMucnVuQmFja3dhcmRzID0gMSA6IHZhcnMuc3RhcnRBdCA9IHBhcmFtc1t2YXJzSW5kZXggLSAxXTsgLy8gXCJmcm9tXCIgdmFyc1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUd2VlbihwYXJhbXNbMF0sIHZhcnMsIHBhcmFtc1t2YXJzSW5kZXggKyAxXSk7XG59LFxuICAgIF9jb25kaXRpb25hbFJldHVybiA9IGZ1bmN0aW9uIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuYykge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBmdW5jKHZhbHVlKSA6IGZ1bmM7XG59LFxuICAgIF9jbGFtcCA9IGZ1bmN0aW9uIF9jbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcbn0sXG4gICAgZ2V0VW5pdCA9IGZ1bmN0aW9uIGdldFVuaXQodmFsdWUsIHYpIHtcbiAgcmV0dXJuICFfaXNTdHJpbmcodmFsdWUpIHx8ICEodiA9IF91bml0RXhwLmV4ZWModmFsdWUpKSA/IFwiXCIgOiB2WzFdO1xufSxcbiAgICAvLyBub3RlOiBwcm90ZWN0IGFnYWluc3QgcGFkZGVkIG51bWJlcnMgYXMgc3RyaW5ncywgbGlrZSBcIjEwMC4xMDBcIi4gVGhhdCBzaG91bGRuJ3QgcmV0dXJuIFwiMDBcIiBhcyB0aGUgdW5pdC4gSWYgaXQncyBudW1lcmljLCByZXR1cm4gbm8gdW5pdC5cbmNsYW1wID0gZnVuY3Rpb24gY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gIH0pO1xufSxcbiAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfaXNBcnJheUxpa2UgPSBmdW5jdGlvbiBfaXNBcnJheUxpa2UodmFsdWUsIG5vbkVtcHR5KSB7XG4gIHJldHVybiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWUpICYmIFwibGVuZ3RoXCIgaW4gdmFsdWUgJiYgKCFub25FbXB0eSAmJiAhdmFsdWUubGVuZ3RoIHx8IHZhbHVlLmxlbmd0aCAtIDEgaW4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlWzBdKSkgJiYgIXZhbHVlLm5vZGVUeXBlICYmIHZhbHVlICE9PSBfd2luO1xufSxcbiAgICBfZmxhdHRlbiA9IGZ1bmN0aW9uIF9mbGF0dGVuKGFyLCBsZWF2ZVN0cmluZ3MsIGFjY3VtdWxhdG9yKSB7XG4gIGlmIChhY2N1bXVsYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBhci5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzIHx8IF9pc0FycmF5TGlrZSh2YWx1ZSwgMSkgPyAoX2FjY3VtdWxhdG9yID0gYWNjdW11bGF0b3IpLnB1c2guYXBwbHkoX2FjY3VtdWxhdG9yLCB0b0FycmF5KHZhbHVlKSkgOiBhY2N1bXVsYXRvci5wdXNoKHZhbHVlKTtcbiAgfSkgfHwgYWNjdW11bGF0b3I7XG59LFxuICAgIC8vdGFrZXMgYW55IHZhbHVlIGFuZCByZXR1cm5zIGFuIGFycmF5LiBJZiBpdCdzIGEgc3RyaW5nIChhbmQgbGVhdmVTdHJpbmdzIGlzbid0IHRydWUpLCBpdCdsbCB1c2UgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpIGFuZCBjb252ZXJ0IHRoYXQgdG8gYW4gYXJyYXkuIEl0J2xsIGFsc28gYWNjZXB0IGl0ZXJhYmxlcyBsaWtlIGpRdWVyeSBvYmplY3RzLlxudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgcmV0dXJuIF9jb250ZXh0ICYmICFzY29wZSAmJiBfY29udGV4dC5zZWxlY3RvciA/IF9jb250ZXh0LnNlbGVjdG9yKHZhbHVlKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyAmJiAoX2NvcmVJbml0dGVkIHx8ICFfd2FrZSgpKSA/IF9zbGljZS5jYWxsKChzY29wZSB8fCBfZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSwgMCkgOiBfaXNBcnJheSh2YWx1ZSkgPyBfZmxhdHRlbih2YWx1ZSwgbGVhdmVTdHJpbmdzKSA6IF9pc0FycmF5TGlrZSh2YWx1ZSkgPyBfc2xpY2UuY2FsbCh2YWx1ZSwgMCkgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbn0sXG4gICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICB2YWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdIHx8IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgIHJldHVybiB0b0FycmF5KHYsIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlbCA6IGVsID09PSB2YWx1ZSA/IF93YXJuKFwiSW52YWxpZCBzY29wZVwiKSB8fCBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgOiB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGEpIHtcbiAgcmV0dXJuIGEuc29ydChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgfSk7XG59LFxuICAgIC8vIGFsdGVybmF0aXZlIHRoYXQncyBhIGJpdCBmYXN0ZXIgYW5kIG1vcmUgcmVsaWFibHkgZGl2ZXJzZSBidXQgYmlnZ2VyOiAgIGZvciAobGV0IGosIHYsIGkgPSBhLmxlbmd0aDsgaTsgaiA9IChNYXRoLnJhbmRvbSgpICogaSkgfCAwLCB2ID0gYVstLWldLCBhW2ldID0gYVtqXSwgYVtqXSA9IHYpOyByZXR1cm4gYTtcbi8vZm9yIGRpc3RyaWJ1dGluZyB2YWx1ZXMgYWNyb3NzIGFuIGFycmF5LiBDYW4gYWNjZXB0IGEgbnVtYmVyLCBhIGZ1bmN0aW9uIG9yIChtb3N0IGNvbW1vbmx5KSBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBjb250YWluIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoge2Jhc2UsIGFtb3VudCwgZnJvbSwgZWFzZSwgZ3JpZCwgYXhpcywgbGVuZ3RoLCBlYWNofS4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXhwZWN0cyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6IGluZGV4LCB0YXJnZXQsIGFycmF5LiBSZWNvZ25pemVzIHRoZSBmb2xsb3dpbmdcbmRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgaWYgKF9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgdmFycyA9IF9pc09iamVjdCh2KSA/IHYgOiB7XG4gICAgZWFjaDogdlxuICB9LFxuICAgICAgLy9uOjEgaXMganVzdCB0byBpbmRpY2F0ZSB2IHdhcyBhIG51bWJlcjsgd2UgbGV2ZXJhZ2UgdGhhdCBsYXRlciB0byBzZXQgdiBhY2NvcmRpbmcgdG8gdGhlIGxlbmd0aCB3ZSBnZXQuIElmIGEgbnVtYmVyIGlzIHBhc3NlZCBpbiwgd2UgdHJlYXQgaXQgbGlrZSB0aGUgb2xkIHN0YWdnZXIgdmFsdWUgd2hlcmUgMC4xLCBmb3IgZXhhbXBsZSwgd291bGQgbWVhbiB0aGF0IHRoaW5ncyB3b3VsZCBiZSBkaXN0cmlidXRlZCB3aXRoIDAuMSBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0b3RhbCBcImFtb3VudFwiIHRoYXQncyBjaHVua2VkIG91dCBhbW9uZyB0aGVtIGFsbC5cbiAgZWFzZSA9IF9wYXJzZUVhc2UodmFycy5lYXNlKSxcbiAgICAgIGZyb20gPSB2YXJzLmZyb20gfHwgMCxcbiAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgIGNhY2hlID0ge30sXG4gICAgICBpc0RlY2ltYWwgPSBmcm9tID4gMCAmJiBmcm9tIDwgMSxcbiAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgIGF4aXMgPSB2YXJzLmF4aXMsXG4gICAgICByYXRpb1ggPSBmcm9tLFxuICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICBpZiAoX2lzU3RyaW5nKGZyb20pKSB7XG4gICAgcmF0aW9YID0gcmF0aW9ZID0ge1xuICAgICAgY2VudGVyOiAuNSxcbiAgICAgIGVkZ2VzOiAuNSxcbiAgICAgIGVuZDogMVxuICAgIH1bZnJvbV0gfHwgMDtcbiAgfSBlbHNlIGlmICghaXNEZWNpbWFsICYmIHJhdGlvcykge1xuICAgIHJhdGlvWCA9IGZyb21bMF07XG4gICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaSwgdGFyZ2V0LCBhKSB7XG4gICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdLFxuICAgICAgICBvcmlnaW5YLFxuICAgICAgICBvcmlnaW5ZLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBkLFxuICAgICAgICBqLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgd3JhcEF0O1xuXG4gICAgaWYgKCFkaXN0YW5jZXMpIHtcbiAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICBpZiAoIXdyYXBBdCkge1xuICAgICAgICBtYXggPSAtX2JpZ051bTtcblxuICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgd3JhcEF0IDwgbCAmJiB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHdyYXBBdCA9PT0gX2JpZ051bSA/IDAgOiByYXRpb3MgPyBsICogcmF0aW9ZIC8gd3JhcEF0IC0gLjUgOiBmcm9tIC8gd3JhcEF0IHwgMDtcbiAgICAgIG1heCA9IDA7XG4gICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbDsgaisrKSB7XG4gICAgICAgIHggPSBqICUgd3JhcEF0IC0gb3JpZ2luWDtcbiAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICBkaXN0YW5jZXNbal0gPSBkID0gIWF4aXMgPyBfc3FydCh4ICogeCArIHkgKiB5KSA6IE1hdGguYWJzKGF4aXMgPT09IFwieVwiID8geSA6IHgpO1xuICAgICAgICBkID4gbWF4ICYmIChtYXggPSBkKTtcbiAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPT09IFwicmFuZG9tXCIgJiYgc2h1ZmZsZShkaXN0YW5jZXMpO1xuICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgIGRpc3RhbmNlcy5taW4gPSBtaW47XG4gICAgICBkaXN0YW5jZXMudiA9IGwgPSAocGFyc2VGbG9hdCh2YXJzLmFtb3VudCkgfHwgcGFyc2VGbG9hdCh2YXJzLmVhY2gpICogKHdyYXBBdCA+IGwgPyBsIC0gMSA6ICFheGlzID8gTWF0aC5tYXgod3JhcEF0LCBsIC8gd3JhcEF0KSA6IGF4aXMgPT09IFwieVwiID8gbCAvIHdyYXBBdCA6IHdyYXBBdCkgfHwgMCkgKiAoZnJvbSA9PT0gXCJlZGdlc1wiID8gLTEgOiAxKTtcbiAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICBkaXN0YW5jZXMudSA9IGdldFVuaXQodmFycy5hbW91bnQgfHwgdmFycy5lYWNoKSB8fCAwOyAvL3VuaXRcblxuICAgICAgZWFzZSA9IGVhc2UgJiYgbCA8IDAgPyBfaW52ZXJ0RWFzZShlYXNlKSA6IGVhc2U7XG4gICAgfVxuXG4gICAgbCA9IChkaXN0YW5jZXNbaV0gLSBkaXN0YW5jZXMubWluKSAvIGRpc3RhbmNlcy5tYXggfHwgMDtcbiAgICByZXR1cm4gX3JvdW5kUHJlY2lzZShkaXN0YW5jZXMuYiArIChlYXNlID8gZWFzZShsKSA6IGwpICogZGlzdGFuY2VzLnYpICsgZGlzdGFuY2VzLnU7IC8vcm91bmQgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gIH07XG59LFxuICAgIF9yb3VuZE1vZGlmaWVyID0gZnVuY3Rpb24gX3JvdW5kTW9kaWZpZXIodikge1xuICAvL3Bhc3MgaW4gMC4xIGdldCBhIGZ1bmN0aW9uIHRoYXQnbGwgcm91bmQgdG8gdGhlIG5lYXJlc3QgdGVudGgsIG9yIDUgdG8gcm91bmQgdG8gdGhlIGNsb3Nlc3QgNSwgb3IgMC4wMDEgdG8gdGhlIGNsb3Nlc3QgMTAwMHRoLCBldGMuXG4gIHZhciBwID0gTWF0aC5wb3coMTAsICgodiArIFwiXCIpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGgpOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKSlcblxuICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgIHZhciBuID0gX3JvdW5kUHJlY2lzZShNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHApO1xuXG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHByZXZDb250ZXh0ID0gX2NvbnRleHQsXG4gICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICBwYXJhbXMsXG4gICAgICBzY29wZSxcbiAgICAgIHJlc3VsdDtcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl07XG4gIHNjb3BlID0gdi5jYWxsYmFja1Njb3BlIHx8IGFuaW1hdGlvbjtcbiAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cbiAgY29udGV4dCAmJiAoX2NvbnRleHQgPSBjb250ZXh0KTtcbiAgcmVzdWx0ID0gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbiAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbCghIV9yZXZlcnRpbmcpO1xuICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3F1aWNrVHdlZW4sXG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUgPSBbXSxcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgaWYgKCFjb25maWcpIHJldHVybjtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvLyBVTUQgcGFja2FnaW5nIHdyYXBzIHRoaW5ncyBvZGRseSwgc28gZm9yIGV4YW1wbGUgTW90aW9uUGF0aEhlbHBlciBiZWNvbWVzIHtNb3Rpb25QYXRoSGVscGVyOk1vdGlvblBhdGhIZWxwZXIsIGRlZmF1bHQ6TW90aW9uUGF0aEhlbHBlcn0uXG5cbiAgaWYgKF93aW5kb3dFeGlzdHMoKSB8fCBjb25maWcuaGVhZGxlc3MpIHtcbiAgICAvLyBlZGdlIGNhc2U6IHNvbWUgYnVpbGQgdG9vbHMgbWF5IHBhc3MgaW4gYSBudWxsL3VuZGVmaW5lZCB2YWx1ZVxuICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICAgIGlzRnVuYyA9IF9pc0Z1bmN0aW9uKGNvbmZpZyksXG4gICAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Byb3BzID0gW107XG4gICAgfSA6IGNvbmZpZyxcbiAgICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgICByYXdWYXJzOiAwXG4gICAgfSxcbiAgICAgICAgc3RhdGljcyA9IHtcbiAgICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgICBnZXQ6IDAsXG4gICAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgICBhbGlhc2VzOiB7fSxcbiAgICAgIHJlZ2lzdGVyOiAwXG4gICAgfTtcblxuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgICAgX3BsdWdpbnNbUGx1Z2luLnByb3AgPSBuYW1lXSA9IFBsdWdpbjtcblxuICAgICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgICAgX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xuICAgICAgfVxuXG4gICAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gICAgfVxuXG4gICAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gICAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG4gIH0gZWxzZSB7XG4gICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUucHVzaChjb25maWcpO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICAoZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgfHwgZWxhcHNlZCA8IDApICYmIChfc3RhcnRUaW1lICs9IGVsYXBzZWQgLSBfYWRqdXN0ZWRMYWcpO1xuICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICBvdmVybGFwID0gdGltZSAtIF9uZXh0VGltZTtcblxuICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgIF9kZWx0YSA9IHRpbWUgLSBfc2VsZi50aW1lICogMTAwMDtcbiAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgZGlzcGF0Y2ggPSAxO1xuICAgIH1cblxuICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpOyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAvLyB1c2UgX2kgYW5kIGNoZWNrIF9saXN0ZW5lcnMubGVuZ3RoIGluc3RlYWQgb2YgYSB2YXJpYWJsZSBiZWNhdXNlIGEgbGlzdGVuZXIgY291bGQgZ2V0IHJlbW92ZWQgZHVyaW5nIHRoZSBsb29wLCBhbmQgaWYgdGhhdCBoYXBwZW5zIHRvIGFuIGVsZW1lbnQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IGluZGV4LCBpdCdkIHRocm93IHRoaW5ncyBvZmYgaW4gdGhlIGxvb3AuXG4gICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZiA9IHtcbiAgICB0aW1lOiAwLFxuICAgIGZyYW1lOiAwLFxuICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBfdGljayh0cnVlKTtcbiAgICB9LFxuICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICByZXR1cm4gX2RlbHRhIC8gKDEwMDAgLyAoZnBzIHx8IDYwKSk7XG4gICAgfSxcbiAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgaWYgKF9jb3JlUmVhZHkpIHtcbiAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICBfZG9jID0gX3dpbi5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICBfaW5zdGFsbChfaW5zdGFsbFNjb3BlIHx8IF93aW4uR3JlZW5Tb2NrR2xvYmFscyB8fCAhX3dpbi5nc2FwICYmIF93aW4gfHwge30pO1xuXG4gICAgICAgICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUuZm9yRWFjaChfY3JlYXRlUGx1Z2luKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yYWYgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCBJbmZpbml0eTsgLy8gemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZyB8fCAzMywgX2xhZ1RocmVzaG9sZCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgKiBwICsgcCAqIHAgKiBwICogcCAqIHAgKiBwICogKDEgLSBwKTtcbn0pOyAvLyBwcmV2aW91c2x5IDIgKiogKDEwICogKHAgLSAxKSkgYnV0IHRoYXQgZG9lc24ndCBlbmQgdXAgd2l0aCB0aGUgdmFsdWUgcXVpdGUgYXQgdGhlIHJpZ2h0IHNwb3Qgc28gd2UgZG8gYSBibGVuZGVkIGVhc2UgdG8gZW5zdXJlIGl0IGxhbmRzIHdoZXJlIGl0IHNob3VsZCBwZXJmZWN0bHkuXG5cblxuX2luc2VydEVhc2UoXCJDaXJjXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIlNpbmVcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG59KTtcblxuX2luc2VydEVhc2UoXCJCYWNrXCIsIF9jb25maWdCYWNrKFwiaW5cIiksIF9jb25maWdCYWNrKFwib3V0XCIpLCBfY29uZmlnQmFjaygpKTtcblxuX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyhzdGVwcywgaW1tZWRpYXRlU3RhcnQpIHtcbiAgICBpZiAoc3RlcHMgPT09IHZvaWQgMCkge1xuICAgICAgc3RlcHMgPSAxO1xuICAgIH1cblxuICAgIHZhciBwMSA9IDEgLyBzdGVwcyxcbiAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgcDMgPSBpbW1lZGlhdGVTdGFydCA/IDEgOiAwLFxuICAgICAgICBtYXggPSAxIC0gX3RpbnlOdW07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gKChwMiAqIF9jbGFtcCgwLCBtYXgsIHApIHwgMCkgKyBwMykgKiBwMTtcbiAgICB9O1xuICB9XG59O1xuX2RlZmF1bHRzLmVhc2UgPSBfZWFzZU1hcFtcInF1YWQub3V0XCJdO1xuXG5fZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9jYWxsYmFja05hbWVzICs9IG5hbWUgKyBcIixcIiArIG5hbWUgKyBcIlBhcmFtcyxcIjtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDQUNIRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gIHRoaXMuaWQgPSBfZ3NJRCsrO1xuICB0YXJnZXQuX2dzYXAgPSB0aGlzO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5oYXJuZXNzID0gaGFybmVzcztcbiAgdGhpcy5nZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXQgOiBfZ2V0UHJvcGVydHk7XG4gIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbn07XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFOSU1BVElPTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5leHBvcnQgdmFyIEFuaW1hdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFuaW1hdGlvbih2YXJzKSB7XG4gICAgdGhpcy52YXJzID0gdmFycztcbiAgICB0aGlzLl9kZWxheSA9ICt2YXJzLmRlbGF5IHx8IDA7XG5cbiAgICBpZiAodGhpcy5fcmVwZWF0ID0gdmFycy5yZXBlYXQgPT09IEluZmluaXR5ID8gLTIgOiB2YXJzLnJlcGVhdCB8fCAwKSB7XG4gICAgICAvLyBUT0RPOiByZXBlYXQ6IEluZmluaXR5IG9uIGEgdGltZWxpbmUncyBjaGlsZHJlbiBtdXN0IGZsYWcgdGhhdCB0aW1lbGluZSBpbnRlcm5hbGx5IGFuZCBhZmZlY3QgaXRzIHRvdGFsRHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBzdG9wIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gd2hlbiByZWFjaGluZyB0aGUgc3RhcnQuXG4gICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICB0aGlzLl95b3lvID0gISF2YXJzLnlveW8gfHwgISF2YXJzLnlveW9FYXNlO1xuICAgIH1cblxuICAgIHRoaXMuX3RzID0gMTtcblxuICAgIF9zZXREdXJhdGlvbih0aGlzLCArdmFycy5kdXJhdGlvbiwgMSwgMSk7XG5cbiAgICB0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cbiAgICBpZiAoX2NvbnRleHQpIHtcbiAgICAgIHRoaXMuX2N0eCA9IF9jb250ZXh0O1xuXG4gICAgICBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gICAgfVxuXG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZWxheSA9IGZ1bmN0aW9uIGRlbGF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgdGhpcy5fZGVsYXkgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbiAgfTtcblxuICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbER1cmF0aW9uKHRoaXMuX3JlcGVhdCA+IDAgPyB2YWx1ZSArICh2YWx1ZSArIHRoaXMuX3JEZWxheSkgKiB0aGlzLl9yZXBlYXQgOiB2YWx1ZSkgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSAmJiB0aGlzLl9kdXI7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdER1cjtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eSA9IDA7XG4gICAgcmV0dXJuIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9yZXBlYXQgPCAwID8gdmFsdWUgOiAodmFsdWUgLSB0aGlzLl9yZXBlYXQgKiB0aGlzLl9yRGVsYXkpIC8gKHRoaXMuX3JlcGVhdCArIDEpKTtcbiAgfTtcblxuICBfcHJvdG8udG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgX3dha2UoKTtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuX3RzKSB7XG4gICAgICBfYWxpZ25QbGF5aGVhZCh0aGlzLCBfdG90YWxUaW1lKTtcblxuICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpOyAvLyBlZGdlIGNhc2U6IGlmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIHRpbWVsaW5lIHRoYXQgYWxyZWFkeSBjb21wbGV0ZWQsIGZvciBleGFtcGxlLCB3ZSBtdXN0IHJlLWFjdGl2YXRlIHRoZSBwYXJlbnQuXG4gICAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvciB0aW1lbGluZXMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLCB3ZSBzaG91bGQgcmVzZXQgdGhlaXIgdG90YWxUaW1lKCkgd2hpY2ggd2lsbCBhbHNvIGVuc3VyZSB0aGF0IHRoZXkncmUgbGluZWQgdXAgcHJvcGVybHkgYW5kIGVuYWJsZWQuIFNraXAgZm9yIGFuaW1hdGlvbnMgdGhhdCBhcmUgb24gdGhlIHJvb3QgKHdhc3RlZnVsKS4gRXhhbXBsZTogYSBUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCgpIGlzIHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3MgYSBwYXVzZWQgdHdlZW4gb24gdGhlIHJvb3QsIHRoZSBleHBvcnQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdGhhdCB0d2VlbiBpcyB1bnBhdXNlZCwgYnV0IGltYWdpbmUgYSBjaGlsZCBnZXRzIHJlc3RhcnRlZCBsYXRlciwgYWZ0ZXIgYWxsIFt1bnBhdXNlZF0gdHdlZW5zIGhhdmUgY29tcGxldGVkLiBUaGUgc3RhcnQgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblxuICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQucGFyZW50Ll90aW1lICE9PSBwYXJlbnQuX3N0YXJ0ICsgKHBhcmVudC5fdHMgPj0gMCA/IHBhcmVudC5fdFRpbWUgLyBwYXJlbnQuX3RzIDogKHBhcmVudC50b3RhbER1cmF0aW9uKCkgLSBwYXJlbnQuX3RUaW1lKSAvIC1wYXJlbnQuX3RzKSkge1xuICAgICAgICAgIHBhcmVudC50b3RhbFRpbWUocGFyZW50Ll90VGltZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucGFyZW50ICYmIHRoaXMuX2RwLmF1dG9SZW1vdmVDaGlsZHJlbiAmJiAodGhpcy5fdHMgPiAwICYmIF90b3RhbFRpbWUgPCB0aGlzLl90RHVyIHx8IHRoaXMuX3RzIDwgMCAmJiBfdG90YWxUaW1lID4gMCB8fCAhdGhpcy5fdER1ciAmJiAhX3RvdGFsVGltZSkpIHtcbiAgICAgICAgLy9pZiB0aGUgYW5pbWF0aW9uIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCwgcHV0IGl0IGJhY2sgaW50byBpdHMgbGFzdCBwYXJlbnQgKHJlY29yZGVkIGFzIF9kcCBmb3IgZXhhY3RseSBjYXNlcyBsaWtlIHRoaXMpLiBMaW1pdCB0byBwYXJlbnRzIHdpdGggYXV0b1JlbW92ZUNoaWxkcmVuIChsaWtlIGdsb2JhbFRpbWVsaW5lKSBzbyB0aGF0IGlmIHRoZSB1c2VyIG1hbnVhbGx5IHJlbW92ZXMgYW4gYW5pbWF0aW9uIGZyb20gYSB0aW1lbGluZSBhbmQgdGhlbiBhbHRlcnMgaXRzIHBsYXloZWFkLCBpdCBkb2Vzbid0IGdldCBhZGRlZCBiYWNrIGluLlxuICAgICAgICBfYWRkVG9UaW1lbGluZSh0aGlzLl9kcCwgdGhpcywgdGhpcy5fc3RhcnQgLSB0aGlzLl9kZWxheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RUaW1lICE9PSBfdG90YWxUaW1lIHx8ICF0aGlzLl9kdXIgJiYgIXN1cHByZXNzRXZlbnRzIHx8IHRoaXMuX2luaXR0ZWQgJiYgTWF0aC5hYnModGhpcy5felRpbWUpID09PSBfdGlueU51bSB8fCAhX3RvdGFsVGltZSAmJiAhdGhpcy5faW5pdHRlZCAmJiAodGhpcy5hZGQgfHwgdGhpcy5fcHRMb29rdXApKSB7XG4gICAgICAvLyBjaGVjayBmb3IgX3B0TG9va3VwIG9uIGEgVHdlZW4gaW5zdGFuY2UgdG8gZW5zdXJlIGl0IGhhcyBhY3R1YWxseSBmaW5pc2hlZCBiZWluZyBpbnN0YW50aWF0ZWQsIG90aGVyd2lzZSBpZiB0aGlzLnJldmVyc2UoKSBnZXRzIGNhbGxlZCBpbiB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBpdCBjb3VsZCB0cmlnZ2VyIGEgcmVuZGVyKCkgaGVyZSBldmVuIHRob3VnaCB0aGUgX3RhcmdldHMgd2VyZW4ndCBwb3B1bGF0ZWQsIHRodXMgd2hlbiBfaW5pdCgpIGlzIGNhbGxlZCB0aGVyZSB3b24ndCBiZSBhbnkgUHJvcFR3ZWVucyAoaXQnbGwgYWN0IGxpa2UgdGhlIHR3ZWVuIGlzIG5vbi1mdW5jdGlvbmFsKVxuICAgICAgdGhpcy5fdHMgfHwgKHRoaXMuX3BUaW1lID0gX3RvdGFsVGltZSk7IC8vIG90aGVyd2lzZSwgaWYgYW4gYW5pbWF0aW9uIGlzIHBhdXNlZCwgdGhlbiB0aGUgcGxheWhlYWQgaXMgbW92ZWQgYmFjayB0byB6ZXJvLCB0aGVuIHJlc3VtZWQsIGl0J2QgcmV2ZXJ0IGJhY2sgdG8gdGhlIG9yaWdpbmFsIHRpbWUgYXQgdGhlIHBhdXNlXG4gICAgICAvL2lmICghdGhpcy5fbG9jaykgeyAvLyBhdm9pZCBlbmRsZXNzIHJlY3Vyc2lvbiAobm90IHN1cmUgd2UgbmVlZCB0aGlzIHlldCBvciBpZiBpdCdzIHdvcnRoIHRoZSBwZXJmb3JtYW5jZSBoaXQpXG4gICAgICAvLyAgIHRoaXMuX2xvY2sgPSAxO1xuXG4gICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpOyAvLyAgIHRoaXMuX2xvY2sgPSAwO1xuICAgICAgLy99XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8udGltZSA9IGZ1bmN0aW9uIHRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZShNYXRoLm1pbih0aGlzLnRvdGFsRHVyYXRpb24oKSwgdmFsdWUgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcykpICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7IC8vIG5vdGU6IGlmIHRoZSBtb2R1bHVzIHJlc3VsdHMgaW4gMCwgdGhlIHBsYXloZWFkIGNvdWxkIGJlIGV4YWN0bHkgYXQgdGhlIGVuZCBvciB0aGUgYmVnaW5uaW5nLCBhbmQgd2UgYWx3YXlzIGRlZmVyIHRvIHRoZSBFTkQgd2l0aCBhIG5vbi16ZXJvIHZhbHVlLCBvdGhlcndpc2UgaWYgeW91IHNldCB0aGUgdGltZSgpIHRvIHRoZSB2ZXJ5IGVuZCAoZHVyYXRpb24oKSksIGl0IHdvdWxkIHJlbmRlciBhdCB0aGUgU1RBUlQhXG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB0b3RhbFByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXdUaW1lKCkgPj0gMCAmJiB0aGlzLl9pbml0dGVkID8gMSA6IDA7XG4gIH07XG5cbiAgX3Byb3RvLnByb2dyZXNzID0gZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLmR1cmF0aW9uKCkgKiAodGhpcy5feW95byAmJiAhKHRoaXMuaXRlcmF0aW9uKCkgJiAxKSA/IDEgLSB2YWx1ZSA6IHZhbHVlKSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5kdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdGltZSAvIHRoaXMuX2R1cikgOiB0aGlzLnJhd1RpbWUoKSA+IDAgPyAxIDogMDtcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3J0cyA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gcmVjb3JkZWQgdGltZVNjYWxlLiBTcGVjaWFsIGNhc2U6IGlmIHNvbWVvbmUgY2FsbHMgcmV2ZXJzZSgpIG9uIGFuIGFuaW1hdGlvbiB3aXRoIHRpbWVTY2FsZSBvZiAwLCB3ZSBhc3NpZ24gaXQgLV90aW55TnVtIHRvIHJlbWVtYmVyIGl0J3MgcmV2ZXJzZWQuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3J0cyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciB0VGltZSA9IHRoaXMucGFyZW50ICYmIHRoaXMuX3RzID8gX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGhpcy5wYXJlbnQuX3RpbWUsIHRoaXMpIDogdGhpcy5fdFRpbWU7IC8vIG1ha2Ugc3VyZSB0byBkbyB0aGUgcGFyZW50VG9DaGlsZFRvdGFsVGltZSgpIEJFRk9SRSBzZXR0aW5nIHRoZSBuZXcgX3RzIGJlY2F1c2UgdGhlIG9sZCBvbmUgbXVzdCBiZSB1c2VkIGluIHRoYXQgY2FsY3VsYXRpb24uXG4gICAgLy8gZnV0dXJlIGFkZGl0aW9uPyBVcCBzaWRlOiBmYXN0IGFuZCBtaW5pbWFsIGZpbGUgc2l6ZS4gRG93biBzaWRlOiBvbmx5IHdvcmtzIG9uIHRoaXMgYW5pbWF0aW9uOyBpZiBhIHRpbWVsaW5lIGlzIHJldmVyc2VkLCBmb3IgZXhhbXBsZSwgaXRzIGNoaWxkcmVucycgb25SZXZlcnNlIHdvdWxkbid0IGdldCBjYWxsZWQuXG4gICAgLy8oK3ZhbHVlIDwgMCAmJiB0aGlzLl9ydHMgPj0gMCkgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXZlcnNlXCIsIHRydWUpO1xuICAgIC8vIHByaW9yaXRpemUgcmVuZGVyaW5nIHdoZXJlIHRoZSBwYXJlbnQncyBwbGF5aGVhZCBsaW5lcyB1cCBpbnN0ZWFkIG9mIHRoaXMuX3RUaW1lIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgYSB0d2VlbiB0aGF0J3MgYW5pbWF0aW5nIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgaW4gdGhlIHNhbWUgcmVuZGVyaW5nIGxvb3AgKHNhbWUgcGFyZW50KSwgdGh1cyBpZiB0aGUgdGltZVNjYWxlIHR3ZWVuIHJlbmRlcnMgZmlyc3QsIGl0IHdvdWxkIGFsdGVyIF9zdGFydCBCRUZPUkUgX3RUaW1lIHdhcyBzZXQgb24gdGhhdCB0aWNrIChpbiB0aGUgcmVuZGVyaW5nIGxvb3ApLCBlZmZlY3RpdmVseSBmcmVlemluZyBpdCB1bnRpbCB0aGUgdGltZVNjYWxlIHR3ZWVuIGZpbmlzaGVzLlxuXG4gICAgdGhpcy5fcnRzID0gK3ZhbHVlIHx8IDA7XG4gICAgdGhpcy5fdHMgPSB0aGlzLl9wcyB8fCB2YWx1ZSA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0czsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSB3aGljaCB3b3VsZCBiZSAwIGlmIHRoZSBhbmltYXRpb24gaXMgcGF1c2VkLlxuXG4gICAgdGhpcy50b3RhbFRpbWUoX2NsYW1wKC1NYXRoLmFicyh0aGlzLl9kZWxheSksIHRoaXMuX3REdXIsIHRUaW1lKSwgc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnBhdXNlZCA9IGZ1bmN0aW9uIHBhdXNlZCh2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BzO1xuICAgIH0gLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIC0gaWYgYW4gYW5pbWF0aW9uIGlzIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IGFuZCB0aGVuIC5yZXN0YXJ0KCkgb3IgLnBsYXkoKSBvciAucmVzdW1lKCkgaXMgY2FsbGVkLCBwZXJoYXBzIHdlIHNob3VsZCBmb3JjZSBpdCBiYWNrIGludG8gdGhlIGdsb2JhbFRpbWVsaW5lIGJ1dCBiZSBjYXJlZnVsIGJlY2F1c2Ugd2hhdCBpZiBpdCdzIGFscmVhZHkgYXQgaXRzIGVuZD8gV2UgZG9uJ3Qgd2FudCBpdCB0byBqdXN0IHBlcnNpc3QgZm9yZXZlciBhbmQgbm90IGdldCByZWxlYXNlZCBmb3IgR0MuXG4gICAgLy8gIXRoaXMucGFyZW50ICYmICF2YWx1ZSAmJiB0aGlzLl90VGltZSA8IHRoaXMuX3REdXIgJiYgdGhpcyAhPT0gX2dsb2JhbFRpbWVsaW5lICYmIF9nbG9iYWxUaW1lbGluZS5hZGQodGhpcyk7XG5cblxuICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3BzID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpOyAvLyBpZiB0aGUgcGF1c2Ugb2NjdXJzIGR1cmluZyB0aGUgZGVsYXkgcGhhc2UsIG1ha2Ugc3VyZSB0aGF0J3MgZmFjdG9yZWQgaW4gd2hlbiByZXN1bWluZy5cblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX2FjdCA9IDA7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUsIHNvIGEgcGF1c2VkIHR3ZWVuIHdvdWxkIGVmZmVjdGl2ZWx5IGhhdmUgYSB0aW1lU2NhbGUgb2YgMC4gV2UgcmVjb3JkIHRoZSBcInJlYWxcIiB0aW1lU2NhbGUgYXMgX3J0cyAocmVjb3JkZWQgdGltZSBzY2FsZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF93YWtlKCk7XG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7IC8vb25seSBkZWZlciB0byBfcFRpbWUgKHBhdXNlVGltZSkgaWYgdFRpbWUgaXMgemVyby4gUmVtZW1iZXIsIHNvbWVvbmUgY291bGQgcGF1c2UoKSBhbiBhbmltYXRpb24sIHRoZW4gc2NydWIgdGhlIHBsYXloZWFkIGFuZCByZXN1bWUoKS4gSWYgdGhlIHBhcmVudCBkb2Vzbid0IGhhdmUgc21vb3RoQ2hpbGRUaW1pbmcsIHdlIHJlbmRlciBhdCB0aGUgcmF3VGltZSgpIGJlY2F1c2UgdGhlIHN0YXJ0VGltZSB3b24ndCBnZXQgdXBkYXRlZC5cblxuICAgICAgICB0aGlzLnRvdGFsVGltZSh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLnJhd1RpbWUoKSA6IHRoaXMuX3RUaW1lIHx8IHRoaXMuX3BUaW1lLCB0aGlzLnByb2dyZXNzKCkgPT09IDEgJiYgTWF0aC5hYnModGhpcy5felRpbWUpICE9PSBfdGlueU51bSAmJiAodGhpcy5fdFRpbWUgLT0gX3RpbnlOdW0pKTsgLy8gZWRnZSBjYXNlOiBhbmltYXRpb24ucHJvZ3Jlc3MoMSkucGF1c2UoKS5wbGF5KCkgd291bGRuJ3QgcmVuZGVyIGFnYWluIGJlY2F1c2UgdGhlIHBsYXloZWFkIGlzIGFscmVhZHkgYXQgdGhlIGVuZCwgYnV0IHRoZSBjYWxsIHRvIHRvdGFsVGltZSgpIGJlbG93IHdpbGwgYWRkIGl0IGJhY2sgdG8gaXRzIHBhcmVudC4uLmFuZCBub3QgcmVtb3ZlIGl0IGFnYWluIChzaW5jZSByZW1vdmluZyBvbmx5IGhhcHBlbnMgdXBvbiByZW5kZXJpbmcgYXQgYSBuZXcgdGltZSkuIE9mZnNldHRpbmcgdGhlIF90VGltZSBzbGlnaHRseSBpcyBkb25lIHNpbXBseSB0byBjYXVzZSB0aGUgZmluYWwgcmVuZGVyIGluIHRvdGFsVGltZSgpIHRoYXQnbGwgcG9wIGl0IG9mZiBpdHMgdGltZWxpbmUgKGlmIGF1dG9SZW1vdmVDaGlsZHJlbiBpcyB0cnVlLCBvZiBjb3Vyc2UpLiBDaGVjayB0byBtYWtlIHN1cmUgX3pUaW1lIGlzbid0IC1fdGlueU51bSB0byBhdm9pZCBhbiBlZGdlIGNhc2Ugd2hlcmUgdGhlIHBsYXloZWFkIGlzIHB1c2hlZCB0byB0aGUgZW5kIGJ1dCBJTlNJREUgYSB0d2Vlbi9jYWxsYmFjaywgdGhlIHRpbWVsaW5lIGl0c2VsZiBpcyBwYXVzZWQgdGh1cyBoYWx0aW5nIHJlbmRlcmluZyBhbmQgbGVhdmluZyBhIGZldyB1bnJlbmRlcmVkLiBXaGVuIHJlc3VtaW5nLCBpdCB3b3VsZG4ndCByZW5kZXIgdGhvc2Ugb3RoZXJ3aXNlLlxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgIHBhcmVudCAmJiAocGFyZW50Ll9zb3J0IHx8ICF0aGlzLnBhcmVudCkgJiYgX2FkZFRvVGltZWxpbmUocGFyZW50LCB0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnQgKyAoX2lzTm90RmFsc2UoaW5jbHVkZVJlcGVhdHMpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gTWF0aC5hYnModGhpcy5fdHMgfHwgMSk7XG4gIH07XG5cbiAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwOyAvLyBfZHAgPSBkZXRhY2hlZCBwYXJlbnRcblxuICAgIHJldHVybiAhcGFyZW50ID8gdGhpcy5fdFRpbWUgOiB3cmFwUmVwZWF0cyAmJiAoIXRoaXMuX3RzIHx8IHRoaXMuX3JlcGVhdCAmJiB0aGlzLl90aW1lICYmIHRoaXMudG90YWxQcm9ncmVzcygpIDwgMSkgPyB0aGlzLl90VGltZSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIDogIXRoaXMuX3RzID8gdGhpcy5fdFRpbWUgOiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnQucmF3VGltZSh3cmFwUmVwZWF0cyksIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNSZXZlcnRpbmcgPSBfcmV2ZXJ0aW5nO1xuICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG5cbiAgICBpZiAodGhpcy5faW5pdHRlZCB8fCB0aGlzLl9zdGFydEF0KSB7XG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgICB0aGlzLnRvdGFsVGltZSgtMC4wMSwgY29uZmlnLnN1cHByZXNzRXZlbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgIT09IFwibmVzdGVkXCIgJiYgY29uZmlnLmtpbGwgIT09IGZhbHNlICYmIHRoaXMua2lsbCgpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChNYXRoLmFicyhhbmltYXRpb24uX3RzKSB8fCAxKTtcbiAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5fZHA7XG4gICAgfVxuXG4gICAgcmV0dXJuICF0aGlzLnBhcmVudCAmJiB0aGlzLl9zYXQgPyB0aGlzLl9zYXQuZ2xvYmFsVGltZShyYXdUaW1lKSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIGNvbnRleHQucmV2ZXJ0KCkpLiBcIl9zYXRcIiBzdGFuZHMgZm9yIF9zdGFydEF0VHdlZW4sIHJlZmVycmluZyB0byB0aGUgcGFyZW50IHR3ZWVuIHRoYXQgY3JlYXRlZCB0aGUgX3N0YXJ0QXQuIFdlIG11c3QgZGlzY2VybiBpZiB0aGF0IHR3ZWVuIGhhZCBpbW1lZGlhdGVSZW5kZXIgc28gdGhhdCB3ZSBjYW4ga25vdyB3aGV0aGVyIG9yIG5vdCB0byBwcmlvcml0aXplIGl0IGluIHJldmVydCgpLlxuICB9O1xuXG4gIF9wcm90by5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVwZWF0ID0gdmFsdWUgPT09IEluZmluaXR5ID8gLTIgOiB2YWx1ZTtcbiAgICAgIHJldHVybiBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZXBlYXQgPT09IC0yID8gSW5maW5pdHkgOiB0aGlzLl9yZXBlYXQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24gcmVwZWF0RGVsYXkodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgdGhpcy5fckRlbGF5ID0gdmFsdWU7XG5cbiAgICAgIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24odGhpcyk7XG5cbiAgICAgIHJldHVybiB0aW1lID8gdGhpcy50aW1lKHRpbWUpIDogdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fckRlbGF5O1xuICB9O1xuXG4gIF9wcm90by55b3lvID0gZnVuY3Rpb24geW95byh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl95b3lvID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5feW95bztcbiAgfTtcblxuICBfcHJvdG8uc2VlayA9IGZ1bmN0aW9uIHNlZWsocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSwgX2lzTm90RmFsc2Uoc3VwcHJlc3NFdmVudHMpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdGFydCA9IGZ1bmN0aW9uIHJlc3RhcnQoaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHRoaXMucGxheSgpLnRvdGFsVGltZShpbmNsdWRlRGVsYXkgPyAtdGhpcy5fZGVsYXkgOiAwLCBfaXNOb3RGYWxzZShzdXBwcmVzc0V2ZW50cykpO1xuICAgIHRoaXMuX2R1ciB8fCAodGhpcy5felRpbWUgPSAtX3RpbnlOdW0pOyAvLyBlbnN1cmVzIG9uQ29tcGxldGUgZmlyZXMgb24gYSB6ZXJvLWR1cmF0aW9uIGFuaW1hdGlvbiB0aGF0IGdldHMgcmVzdGFydGVkLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2SXRlcmF0aW9uID0gX3JvdW5kUHJlY2lzZSh0VGltZSAvIGN5Y2xlRHVyYXRpb24pOyAvLyBmdWxsIGRlY2ltYWwgdmVyc2lvbiBvZiBpdGVyYXRpb25zLCBub3QgdGhlIHByZXZpb3VzIGl0ZXJhdGlvbiAod2UncmUgcmV1c2luZyBwcmV2SXRlcmF0aW9uIHZhcmlhYmxlIGZvciBlZmZpY2llbmN5KVxuXG4gICAgICAgICAgaXRlcmF0aW9uID0gfn5wcmV2SXRlcmF0aW9uO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuICAgICAgICAhcHJldlRpbWUgJiYgdGhpcy5fdFRpbWUgJiYgcHJldkl0ZXJhdGlvbiAhPT0gaXRlcmF0aW9uICYmIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCAmJiAocHJldkl0ZXJhdGlvbiA9IGl0ZXJhdGlvbik7IC8vIGVkZ2UgY2FzZSAtIGlmIHNvbWVvbmUgZG9lcyBhZGRQYXVzZSgpIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvZiBhIHJlcGVhdGluZyB0aW1lbGluZSwgdGhhdCBwYXVzZSBpcyB0ZWNobmljYWxseSBhdCB0aGUgc2FtZSBzcG90IGFzIHRoZSBlbmQgd2hpY2ggY2F1c2VzIHRoaXMuX3RpbWUgdG8gZ2V0IHNldCB0byAwIHdoZW4gdGhlIHRvdGFsVGltZSB3b3VsZCBub3JtYWxseSBwbGFjZSB0aGUgcGxheWhlYWQgYXQgdGhlIGVuZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1IGFsc28sIHRoaXMuX3RUaW1lIC0gcHJldkl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24gLSB0aGlzLl9kdXIgPD0gMCBqdXN0IGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgd2Fzbid0IHByZXZpb3VzbHkgaW4gdGhlIFwicmVwZWF0RGVsYXlcIiBwb3J0aW9uXG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiB0VGltZSAlIGR1ciA/IGR1ciA6IHRUaW1lOyAvLyBpZiB0aGUgcGxheWhlYWQgaXMgbGFuZGluZyBleGFjdGx5IGF0IHRoZSBlbmQgb2YgYW4gaXRlcmF0aW9uLCB1c2UgdGhhdCB0b3RhbFRpbWUgcmF0aGVyIHRoYW4gb25seSB0aGUgZHVyYXRpb24sIG90aGVyd2lzZSBpdCdsbCBza2lwIHRoZSAybmQgcmVuZGVyIHNpbmNlIGl0J3MgZWZmZWN0aXZlbHkgYXQgdGhlIHNhbWUgdGltZS5cblxuICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lIHx8IChpc1lveW8gPyAwIDogX3JvdW5kUHJlY2lzZShpdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uKSksIHN1cHByZXNzRXZlbnRzLCAhZHVyKS5fbG9jayA9IDA7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTsgLy8gaWYgYSB1c2VyIGdldHMgdGhlIGl0ZXJhdGlvbigpIGluc2lkZSB0aGUgb25SZXBlYXQsIGZvciBleGFtcGxlLCBpdCBzaG91bGQgYmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAodGhpcy5pbnZhbGlkYXRlKCkuX2xvY2sgPSAxKTtcblxuICAgICAgICAgIGlmIChwcmV2VGltZSAmJiBwcmV2VGltZSAhPT0gdGhpcy5fdGltZSB8fCBwcmV2UGF1c2VkICE9PSAhdGhpcy5fdHMgfHwgdGhpcy52YXJzLm9uUmVwZWF0ICYmICF0aGlzLnBhcmVudCAmJiAhdGhpcy5fYWN0KSB7XG4gICAgICAgICAgICAvLyBpZiBwcmV2VGltZSBpcyAwIGFuZCB3ZSByZW5kZXIgYXQgdGhlIHZlcnkgZW5kLCBfdGltZSB3aWxsIGJlIHRoZSBlbmQsIHRodXMgd29uJ3QgbWF0Y2guIFNvIGluIHRoaXMgZWRnZSBjYXNlLCBwcmV2VGltZSB3b24ndCBtYXRjaCBfdGltZSBidXQgdGhhdCdzIG9rYXkuIElmIGl0IGdldHMga2lsbGVkIGluIHRoZSBvblJlcGVhdCwgZWplY3QgYXMgd2VsbC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGR1ciA9IHRoaXMuX2R1cjsgLy8gaW4gY2FzZSB0aGUgZHVyYXRpb24gY2hhbmdlZCBpbiB0aGUgb25SZXBlYXRcblxuICAgICAgICAgIHREdXIgPSB0aGlzLl90RHVyO1xuXG4gICAgICAgICAgaWYgKGRvZXNXcmFwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gZHVyIDogLTAuMDAwMTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IC8vaW4gb3JkZXIgZm9yIHlveW9FYXNlIHRvIHdvcmsgcHJvcGVybHkgd2hlbiB0aGVyZSdzIGEgc3RhZ2dlciwgd2UgbXVzdCBzd2FwIG91dCB0aGUgZWFzZSBpbiBlYWNoIHN1Yi10d2Vlbi5cblxuXG4gICAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKHRoaXMsIGlzWW95byk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nICYmIHRoaXMuX2xvY2sgPCAyKSB7XG4gICAgICAgIHBhdXNlVHdlZW4gPSBfZmluZE5leHRQYXVzZVR3ZWVuKHRoaXMsIF9yb3VuZFByZWNpc2UocHJldlRpbWUpLCBfcm91bmRQcmVjaXNlKHRpbWUpKTtcblxuICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgIHRUaW1lIC09IHRpbWUgLSAodGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICB0aGlzLl9pbml0dGVkID0gMTtcbiAgICAgICAgdGhpcy5felRpbWUgPSB0b3RhbFRpbWU7XG4gICAgICAgIHByZXZUaW1lID0gMDsgLy8gdXBvbiBpbml0LCB0aGUgcGxheWhlYWQgc2hvdWxkIGFsd2F5cyBnbyBmb3J3YXJkOyBzb21lb25lIGNvdWxkIGludmFsaWRhdGUoKSBhIGNvbXBsZXRlZCB0aW1lbGluZSBhbmQgdGhlbiBpZiB0aGV5IHJlc3RhcnQoKSwgdGhhdCB3b3VsZCBtYWtlIGNoaWxkIHR3ZWVucyByZW5kZXIgaW4gcmV2ZXJzZSBvcmRlciB3aGljaCBjb3VsZCBsb2NrIGluIHRoZSB3cm9uZyBzdGFydGluZyB2YWx1ZXMgaWYgdGhleSBidWlsZCBvbiBlYWNoIG90aGVyLCBsaWtlIHRsLnRvKG9iaiwge3g6IDEwMH0pLnRvKG9iaiwge3g6IDB9KS5cbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2VGltZSAmJiB0aW1lICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXRlcmF0aW9uKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9sYXN0O1xuICAgICAgICB2YXIgYWRqdXN0ZWRUaW1lID0gdG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6IHRpbWU7IC8vd2hlbiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0IG9mIHRoaXMgdGltZWxpbmUsIHdlIG11c3QgcGFzcyB0aGF0IGluZm9ybWF0aW9uIGRvd24gdG8gdGhlIGNoaWxkIGFuaW1hdGlvbnMgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBrbm93IHdoZXRoZXIgdG8gcmVuZGVyIHRoZWlyIHN0YXJ0aW5nIG9yIGVuZGluZyB2YWx1ZXMuXG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgbmV4dCA9IGNoaWxkLl9wcmV2O1xuXG4gICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IGFkanVzdGVkVGltZSA8PSBjaGlsZC5fZW5kKSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXJlbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgLy8gYW4gZXh0cmVtZSBlZGdlIGNhc2UgLSB0aGUgY2hpbGQncyByZW5kZXIgY291bGQgZG8gc29tZXRoaW5nIGxpa2Uga2lsbCgpIHRoZSBcIm5leHRcIiBvbmUgaW4gdGhlIGxpbmtlZCBsaXN0LCBvciByZXBhcmVudCBpdC4gSW4gdGhhdCBjYXNlIHdlIG11c3QgcmUtaW5pdGlhdGUgdGhlIHdob2xlIHJlbmRlciB0byBiZSBzYWZlLlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/IChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArIChhZGp1c3RlZFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyAmJiAoY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0QXQpKTsgLy8gaWYgcmV2ZXJ0aW5nLCB3ZSBzaG91bGQgYWx3YXlzIGZvcmNlIHJlbmRlcnMgb2YgaW5pdHRlZCB0d2VlbnMgKGJ1dCByZW1lbWJlciB0aGF0IC5mcm9tVG8oKSBvciAuZnJvbSgpIG1heSBoYXZlIGEgX3N0YXJ0QXQgYnV0IG5vdCBfaW5pdHRlZCB5ZXQpLiBJZiwgZm9yIGV4YW1wbGUsIGEgLmZyb21UbygpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyICh3aGljaCBjcmVhdGVzIGFuIGludGVybmFsIHRpbWVsaW5lKSBnZXRzIHJldmVydGVkIEJFRk9SRSBzb21lIG9mIGl0cyBjaGlsZCB0d2VlbnMgcmVuZGVyIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgbWF5IG5vdCBwcm9wZXJseSB0cmlnZ2VyIHRoZW0gdG8gcmV2ZXJ0LlxuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSBhZGp1c3RlZFRpbWUgPyAtX3RpbnlOdW0gOiBfdGlueU51bSk7IC8vIGl0IGRpZG4ndCBmaW5pc2ggcmVuZGVyaW5nLCBzbyBhZGp1c3QgelRpbWUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXVzZVR3ZWVuICYmICFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHBhdXNlVHdlZW4ucmVuZGVyKHRpbWUgPj0gcHJldlRpbWUgPyAwIDogLV90aW55TnVtKS5felRpbWUgPSB0aW1lID49IHByZXZUaW1lID8gMSA6IC0xO1xuXG4gICAgICAgIGlmICh0aGlzLl90cykge1xuICAgICAgICAgIC8vdGhlIGNhbGxiYWNrIHJlc3VtZWQgcGxheWJhY2shIFNvIHNpbmNlIHdlIG1heSBoYXZlIGhlbGQgYmFjayB0aGUgcGxheWhlYWQgZHVlIHRvIHdoZXJlIHRoZSBwYXVzZSBpcyBwb3NpdGlvbmVkLCBnbyBhaGVhZCBhbmQganVtcCB0byB3aGVyZSBpdCdzIFNVUFBPU0VEIHRvIGJlIChpZiBubyBwYXVzZSBoYXBwZW5lZCkuXG4gICAgICAgICAgdGhpcy5fc3RhcnQgPSBwcmV2U3RhcnQ7IC8vaWYgdGhlIHBhdXNlIHdhcyBhdCBhbiBlYXJsaWVyIHRpbWUgYW5kIHRoZSB1c2VyIHJlc3VtZWQgaW4gdGhlIGNhbGxiYWNrLCBpdCBjb3VsZCByZXBvc2l0aW9uIHRoZSB0aW1lbGluZSAoY2hhbmdpbmcgaXRzIHN0YXJ0VGltZSksIHRocm93aW5nIHRoaW5ncyBvZmYgc2xpZ2h0bHksIHNvIHdlIG1ha2Ugc3VyZSB0aGUgX3N0YXJ0IGRvZXNuJ3Qgc2hpZnQuXG5cbiAgICAgICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIiwgdHJ1ZSk7XG4gICAgICBpZiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdFRpbWUgPj0gdGhpcy50b3RhbER1cmF0aW9uKCkgfHwgIXRUaW1lICYmIHByZXZUaW1lKSBpZiAocHJldlN0YXJ0ID09PSB0aGlzLl9zdGFydCB8fCBNYXRoLmFicyh0aW1lU2NhbGUpICE9PSBNYXRoLmFicyh0aGlzLl90cykpIGlmICghdGhpcy5fbG9jaykge1xuICAgICAgICAvLyByZW1lbWJlciwgYSBjaGlsZCdzIGNhbGxiYWNrIG1heSBhbHRlciB0aGlzIHRpbWVsaW5lJ3MgcGxheWhlYWQgb3IgdGltZVNjYWxlIHdoaWNoIGlzIHdoeSB3ZSBuZWVkIHRvIGFkZCBzb21lIG9mIHRoZXNlIGNoZWNrcy5cbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEodG90YWxUaW1lIDwgMCAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCAhdER1cikpIHtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgJiYgdG90YWxUaW1lID49IDAgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZCA9IGZ1bmN0aW9uIGFkZChjaGlsZCwgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIF9pc051bWJlcihwb3NpdGlvbikgfHwgKHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24sIGNoaWxkKSk7XG5cbiAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEFuaW1hdGlvbikpIHtcbiAgICAgIGlmIChfaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5hZGQob2JqLCBwb3NpdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGFiZWwoY2hpbGQsIHBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgICBjaGlsZCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzICE9PSBjaGlsZCA/IF9hZGRUb1RpbWVsaW5lKHRoaXMsIGNoaWxkLCBwb3NpdGlvbikgOiB0aGlzOyAvL2Rvbid0IGFsbG93IGEgdGltZWxpbmUgdG8gYmUgYWRkZWQgdG8gaXRzZWxmIGFzIGEgY2hpbGQhXG4gIH07XG5cbiAgX3Byb3RvMi5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uIGdldENoaWxkcmVuKG5lc3RlZCwgdHdlZW5zLCB0aW1lbGluZXMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAobmVzdGVkID09PSB2b2lkIDApIHtcbiAgICAgIG5lc3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR3ZWVucyA9PT0gdm9pZCAwKSB7XG4gICAgICB0d2VlbnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aW1lbGluZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGltZWxpbmVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gLV9iaWdOdW07XG4gICAgfVxuXG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgICAgdHdlZW5zICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZWxpbmVzICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgICAgbmVzdGVkICYmIGEucHVzaC5hcHBseShhLCBjaGlsZC5nZXRDaGlsZHJlbih0cnVlLCB0d2VlbnMsIHRpbWVsaW5lcykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRCeUlkID0gZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHZhciBhbmltYXRpb25zID0gdGhpcy5nZXRDaGlsZHJlbigxLCAxLCAxKSxcbiAgICAgICAgaSA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGFuaW1hdGlvbnNbaV0udmFycy5pZCA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnNbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGNoaWxkKSB7XG4gICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW92ZUxhYmVsKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5raWxsVHdlZW5zT2YoY2hpbGQpO1xuICAgIH1cblxuICAgIGNoaWxkLnBhcmVudCA9PT0gdGhpcyAmJiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBjaGlsZC5pbnZhbGlkYXRlKHNvZnQpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIHZhciBtYXggPSAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICBwcmV2U3RhcnQgPSBfYmlnTnVtLFxuICAgICAgICBwcmV2LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgaW4gY2FzZSB0aGUgdHdlZW4gY2hhbmdlcyBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2UuLi5cblxuICAgICAgICBjaGlsZC5fZGlydHkgJiYgY2hpbGQudG90YWxEdXJhdGlvbigpOyAvL2NvdWxkIGNoYW5nZSB0aGUgdHdlZW4uX3N0YXJ0VGltZSwgc28gbWFrZSBzdXJlIHRoZSBhbmltYXRpb24ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXG4gICAgICAgIHN0YXJ0ID0gY2hpbGQuX3N0YXJ0O1xuXG4gICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgIC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2VcbiAgICAgICAgICBzZWxmLl9sb2NrID0gMTsgLy9wcmV2ZW50IGVuZGxlc3MgcmVjdXJzaXZlIGNhbGxzIC0gdGhlcmUgYXJlIG1ldGhvZHMgdGhhdCBnZXQgdHJpZ2dlcmVkIHRoYXQgY2hlY2sgZHVyYXRpb24vdG90YWxEdXJhdGlvbiB3aGVuIHdlIGFkZCgpLlxuXG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCAwICYmIGNoaWxkLl90cykge1xuICAgICAgICAgIC8vY2hpbGRyZW4gYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBuZWdhdGl2ZSBzdGFydFRpbWVzIHVubGVzcyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCBzbyBhZGp1c3QgaGVyZSBpZiBvbmUgaXMgZm91bmQuXG4gICAgICAgICAgbWF4IC09IHN0YXJ0O1xuXG4gICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICBzZWxmLl90aW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5zaGlmdENoaWxkcmVuKC1zdGFydCwgZmFsc2UsIC0xZTk5OSk7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLl9lbmQgPiBtYXggJiYgY2hpbGQuX3RzICYmIChtYXggPSBjaGlsZC5fZW5kKTtcbiAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICBfc2V0RHVyYXRpb24oc2VsZiwgc2VsZiA9PT0gX2dsb2JhbFRpbWVsaW5lICYmIHNlbGYuX3RpbWUgPiBtYXggPyBzZWxmLl90aW1lIDogbWF4LCAxLCAxKTtcblxuICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl90RHVyO1xuICB9O1xuXG4gIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICBpZiAoX2dsb2JhbFRpbWVsaW5lLl90cykge1xuICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgdmFyIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcbiAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gIF9sb2NrOiAwLFxuICBfaGFzUGF1c2U6IDAsXG4gIF9mb3JjaW5nOiAwXG59KTtcblxudmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnROdW1zLFxuICAgICAgY29sb3IsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgaGFzUmFuZG9tLFxuICAgICAgYTtcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvL2Vuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gIH1cblxuICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICBzdHJpbmdGaWx0ZXIoYSwgdGFyZ2V0LCBwcm9wKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gIH1cblxuICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgd2hpbGUgKHJlc3VsdCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmV4ZWMoZW5kKSkge1xuICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICBjb2xvciA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbbWF0Y2hJbmRleCAtIDFdKSB8fCAwOyAvL3RoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cbiAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgZW5kTnVtKSAtIHN0YXJ0TnVtIDogcGFyc2VGbG9hdChlbmROdW0pIC0gc3RhcnROdW0sXG4gICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCA/IE1hdGgucm91bmQgOiAwXG4gICAgICB9O1xuICAgICAgaW5kZXggPSBfY29tcGxleFN0cmluZ051bUV4cC5sYXN0SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuXG4gIHB0LmZwID0gZnVuY1BhcmFtO1xuXG4gIGlmIChfcmVsRXhwLnRlc3QoZW5kKSB8fCBoYXNSYW5kb20pIHtcbiAgICBwdC5lID0gMDsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuICB9XG5cbiAgdGhpcy5fcHQgPSBwdDsgLy9zdGFydCB0aGUgbGlua2VkIGxpc3Qgd2l0aCB0aGlzIG5ldyBQcm9wVHdlZW4uIFJlbWVtYmVyLCB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBpbmRleCwgdGFyZ2V0cywgbW9kaWZpZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtLCBvcHRpb25hbCkge1xuICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF0sXG4gICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgIHB0O1xuXG4gIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgcHQgPSBfcGFyc2VSZWxhdGl2ZShwYXJzZWRTdGFydCwgZW5kKSArIChnZXRVbml0KHBhcnNlZFN0YXJ0KSB8fCAwKTtcblxuICAgICAgaWYgKHB0IHx8IHB0ID09PSAwKSB7XG4gICAgICAgIC8vIHRvIGF2b2lkIGlzTmFOLCBsaWtlIGlmIHNvbWVvbmUgcGFzc2VzIGluIGEgdmFsdWUgbGlrZSBcIiE9IHdoYXRldmVyXCJcbiAgICAgICAgZW5kID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFvcHRpb25hbCB8fCBwYXJzZWRTdGFydCAhPT0gZW5kIHx8IF9mb3JjZUFsbFByb3BUd2VlbnMpIHtcbiAgICBpZiAoIWlzTmFOKHBhcnNlZFN0YXJ0ICogZW5kKSAmJiBlbmQgIT09IFwiXCIpIHtcbiAgICAgIC8vIGZ1biBmYWN0OiBhbnkgbnVtYmVyIG11bHRpcGxpZWQgYnkgXCJcIiBpcyBldmFsdWF0ZWQgYXMgdGhlIG51bWJlciAwIVxuICAgICAgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsICtwYXJzZWRTdGFydCB8fCAwLCBlbmQgLSAocGFyc2VkU3RhcnQgfHwgMCksIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09IFwiYm9vbGVhblwiID8gX3JlbmRlckJvb2xlYW4gOiBfcmVuZGVyUGxhaW4sIDAsIHNldHRlcik7XG4gICAgICBmdW5jUGFyYW0gJiYgKHB0LmZwID0gZnVuY1BhcmFtKTtcbiAgICAgIG1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0aGlzLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3B0ID0gcHQ7XG4gICAgfVxuXG4gICAgIWN1cnJlbnRWYWx1ZSAmJiAhKHByb3AgaW4gdGFyZ2V0KSAmJiBfbWlzc2luZ1BsdWdpbihwcm9wLCBlbmQpO1xuICAgIHJldHVybiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHRoaXMsIHRhcmdldCwgcHJvcCwgcGFyc2VkU3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIgfHwgX2NvbmZpZy5zdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSk7XG4gIH1cbn0sXG4gICAgLy9jcmVhdGVzIGEgY29weSBvZiB0aGUgdmFycyBvYmplY3QgYW5kIHByb2Nlc3NlcyBhbnkgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIChwdXR0aW5nIHRoZSByZXN1bHRpbmcgdmFsdWVzIGRpcmVjdGx5IGludG8gdGhlIGNvcHkpIGFzIHdlbGwgYXMgc3RyaW5ncyB3aXRoIFwicmFuZG9tKClcIiBpbiB0aGVtLiBJdCBkb2VzIE5PVCBwcm9jZXNzIHJlbGF0aXZlIHZhbHVlcy5cbl9wcm9jZXNzVmFycyA9IGZ1bmN0aW9uIF9wcm9jZXNzVmFycyh2YXJzLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2Vlbikge1xuICBfaXNGdW5jdGlvbih2YXJzKSAmJiAodmFycyA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gIGlmICghX2lzT2JqZWN0KHZhcnMpIHx8IHZhcnMuc3R5bGUgJiYgdmFycy5ub2RlVHlwZSB8fCBfaXNBcnJheSh2YXJzKSB8fCBfaXNUeXBlZEFycmF5KHZhcnMpKSB7XG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YXJzKSA/IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiB2YXJzO1xuICB9XG5cbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICBjb3B5W3BdID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnNbcF0sIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfY2hlY2tQbHVnaW4gPSBmdW5jdGlvbiBfY2hlY2tQbHVnaW4ocHJvcGVydHksIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHZhciBwbHVnaW4sIHB0LCBwdExvb2t1cCwgaTtcblxuICBpZiAoX3BsdWdpbnNbcHJvcGVydHldICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcHJvcGVydHldKCkpLmluaXQodGFyZ2V0LCBwbHVnaW4ucmF3VmFycyA/IHZhcnNbcHJvcGVydHldIDogX3Byb2Nlc3NWYXJzKHZhcnNbcHJvcGVydHldLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2VlbiksIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgaWYgKHR3ZWVuICE9PSBfcXVpY2tUd2Vlbikge1xuICAgICAgcHRMb29rdXAgPSB0d2Vlbi5fcHRMb29rdXBbdHdlZW4uX3RhcmdldHMuaW5kZXhPZih0YXJnZXQpXTsgLy9ub3RlOiB3ZSBjYW4ndCB1c2UgdHdlZW4uX3B0TG9va3VwW2luZGV4XSBiZWNhdXNlIGZvciBzdGFnZ2VyZWQgdHdlZW5zLCB0aGUgaW5kZXggZnJvbSB0aGUgZnVsbFRhcmdldHMgYXJyYXkgd29uJ3QgbWF0Y2ggd2hhdCBpdCBpcyBpbiBlYWNoIGluZGl2aWR1YWwgdHdlZW4gdGhhdCBzcGF3bnMgZnJvbSB0aGUgc3RhZ2dlci5cblxuICAgICAgaSA9IHBsdWdpbi5fcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0TG9va3VwW3BsdWdpbi5fcHJvcHNbaV1dID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcbn0sXG4gICAgX292ZXJ3cml0aW5nVHdlZW4sXG4gICAgLy9zdG9yZSBhIHJlZmVyZW5jZSB0ZW1wb3JhcmlseSBzbyB3ZSBjYW4gYXZvaWQgb3ZlcndyaXRpbmcgaXRzZWxmLlxuX2ZvcmNlQWxsUHJvcFR3ZWVucyxcbiAgICBfaW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBydW5CYWNrd2FyZHMgPSB2YXJzLnJ1bkJhY2t3YXJkcyxcbiAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgYXV0b1JldmVydCA9IHZhcnMuYXV0b1JldmVydCxcbiAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgIGF1dG9PdmVyd3JpdGUgPSB0d2Vlbi5fb3ZlcndyaXRlID09PSBcImF1dG9cIiAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICBjbGVhblZhcnMsXG4gICAgICBpLFxuICAgICAgcCxcbiAgICAgIHB0LFxuICAgICAgdGFyZ2V0LFxuICAgICAgaGFzUHJpb3JpdHksXG4gICAgICBnc0RhdGEsXG4gICAgICBoYXJuZXNzLFxuICAgICAgcGx1Z2luLFxuICAgICAgcHRMb29rdXAsXG4gICAgICBpbmRleCxcbiAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgb3ZlcndyaXR0ZW47XG4gIHRsICYmICgha2V5ZnJhbWVzIHx8ICFlYXNlKSAmJiAoZWFzZSA9IFwibm9uZVwiKTtcbiAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICBpZiAoeW95b0Vhc2UgJiYgdHdlZW4uX3lveW8gJiYgIXR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvL3RoZXJlIG11c3QgaGF2ZSBiZWVuIGEgcGFyZW50IHRpbWVsaW5lIHdpdGggeW95bzp0cnVlIHRoYXQgaXMgY3VycmVudGx5IGluIGl0cyB5b3lvIHBoYXNlLCBzbyBmbGlwIHRoZSBlYXNlcy5cbiAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICB0d2Vlbi5fZWFzZSA9IHlveW9FYXNlO1xuICB9XG5cbiAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkczsgLy9uZXN0ZWQgdGltZWxpbmVzIHNob3VsZCBuZXZlciBydW4gYmFja3dhcmRzIC0gdGhlIGJhY2t3YXJkcy1uZXNzIGlzIGluIHRoZSBjaGlsZCB0d2VlbnMuXG5cbiAgaWYgKCF0bCB8fCBrZXlmcmFtZXMgJiYgIXZhcnMuc3RhZ2dlcikge1xuICAgIC8vaWYgdGhlcmUncyBhbiBpbnRlcm5hbCB0aW1lbGluZSwgc2tpcCBhbGwgdGhlIHBhcnNpbmcgYmVjYXVzZSB3ZSBwYXNzZWQgdGhhdCB0YXNrIGRvd24gdGhlIGNoYWluLlxuICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgIGhhcm5lc3NWYXJzID0gaGFybmVzcyAmJiB2YXJzW2hhcm5lc3MucHJvcF07IC8vc29tZW9uZSBtYXkgbmVlZCB0byBzcGVjaWZ5IENTUy1zcGVjaWZpYyB2YWx1ZXMgQU5EIG5vbi1DU1MgdmFsdWVzLCBsaWtlIGlmIHRoZSBlbGVtZW50IGhhcyBhbiBcInhcIiBwcm9wZXJ0eSBwbHVzIGl0J3MgYSBzdGFuZGFyZCBET00gZWxlbWVudC4gV2UgYWxsb3cgcGVvcGxlIHRvIGRpc3Rpbmd1aXNoIGJ5IHdyYXBwaW5nIHBsdWdpbi1zcGVjaWZpYyBzdHVmZiBpbiBhIGNzczp7fSBvYmplY3QgZm9yIGV4YW1wbGUuXG5cbiAgICBjbGVhblZhcnMgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfcmVzZXJ2ZWRQcm9wcyk7XG5cbiAgICBpZiAocHJldlN0YXJ0QXQpIHtcbiAgICAgIHByZXZTdGFydEF0Ll96VGltZSA8IDAgJiYgcHJldlN0YXJ0QXQucHJvZ3Jlc3MoMSk7IC8vIGluIGNhc2UgaXQncyBhIGxhenkgc3RhcnRBdCB0aGF0IGhhc24ndCByZW5kZXJlZCB5ZXQuXG5cbiAgICAgIHRpbWUgPCAwICYmIHJ1bkJhY2t3YXJkcyAmJiBpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQgPyBwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpIDogcHJldlN0YXJ0QXQucmV2ZXJ0KHJ1bkJhY2t3YXJkcyAmJiBkdXIgPyBfcmV2ZXJ0Q29uZmlnTm9LaWxsIDogX3N0YXJ0QXRSZXZlcnRDb25maWcpOyAvLyBpZiBpdCdzIGEgXCJzdGFydEF0XCIgKG5vdCBcImZyb20oKVwiIG9yIHJ1bkJhY2t3YXJkczogdHJ1ZSksIHdlIG9ubHkgbmVlZCB0byBkbyBhIHNoYWxsb3cgcmV2ZXJ0IChrZWVwIHRyYW5zZm9ybXMgY2FjaGVkIGluIENTU1BsdWdpbilcbiAgICAgIC8vIGRvbid0IGp1c3QgX3JlbW92ZUZyb21QYXJlbnQocHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSkgYmVjYXVzZSB0aGF0J2xsIGxlYXZlIGlubGluZSBzdHlsZXMuIFdlJ3JlIGNyZWF0aW5nIGEgbmV3IF9zdGFydEF0IGZvciBcInN0YXJ0QXRcIiB0d2VlbnMgdGhhdCByZS1jYXB0dXJlIHRoaW5ncyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgcHJlLXR3ZWVuIHZhbHVlcyBjaGFuZ2VkIHNpbmNlIHRoZSB0d2VlbiB3YXMgY3JlYXRlZCwgdGhleSdyZSByZWNvcmRlZC5cblxuICAgICAgcHJldlN0YXJ0QXQuX2xhenkgPSAwO1xuICAgIH1cblxuICAgIGlmIChzdGFydEF0KSB7XG4gICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgICBkYXRhOiBcImlzU3RhcnRcIixcbiAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgbGF6eTogIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSEgTGlrZSB3aGVuIHJldmVydCgpIGlzIGNhbGxlZCBhbmQgdG90YWxUaW1lKCkgZ2V0cyBzZXQuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjsgLy8gdXNlZCBpbiBnbG9iYWxUaW1lKCkuIF9zYXQgc3RhbmRzIGZvciBfc3RhcnRBdFR3ZWVuXG5cbiAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCB0d2Vlbi5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCAmJiB0VGltZSA8PSAwKSB7XG4gICAgICAgICAgLy8gY2hlY2sgdFRpbWUgaGVyZSBiZWNhdXNlIGluIHRoZSBjYXNlIG9mIGEgeW95byB0d2VlbiB3aG9zZSBwbGF5aGVhZCBnZXRzIHB1c2hlZCB0byB0aGUgZW5kIGxpa2UgdHdlZW4ucHJvZ3Jlc3MoMSksIHdlIHNob3VsZCBhbGxvdyBpdCB0aHJvdWdoIHNvIHRoYXQgdGhlIG9uQ29tcGxldGUgZ2V0cyBmaXJlZCBwcm9wZXJseS5cbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmICghcHJldlN0YXJ0QXQpIHtcbiAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpOyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXG4gICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgZGF0YTogXCJpc0Zyb21TdGFydFwiLFxuICAgICAgICAgIC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OiBnc2FwLnV0aWxzLndyYXAoWy0xMDAsMTAwXSksIHN0YWdnZXI6IDAuNX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSFcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpXG5cbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKTtcbiAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4uX3N0YXJ0QXQsIF90aW55TnVtLCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gdHdlZW4uX3B0Q2FjaGUgPSAwO1xuICAgIGxhenkgPSBkdXIgJiYgX2lzTm90RmFsc2UobGF6eSkgfHwgbGF6eSAmJiAhZHVyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgICBnc0RhdGEgPSB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModGFyZ2V0cylbaV0uX2dzYXA7XG4gICAgICB0d2Vlbi5fcHRMb29rdXBbaV0gPSBwdExvb2t1cCA9IHt9O1xuICAgICAgX2xhenlMb29rdXBbZ3NEYXRhLmlkXSAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pZiBvdGhlciB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0IGhhdmUgcmVjZW50bHkgaW5pdHRlZCBidXQgaGF2ZW4ndCByZW5kZXJlZCB5ZXQsIHdlJ3ZlIGdvdCB0byBmb3JjZSB0aGUgcmVuZGVyIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmUgY29ycmVjdCAoaW1hZ2luZSBwb3B1bGF0aW5nIGEgdGltZWxpbmUgd2l0aCBhIGJ1bmNoIG9mIHNlcXVlbnRpYWwgdHdlZW5zIGFuZCB0aGVuIGp1bXBpbmcgdG8gdGhlIGVuZClcblxuICAgICAgaW5kZXggPSBmdWxsVGFyZ2V0cyA9PT0gdGFyZ2V0cyA/IGkgOiBmdWxsVGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChoYXJuZXNzICYmIChwbHVnaW4gPSBuZXcgaGFybmVzcygpKS5pbml0KHRhcmdldCwgaGFybmVzc1ZhcnMgfHwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIGZ1bGxUYXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwbHVnaW4ubmFtZSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgICAgIHBsdWdpbi5fcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHB0TG9va3VwW25hbWVdID0gcHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXJuZXNzIHx8IGhhcm5lc3NWYXJzKSB7XG4gICAgICAgIGZvciAocCBpbiBjbGVhblZhcnMpIHtcbiAgICAgICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IF9jaGVja1BsdWdpbihwLCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCBmdWxsVGFyZ2V0cykpKSB7XG4gICAgICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB0TG9va3VwW3BdID0gcHQgPSBfYWRkUHJvcFR3ZWVuLmNhbGwodHdlZW4sIHRhcmdldCwgcCwgXCJnZXRcIiwgY2xlYW5WYXJzW3BdLCBpbmRleCwgZnVsbFRhcmdldHMsIDAsIHZhcnMuc3RyaW5nRmlsdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHdlZW4uX29wICYmIHR3ZWVuLl9vcFtpXSAmJiB0d2Vlbi5raWxsKHRhcmdldCwgdHdlZW4uX29wW2ldKTtcblxuICAgICAgaWYgKGF1dG9PdmVyd3JpdGUgJiYgdHdlZW4uX3B0KSB7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gdHdlZW47XG5cbiAgICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXQsIHB0TG9va3VwLCB0d2Vlbi5nbG9iYWxUaW1lKHRpbWUpKTsgLy8gbWFrZSBzdXJlIHRoZSBvdmVyd3JpdGluZyBkb2Vzbid0IG92ZXJ3cml0ZSBUSElTIHR3ZWVuISEhXG5cblxuICAgICAgICBvdmVyd3JpdHRlbiA9ICF0d2Vlbi5wYXJlbnQ7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgdHdlZW4uX3B0ICYmIGxhenkgJiYgKF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gPSAxKTtcbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHR3ZWVuKTtcbiAgICB0d2Vlbi5fb25Jbml0ICYmIHR3ZWVuLl9vbkluaXQodHdlZW4pOyAvL3BsdWdpbnMgbGlrZSBSb3VuZFByb3BzIG11c3Qgd2FpdCB1bnRpbCBBTEwgb2YgdGhlIFByb3BUd2VlbnMgYXJlIGluc3RhbnRpYXRlZC4gSW4gdGhlIHBsdWdpbidzIGluaXQoKSBmdW5jdGlvbiwgaXQgc2V0cyB0aGUgX29uSW5pdCBvbiB0aGUgdHdlZW4gaW5zdGFuY2UuIE1heSBub3QgYmUgcHJldHR5L2ludHVpdGl2ZSwgYnV0IGl0J3MgZmFzdCBhbmQga2VlcHMgZmlsZSBzaXplIGRvd24uXG4gIH1cblxuICB0d2Vlbi5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgdHdlZW4uX2luaXR0ZWQgPSAoIXR3ZWVuLl9vcCB8fCB0d2Vlbi5fcHQpICYmICFvdmVyd3JpdHRlbjsgLy8gaWYgb3ZlcndyaXR0ZW5Qcm9wcyByZXN1bHRlZCBpbiB0aGUgZW50aXJlIHR3ZWVuIGJlaW5nIGtpbGxlZCwgZG8gTk9UIGZsYWcgaXQgYXMgaW5pdHRlZCBvciBlbHNlIGl0IG1heSByZW5kZXIgZm9yIG9uZSB0aWNrLlxuXG4gIGtleWZyYW1lcyAmJiB0aW1lIDw9IDAgJiYgdGwucmVuZGVyKF9iaWdOdW0sIHRydWUsIHRydWUpOyAvLyBpZiB0aGVyZSdzIGEgMCUga2V5ZnJhbWUsIGl0J2xsIHJlbmRlciBpbiB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBmb3IgYW55IHN0YWdnZXJlZC9kZWxheWVkIGFuaW1hdGlvbnMgdGh1cyB3aGVuIHRoZSBmb2xsb3dpbmcgdHdlZW4gaW5pdGlhbGl6ZXMsIGl0J2xsIHVzZSB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBpbnN0ZWFkIG9mIHRoZSBcImFmdGVyXCIgc3RhdGUgYXMgdGhlIGluaXRpYWwgdmFsdWVzLlxufSxcbiAgICBfdXBkYXRlUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHR3ZWVuLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lLCBza2lwUmVjdXJzaW9uKSB7XG4gIHZhciBwdENhY2hlID0gKHR3ZWVuLl9wdCAmJiB0d2Vlbi5fcHRDYWNoZSB8fCAodHdlZW4uX3B0Q2FjaGUgPSB7fSkpW3Byb3BlcnR5XSxcbiAgICAgIHB0LFxuICAgICAgcm9vdFBULFxuICAgICAgbG9va3VwLFxuICAgICAgaTtcblxuICBpZiAoIXB0Q2FjaGUpIHtcbiAgICBwdENhY2hlID0gdHdlZW4uX3B0Q2FjaGVbcHJvcGVydHldID0gW107XG4gICAgbG9va3VwID0gdHdlZW4uX3B0TG9va3VwO1xuICAgIGkgPSB0d2Vlbi5fdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IGxvb2t1cFtpXVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmIChwdCAmJiBwdC5kICYmIHB0LmQuX3B0KSB7XG4gICAgICAgIC8vIGl0J3MgYSBwbHVnaW4sIHNvIGZpbmQgdGhlIG5lc3RlZCBQcm9wVHdlZW5cbiAgICAgICAgcHQgPSBwdC5kLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcGVydHkgJiYgcHQuZnAgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgLy8gXCJmcFwiIGlzIGZ1bmN0aW9uUGFyYW0gZm9yIHRoaW5ncyBsaWtlIHNldHRpbmcgQ1NTIHZhcmlhYmxlcyB3aGljaCByZXF1aXJlIC5zZXRQcm9wZXJ0eShcIi0tdmFyLW5hbWVcIiwgdmFsdWUpXG4gICAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXB0KSB7XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIFByb3BUd2VlbiBhc3NvY2lhdGVkIHdpdGggdGhhdCBwcm9wZXJ0eSwgc28gd2UgbXVzdCBGT1JDRSBvbmUgdG8gYmUgY3JlYXRlZCBhbmQgZGl0Y2ggb3V0IG9mIHRoaXNcbiAgICAgICAgLy8gaWYgdGhlIHR3ZWVuIGhhcyBvdGhlciBwcm9wZXJ0aWVzIHRoYXQgYWxyZWFkeSByZW5kZXJlZCBhdCBuZXcgcG9zaXRpb25zLCB3ZSdkIG5vcm1hbGx5IGhhdmUgdG8gcmV3aW5kIHRvIHB1dCB0aGVtIGJhY2sgbGlrZSB0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSkgYmVmb3JlIGZvcmNpbmcgYW4gX2luaXRUd2VlbigpLCBidXQgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgZWRnZSBjYXNlIGxpa2UgdHdlZW5pbmcgYSB0aW1lbGluZSdzIHByb2dyZXNzIHdvdWxkIHRyaWdnZXIgb25VcGRhdGVzIHRvIGZpcmUgd2hpY2ggY291bGQgbW92ZSBvdGhlciB0aGluZ3MgYXJvdW5kLiBJdCdzIGJldHRlciB0byBqdXN0IGluZm9ybSB1c2VycyB0aGF0IC5yZXNldFRvKCkgc2hvdWxkIE9OTFkgYmUgdXNlZCBmb3IgdHdlZW5zIHRoYXQgYWxyZWFkeSBoYXZlIHRoYXQgcHJvcGVydHkuIEZvciBleGFtcGxlLCB5b3UgY2FuJ3QgZ3NhcC50byguLi57IHk6IDAgfSkgYW5kIHRoZW4gdHdlZW4ucmVzdFRvKFwieFwiLCAyMDApIGZvciBleGFtcGxlLlxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMTsgLy8gb3RoZXJ3aXNlLCB3aGVuIHdlIF9hZGRQcm9wVHdlZW4oKSBhbmQgaXQgZmluZHMgbm8gY2hhbmdlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzLCBpdCBza2lwcyBjcmVhdGluZyBhIFByb3BUd2VlbiAoZm9yIGVmZmljaWVuY3kuLi53aHkgdHdlZW4gd2hlbiB0aGVyZSdzIG5vIGRpZmZlcmVuY2U/KSBidXQgaW4gdGhpcyBjYXNlIHdlIE5FRUQgdGhhdCBQcm9wVHdlZW4gY3JlYXRlZCBzbyB3ZSBjYW4gZWRpdCBpdC5cblxuICAgICAgICB0d2Vlbi52YXJzW3Byb3BlcnR5XSA9IFwiKz0wXCI7XG5cbiAgICAgICAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSk7XG5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDA7XG4gICAgICAgIHJldHVybiBza2lwUmVjdXJzaW9uID8gX3dhcm4ocHJvcGVydHkgKyBcIiBub3QgZWxpZ2libGUgZm9yIHJlc2V0XCIpIDogMTsgLy8gaWYgc29tZW9uZSB0cmllcyB0byBkbyBhIHF1aWNrVG8oKSBvbiBhIHNwZWNpYWwgcHJvcGVydHkgbGlrZSBib3JkZXJSYWRpdXMgd2hpY2ggbXVzdCBnZXQgc3BsaXQgaW50byA0IGRpZmZlcmVudCBwcm9wZXJ0aWVzLCB0aGF0J3Mgbm90IGVsaWdpYmxlIGZvciAucmVzZXRUbygpLlxuICAgICAgfVxuXG4gICAgICBwdENhY2hlLnB1c2gocHQpO1xuICAgIH1cbiAgfVxuXG4gIGkgPSBwdENhY2hlLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgcm9vdFBUID0gcHRDYWNoZVtpXTtcbiAgICBwdCA9IHJvb3RQVC5fcHQgfHwgcm9vdFBUOyAvLyBjb21wbGV4IHZhbHVlcyBtYXkgaGF2ZSBuZXN0ZWQgUHJvcFR3ZWVucy4gV2Ugb25seSBhY2NvbW1vZGF0ZSB0aGUgRklSU1QgdmFsdWUuXG5cbiAgICBwdC5zID0gKHN0YXJ0IHx8IHN0YXJ0ID09PSAwKSAmJiAhc3RhcnRJc1JlbGF0aXZlID8gc3RhcnQgOiBwdC5zICsgKHN0YXJ0IHx8IDApICsgcmF0aW8gKiBwdC5jO1xuICAgIHB0LmMgPSB2YWx1ZSAtIHB0LnM7XG4gICAgcm9vdFBULmUgJiYgKHJvb3RQVC5lID0gX3JvdW5kKHZhbHVlKSArIGdldFVuaXQocm9vdFBULmUpKTsgLy8gbWFpbmx5IGZvciBDU1NQbHVnaW4gKGVuZCB2YWx1ZSlcblxuICAgIHJvb3RQVC5iICYmIChyb290UFQuYiA9IHB0LnMgKyBnZXRVbml0KHJvb3RQVC5iKSk7IC8vIChiZWdpbm5pbmcgdmFsdWUpXG4gIH1cbn0sXG4gICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMCxcbiAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgY29weSxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgYWxpYXNlcztcblxuICBpZiAoIXByb3BlcnR5QWxpYXNlcykge1xuICAgIHJldHVybiB2YXJzO1xuICB9XG5cbiAgY29weSA9IF9tZXJnZSh7fSwgdmFycyk7XG5cbiAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgIGFsaWFzZXMgPSBwcm9wZXJ0eUFsaWFzZXNbcF0uc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvcHlbYWxpYXNlc1tpXV0gPSBjb3B5W3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICAvLyBwYXJzZXMgbXVsdGlwbGUgZm9ybWF0cywgbGlrZSB7XCIwJVwiOiB7eDogMTAwfSwge1wiNTAlXCI6IHt4OiAtMjB9fSBhbmQgeyB4OiB7XCIwJVwiOiAxMDAsIFwiNTAlXCI6IC0yMH0gfSwgYW5kIGFuIFwiZWFzZVwiIGNhbiBiZSBzZXQgb24gYW55IG9iamVjdC4gV2UgcG9wdWxhdGUgYW4gXCJhbGxQcm9wc1wiIG9iamVjdCB3aXRoIGFuIEFycmF5IGZvciBlYWNoIHByb3BlcnR5LCBsaWtlIHt4OiBbe30sIHt9XSwgeTpbe30sIHt9XX0gd2l0aCBkYXRhIGZvciBlYWNoIHByb3BlcnR5IHR3ZWVuLiBUaGUgb2JqZWN0cyBoYXZlIGEgXCJ0XCIgKHRpbWUpLCBcInZcIiwgKHZhbHVlKSwgYW5kIFwiZVwiIChlYXNlKSBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gcGllY2UgdG9nZXRoZXIgYSB0aW1lbGluZSBsYXRlci5cbl9wYXJzZUtleWZyYW1lID0gZnVuY3Rpb24gX3BhcnNlS2V5ZnJhbWUocHJvcCwgb2JqLCBhbGxQcm9wcywgZWFzZUVhY2gpIHtcbiAgdmFyIGVhc2UgPSBvYmouZWFzZSB8fCBlYXNlRWFjaCB8fCBcInBvd2VyMS5pbk91dFwiLFxuICAgICAgcCxcbiAgICAgIGE7XG5cbiAgaWYgKF9pc0FycmF5KG9iaikpIHtcbiAgICBhID0gYWxsUHJvcHNbcHJvcF0gfHwgKGFsbFByb3BzW3Byb3BdID0gW10pOyAvLyB0ID0gdGltZSAob3V0IG9mIDEwMCksIHYgPSB2YWx1ZSwgZSA9IGVhc2VcblxuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgcmV0dXJuIGEucHVzaCh7XG4gICAgICAgIHQ6IGkgLyAob2JqLmxlbmd0aCAtIDEpICogMTAwLFxuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChwIGluIG9iaikge1xuICAgICAgYSA9IGFsbFByb3BzW3BdIHx8IChhbGxQcm9wc1twXSA9IFtdKTtcbiAgICAgIHAgPT09IFwiZWFzZVwiIHx8IGEucHVzaCh7XG4gICAgICAgIHQ6IHBhcnNlRmxvYXQocHJvcCksXG4gICAgICAgIHY6IG9ialtwXSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9wYXJzZUZ1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZUZ1bmNPclN0cmluZyh2YWx1ZSwgdHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbCh0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgfnZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpID8gX3JlcGxhY2VSYW5kb20odmFsdWUpIDogdmFsdWU7XG59LFxuICAgIF9zdGFnZ2VyVHdlZW5Qcm9wcyA9IF9jYWxsYmFja05hbWVzICsgXCJyZXBlYXQscmVwZWF0RGVsYXkseW95byxyZXBlYXRSZWZyZXNoLHlveW9FYXNlLGF1dG9SZXZlcnRcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0ge307XG5cbl9mb3JFYWNoTmFtZShfc3RhZ2dlclR3ZWVuUHJvcHMgKyBcIixpZCxzdGFnZ2VyLGRlbGF5LGR1cmF0aW9uLHBhdXNlZCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfc3RhZ2dlclByb3BzVG9Ta2lwW25hbWVdID0gMTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICB2YXIgX3RoaXMzJHZhcnMgPSBfdGhpczMudmFycyxcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3RoaXMzJHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICBrZXlmcmFtZXMgPSBfdGhpczMkdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICB5b3lvRWFzZSA9IF90aGlzMyR2YXJzLnlveW9FYXNlLFxuICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9nc2FwLmNvbVwiLCAhX2NvbmZpZy5udWxsVGFyZ2V0V2FybikgfHwgW107XG4gICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdOyAvL1Byb3BUd2VlbiBsb29rdXAuIEFuIGFycmF5IGNvbnRhaW5pbmcgYW4gb2JqZWN0IGZvciBlYWNoIHRhcmdldCwgaGF2aW5nIGtleXMgZm9yIGVhY2ggdHdlZW5pbmcgcHJvcGVydHlcblxuICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgaWYgKGtleWZyYW1lcyB8fCBzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICBkYXRhOiBcIm5lc3RlZFwiLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICB9KTsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgdGFyZ2V0cyBiZWNhdXNlIGZvciBzdGFnZ2VycyBhbmQga2V5ZnJhbWVzLCB3ZSBlbmQgdXAgY3JlYXRpbmcgYW4gaW5kaXZpZHVhbCB0d2VlbiBmb3IgZWFjaCBidXQgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG5lZWQgdG8ga25vdyB0aGUgaW5kZXggYW5kIHRoZSB3aG9sZSBBcnJheSBvZiB0YXJnZXRzLlxuXG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSB8fCAwKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSB8fCB0aGlzLl9sYXp5KSB7XG4gICAgICAvLyB0aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9yb3VuZFByZWNpc2UodFRpbWUgLyBjeWNsZUR1cmF0aW9uKTsgLy8gZnVsbCBkZWNpbWFsIHZlcnNpb24gb2YgaXRlcmF0aW9ucywgbm90IHRoZSBwcmV2aW91cyBpdGVyYXRpb24gKHdlJ3JlIHJldXNpbmcgcHJldkl0ZXJhdGlvbiB2YXJpYWJsZSBmb3IgZWZmaWNpZW5jeSlcblxuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+cHJldkl0ZXJhdGlvbjtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfSBlbHNlIGlmICh0aW1lID4gZHVyKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCAmJiBpdGVyYXRpb24gPT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2sgJiYgdGltZSAhPT0gY3ljbGVEdXJhdGlvbiAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgICAvLyB0aGlzLl90aW1lIHdpbGwgPT09IGN5Y2xlRHVyYXRpb24gd2hlbiB3ZSByZW5kZXIgYXQgRVhBQ1RMWSB0aGUgZW5kIG9mIGFuIGl0ZXJhdGlvbi4gV2l0aG91dCB0aGlzIGNvbmRpdGlvbiwgaXQnZCBvZnRlbiBkbyB0aGUgcmVwZWF0UmVmcmVzaCByZW5kZXIgVFdJQ0UgKGFnYWluIG9uIHRoZSB2ZXJ5IG5leHQgdGljaykuXG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gZm9yY2UgPSAxOyAvL2ZvcmNlLCBvdGhlcndpc2UgaWYgbGF6eSBpcyB0cnVlLCB0aGUgX2F0dGVtcHRJbml0VHdlZW4oKSB3aWxsIHJldHVybiBhbmQgd2UnbGwganVtcCBvdXQgYW5kIGdldCBjYXVnaHQgYm91bmNpbmcgb24gZWFjaCB0aWNrLlxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcihfcm91bmRQcmVjaXNlKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgaWYgKF9hdHRlbXB0SW5pdFR3ZWVuKHRoaXMsIGlzTmVnYXRpdmUgPyB0b3RhbFRpbWUgOiB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgIShmb3JjZSAmJiB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuIEJ1dCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gZHVtcCBpZiB3ZSdyZSBkb2luZyBhIHJlcGVhdFJlZnJlc2ggcmVuZGVyIVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR1ciAhPT0gdGhpcy5fZHVyKSB7XG4gICAgICAgICAgLy8gd2hpbGUgaW5pdHRpbmcsIGEgcGx1Z2luIGxpa2UgSW5lcnRpYVBsdWdpbiBtaWdodCBhbHRlciB0aGUgZHVyYXRpb24sIHNvIHJlcnVuIGZyb20gdGhlIHN0YXJ0IHRvIGVuc3VyZSBldmVyeXRoaW5nIHJlbmRlcnMgYXMgaXQgc2hvdWxkLlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuXG4gICAgICBpZiAoIXRoaXMuX2FjdCAmJiB0aGlzLl90cykge1xuICAgICAgICB0aGlzLl9hY3QgPSAxOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgICB0aGlzLl9sYXp5ID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gKHlveW9FYXNlIHx8IHRoaXMuX2Vhc2UpKHRpbWUgLyBkdXIpO1xuXG4gICAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lICYmICFwcmV2VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8IGlzWW95bykpIHtcbiAgICAgICAgICAvLyBpZiBwcmV2VGltZSBhbmQgdFRpbWUgYXJlIHplcm8sIHdlIHNob3VsZG4ndCBmaXJlIHRoZSBvblJldmVyc2VDb21wbGV0ZS4gVGhpcyBjb3VsZCBoYXBwZW4gaWYgeW91IGdzYXAudG8oLi4uIHtwYXVzZWQ6dHJ1ZX0pLnBsYXkoKTtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8zLnRhcmdldHMgPSBmdW5jdGlvbiB0YXJnZXRzKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICB9O1xuXG4gIF9wcm90bzMuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIC8vIFwic29mdFwiIGdpdmVzIHVzIGEgd2F5IHRvIGNsZWFyIG91dCBldmVyeXRoaW5nIEVYQ0VQVCB0aGUgcmVjb3JkZWQgcHJlLVwiZnJvbVwiIHBvcnRpb24gb2YgZnJvbSgpIHR3ZWVucy4gT3RoZXJ3aXNlLCBmb3IgZXhhbXBsZSwgaWYgeW91IHR3ZWVuLnByb2dyZXNzKDEpLnJlbmRlcigwLCB0cnVlIHRydWUpLmludmFsaWRhdGUoKSwgdGhlIFwiZnJvbVwiIHZhbHVlcyB3b3VsZCBwZXJzaXN0IGFuZCB0aGVuIG9uIHRoZSBuZXh0IHJlbmRlciwgdGhlIGZyb20oKSB0d2VlbnMgd291bGQgaW5pdGlhbGl6ZSBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgd291bGQgbWF0Y2ggdGhlIFwiZnJvbVwiIHZhbHVlcywgdGh1cyBhbmltYXRlIGZyb20gdGhlIHNhbWUgdmFsdWUgdG8gdGhlIHNhbWUgdmFsdWUgKG5vIGFuaW1hdGlvbikuIFdlIHRhcCBpbnRvIHRoaXMgaW4gU2Nyb2xsVHJpZ2dlcidzIHJlZnJlc2goKSB3aGVyZSB3ZSBtdXN0IHB1c2ggYSB0d2VlbiB0byBjb21wbGV0aW9uIGFuZCB0aGVuIGJhY2sgYWdhaW4gYnV0IGhvbm9yIGl0cyBpbml0IHN0YXRlIGluIGNhc2UgdGhlIHR3ZWVuIGlzIGRlcGVuZGVudCBvbiBhbm90aGVyIHR3ZWVuIGZ1cnRoZXIgdXAgb24gdGhlIHBhZ2UuXG4gICAgKCFzb2Z0IHx8ICF0aGlzLnZhcnMucnVuQmFja3dhcmRzKSAmJiAodGhpcy5fc3RhcnRBdCA9IDApO1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9vblVwZGF0ZSA9IHRoaXMuX2xhenkgPSB0aGlzLnJhdGlvID0gMDtcbiAgICB0aGlzLl9wdExvb2t1cCA9IFtdO1xuICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5pbnZhbGlkYXRlKHNvZnQpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCBza2lwUmVjdXJzaW9uKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCAxKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICB0aGlzLnBhcmVudCA/IF9pbnRlcnJ1cHQodGhpcykgOiB0aGlzLnNjcm9sbFRyaWdnZXIgJiYgdGhpcy5zY3JvbGxUcmlnZ2VyLmtpbGwoISFfcmV2ZXJ0aW5nKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XG4gICAgICB2YXIgdER1ciA9IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpO1xuICAgICAgdGhpcy50aW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgdmFycywgX292ZXJ3cml0aW5nVHdlZW4gJiYgX292ZXJ3cml0aW5nVHdlZW4udmFycy5vdmVyd3JpdGUgIT09IHRydWUpLl9maXJzdCB8fCBfaW50ZXJydXB0KHRoaXMpOyAvLyBpZiBub3RoaW5nIGlzIGxlZnQgdHdlZW5pbmcsIGludGVycnVwdC5cblxuICAgICAgdGhpcy5wYXJlbnQgJiYgdER1ciAhPT0gdGhpcy50aW1lbGluZS50b3RhbER1cmF0aW9uKCkgJiYgX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX2R1ciAqIHRoaXMudGltZWxpbmUuX3REdXIgLyB0RHVyLCAwLCAxKTsgLy8gaWYgYSBuZXN0ZWQgdHdlZW4gaXMga2lsbGVkIHRoYXQgY2hhbmdlcyB0aGUgZHVyYXRpb24sIGl0IHNob3VsZCBhZmZlY3QgdGhpcyB0d2VlbidzIGR1cmF0aW9uLiBXZSBtdXN0IHVzZSB0aGUgcmF0aW8sIHRob3VnaCwgYmVjYXVzZSBzb21ldGltZXMgdGhlIGludGVybmFsIHRpbWVsaW5lIGlzIHN0cmV0Y2hlZCBsaWtlIGZvciBrZXlmcmFtZXMgd2hlcmUgdGhleSBkb24ndCBhbGwgYWRkIHVwIHRvIHdoYXRldmVyIHRoZSBwYXJlbnQgdHdlZW4ncyBkdXJhdGlvbiB3YXMgc2V0IHRvLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VkVGFyZ2V0cyA9IHRoaXMuX3RhcmdldHMsXG4gICAgICAgIGtpbGxpbmdUYXJnZXRzID0gdGFyZ2V0cyA/IHRvQXJyYXkodGFyZ2V0cykgOiBwYXJzZWRUYXJnZXRzLFxuICAgICAgICBwcm9wVHdlZW5Mb29rdXAgPSB0aGlzLl9wdExvb2t1cCxcbiAgICAgICAgZmlyc3RQVCA9IHRoaXMuX3B0LFxuICAgICAgICBvdmVyd3JpdHRlblByb3BzLFxuICAgICAgICBjdXJMb29rdXAsXG4gICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgcCxcbiAgICAgICAgcHQsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpICYmIF9hcnJheXNNYXRjaChwYXJzZWRUYXJnZXRzLCBraWxsaW5nVGFyZ2V0cykpIHtcbiAgICAgIHZhcnMgPT09IFwiYWxsXCIgJiYgKHRoaXMuX3B0ID0gMCk7XG4gICAgICByZXR1cm4gX2ludGVycnVwdCh0aGlzKTtcbiAgICB9XG5cbiAgICBvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3AgPSB0aGlzLl9vcCB8fCBbXTtcblxuICAgIGlmICh2YXJzICE9PSBcImFsbFwiKSB7XG4gICAgICAvL3NvIHBlb3BsZSBjYW4gcGFzcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzXG4gICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgIHAgPSB7fTtcblxuICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gcFtuYW1lXSA9IDE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhcnMgPSBwO1xuICAgICAgfVxuXG4gICAgICB2YXJzID0gX2FkZEFsaWFzZXNUb1ZhcnMocGFyc2VkVGFyZ2V0cywgdmFycyk7XG4gICAgfVxuXG4gICAgaSA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKH5raWxsaW5nVGFyZ2V0cy5pbmRleE9mKHBhcnNlZFRhcmdldHNbaV0pKSB7XG4gICAgICAgIGN1ckxvb2t1cCA9IHByb3BUd2Vlbkxvb2t1cFtpXTtcblxuICAgICAgICBpZiAodmFycyA9PT0gXCJhbGxcIikge1xuICAgICAgICAgIG92ZXJ3cml0dGVuUHJvcHNbaV0gPSB2YXJzO1xuICAgICAgICAgIHByb3BzID0gY3VyTG9va3VwO1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0ge307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHMgPSBvdmVyd3JpdHRlblByb3BzW2ldID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fTtcbiAgICAgICAgICBwcm9wcyA9IHZhcnM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHAgaW4gcHJvcHMpIHtcbiAgICAgICAgICBwdCA9IGN1ckxvb2t1cCAmJiBjdXJMb29rdXBbcF07XG5cbiAgICAgICAgICBpZiAocHQpIHtcbiAgICAgICAgICAgIGlmICghKFwia2lsbFwiIGluIHB0LmQpIHx8IHB0LmQua2lsbChwKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgY3VyTG9va3VwW3BdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJPdmVyd3JpdGVQcm9wcyAhPT0gXCJhbGxcIikge1xuICAgICAgICAgICAgY3VyT3ZlcndyaXRlUHJvcHNbcF0gPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXR0ZWQgJiYgIXRoaXMuX3B0ICYmIGZpcnN0UFQgJiYgX2ludGVycnVwdCh0aGlzKTsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBhcmUga2lsbGVkLCBraWxsIHRoZSB0d2Vlbi4gV2l0aG91dCB0aGlzIGxpbmUsIGlmIHRoZXJlJ3MgYSB0d2VlbiB3aXRoIG11bHRpcGxlIHRhcmdldHMgYW5kIHRoZW4geW91IGtpbGxUd2VlbnNPZigpIGVhY2ggdGFyZ2V0IGluZGl2aWR1YWxseSwgdGhlIHR3ZWVuIHdvdWxkIHRlY2huaWNhbGx5IHN0aWxsIHJlbWFpbiBhY3RpdmUgYW5kIGZpcmUgaXRzIG9uQ29tcGxldGUgZXZlbiB0aG91Z2ggdGhlcmUgYXJlbid0IGFueSBtb3JlIHByb3BlcnRpZXMgdHdlZW5pbmcuXG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBUd2Vlbi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMsIGFyZ3VtZW50c1syXSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uZGVsYXllZENhbGwgPSBmdW5jdGlvbiBkZWxheWVkQ2FsbChkZWxheSwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKGNhbGxiYWNrLCAwLCB7XG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgb25Db21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvblJldmVyc2VDb21wbGV0ZTogY2FsbGJhY2ssXG4gICAgICBvbkNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICBvblJldmVyc2VDb21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgY2FsbGJhY2tTY29wZTogc2NvcGVcbiAgICB9KTsgLy8gd2UgbXVzdCB1c2Ugb25SZXZlcnNlQ29tcGxldGUgdG9vIGZvciB0aGluZ3MgbGlrZSB0aW1lbGluZS5hZGQoKCkgPT4gey4uLn0pIHdoaWNoIHNob3VsZCBiZSB0cmlnZ2VyZWQgaW4gQk9USCBkaXJlY3Rpb25zIChmb3J3YXJkIGFuZCByZXZlcnNlKVxuICB9O1xuXG4gIFR3ZWVuLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzKTtcbiAgfTtcblxuICBUd2Vlbi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycykge1xuICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzKTtcbiAgfTtcblxuICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSk7XG4gIH07XG5cbiAgcmV0dXJuIFR3ZWVuO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVHdlZW4ucHJvdG90eXBlLCB7XG4gIF90YXJnZXRzOiBbXSxcbiAgX2xhenk6IDAsXG4gIF9zdGFydEF0OiAwLFxuICBfb3A6IDAsXG4gIF9vbkluaXQ6IDBcbn0pOyAvL2FkZCB0aGUgcGVydGluZW50IHRpbWVsaW5lIG1ldGhvZHMgdG8gVHdlZW4gaW5zdGFuY2VzIHNvIHRoYXQgdXNlcnMgY2FuIGNoYWluIGNvbnZlbmllbnRseSBhbmQgY3JlYXRlIGEgdGltZWxpbmUgYXV0b21hdGljYWxseS4gKHJlbW92ZWQgZHVlIHRvIGNvbmNlcm5zIHRoYXQgaXQnZCB1bHRpbWF0ZWx5IGFkZCB0byBtb3JlIGNvbmZ1c2lvbiBlc3BlY2lhbGx5IGZvciBiZWdpbm5lcnMpXG4vLyBfZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxzZXQsY2FsbCxhZGQsYWRkTGFiZWwsYWRkUGF1c2VcIiwgbmFtZSA9PiB7XG4vLyBcdFR3ZWVuLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuLy8gXHRcdGxldCB0bCA9IG5ldyBUaW1lbGluZSgpO1xuLy8gXHRcdHJldHVybiBfYWRkVG9UaW1lbGluZSh0bCwgdGhpcylbbmFtZV0uYXBwbHkodGwsIHRvQXJyYXkoYXJndW1lbnRzKSk7XG4vLyBcdH1cbi8vIH0pO1xuLy9mb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gTGV2ZXJhZ2UgdGhlIHRpbWVsaW5lIGNhbGxzLlxuXG5cbl9mb3JFYWNoTmFtZShcInN0YWdnZXJUbyxzdGFnZ2VyRnJvbSxzdGFnZ2VyRnJvbVRvXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSgpLFxuICAgICAgICBwYXJhbXMgPSBfc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICByZXR1cm4gdGxbbmFtZV0uYXBwbHkodGwsIHBhcmFtcyk7XG4gIH07XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUFJPUFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9zZXR0ZXJQbGFpbiA9IGZ1bmN0aW9uIF9zZXR0ZXJQbGFpbih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xufSxcbiAgICBfc2V0dGVyRnVuYyA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckZ1bmNXaXRoUGFyYW0gPSBmdW5jdGlvbiBfc2V0dGVyRnVuY1dpdGhQYXJhbSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XShkYXRhLmZwLCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfc2V0dGVyQXR0cmlidXRlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuc2V0QXR0cmlidXRlKHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9nZXRTZXR0ZXIgPSBmdW5jdGlvbiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHRhcmdldFtwcm9wZXJ0eV0pID8gX3NldHRlckZ1bmMgOiBfaXNVbmRlZmluZWQodGFyZ2V0W3Byb3BlcnR5XSkgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZSA/IF9zZXR0ZXJBdHRyaWJ1dGUgOiBfc2V0dGVyUGxhaW47XG59LFxuICAgIF9yZW5kZXJQbGFpbiA9IGZ1bmN0aW9uIF9yZW5kZXJQbGFpbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwMDApIC8gMTAwMDAwMCwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJCb29sZWFuID0gZnVuY3Rpb24gX3JlbmRlckJvb2xlYW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCAhIShkYXRhLnMgKyBkYXRhLmMgKiByYXRpbyksIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQ29tcGxleFN0cmluZyA9IGZ1bmN0aW9uIF9yZW5kZXJDb21wbGV4U3RyaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0LFxuICAgICAgcyA9IFwiXCI7XG5cbiAgaWYgKCFyYXRpbyAmJiBkYXRhLmIpIHtcbiAgICAvL2IgPSBiZWdpbm5pbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuYjtcbiAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSAmJiBkYXRhLmUpIHtcbiAgICAvL2UgPSBlbmRpbmcgc3RyaW5nXG4gICAgcyA9IGRhdGEuZTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzOyAvL3dlIHVzZSB0aGUgXCJwXCIgcHJvcGVydHkgZm9yIHRoZSB0ZXh0IGluYmV0d2VlbiAobGlrZSBhIHN1ZmZpeCkuIEFuZCBpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBsZXggc3RyaW5nLCB0aGUgbW9kaWZpZXIgKG0pIGlzIHR5cGljYWxseSBqdXN0IE1hdGgucm91bmQoKSwgbGlrZSBmb3IgUkdCIGNvbG9ycy5cblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICBzICs9IGRhdGEuYzsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIGNodW5rIG9mIG5vbi1udW1lcmljIHRleHQuXG4gIH1cblxuICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3JlbmRlclByb3BUd2VlbnMocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxufSxcbiAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQucCA9PT0gcHJvcGVydHkgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQpO1xuICAgIHB0ID0gbmV4dDtcbiAgfVxufSxcbiAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gIHZhciBwdCA9IHRoaXMuX3B0LFxuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nLFxuICAgICAgbmV4dDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG5cbiAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICB9IGVsc2UgaWYgKCFwdC5kZXApIHtcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuICFoYXNOb25EZXBlbmRlbnRSZW1haW5pbmc7XG59LFxuICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIGRhdGEubVNldCh0YXJnZXQsIHByb3BlcnR5LCBkYXRhLm0uY2FsbChkYXRhLnR3ZWVuLCB2YWx1ZSwgZGF0YS5tdCksIGRhdGEpO1xufSxcbiAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgdmFyIHB0ID0gcGFyZW50Ll9wdCxcbiAgICAgIG5leHQsXG4gICAgICBwdDIsXG4gICAgICBmaXJzdCxcbiAgICAgIGxhc3Q7IC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIGRvIHRoZWlyIHdvcmsgYWZ0ZXIgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIHdlcmUgY3JlYXRlZCAobGlrZSBSb3VuZFByb3BzUGx1Z2luIGFuZCBNb2RpZmllcnNQbHVnaW4pXG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0MiA9IGZpcnN0O1xuXG4gICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgcHQyID0gcHQyLl9uZXh0O1xuICAgIH1cblxuICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0ID0gcHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9uZXh0ID0gcHQyKSB7XG4gICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IHB0O1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHBhcmVudC5fcHQgPSBmaXJzdDtcbn07IC8vUHJvcFR3ZWVuIGtleTogdCA9IHRhcmdldCwgcCA9IHByb3AsIHIgPSByZW5kZXJlciwgZCA9IGRhdGEsIHMgPSBzdGFydCwgYyA9IGNoYW5nZSwgb3AgPSBvdmVyd3JpdGVQcm9wZXJ0eSAoT05MWSBwb3B1bGF0ZWQgd2hlbiBpdCdzIGRpZmZlcmVudCB0aGFuIHApLCBwciA9IHByaW9yaXR5LCBfbmV4dC9fcHJldiBmb3IgdGhlIGxpbmtlZCBsaXN0IHNpYmxpbmdzLCBzZXQgPSBzZXR0ZXIsIG0gPSBtb2RpZmllciwgbVNldCA9IG1vZGlmaWVyU2V0dGVyICh0aGUgb3JpZ2luYWwgc2V0dGVyLCBiZWZvcmUgYSBtb2RpZmllciB3YXMgYWRkZWQpXG5cblxuZXhwb3J0IHZhciBQcm9wVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9wVHdlZW4obmV4dCwgdGFyZ2V0LCBwcm9wLCBzdGFydCwgY2hhbmdlLCByZW5kZXJlciwgZGF0YSwgc2V0dGVyLCBwcmlvcml0eSkge1xuICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICB0aGlzLnMgPSBzdGFydDtcbiAgICB0aGlzLmMgPSBjaGFuZ2U7XG4gICAgdGhpcy5wID0gcHJvcDtcbiAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgdGhpcy5kID0gZGF0YSB8fCB0aGlzO1xuICAgIHRoaXMuc2V0ID0gc2V0dGVyIHx8IF9zZXR0ZXJQbGFpbjtcbiAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcblxuICAgIGlmIChuZXh0KSB7XG4gICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5tb2RpZmllciA9IGZ1bmN0aW9uIG1vZGlmaWVyKGZ1bmMsIHR3ZWVuLCB0YXJnZXQpIHtcbiAgICB0aGlzLm1TZXQgPSB0aGlzLm1TZXQgfHwgdGhpcy5zZXQ7IC8vaW4gY2FzZSBpdCB3YXMgYWxyZWFkeSBzZXQgKGEgUHJvcFR3ZWVuIGNhbiBvbmx5IGhhdmUgb25lIG1vZGlmaWVyKVxuXG4gICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgIHRoaXMubSA9IGZ1bmM7XG4gICAgdGhpcy5tdCA9IHRhcmdldDsgLy9tb2RpZmllciB0YXJnZXRcblxuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcbiAgfTtcblxuICByZXR1cm4gUHJvcFR3ZWVuO1xufSgpOyAvL0luaXRpYWxpemF0aW9uIHRhc2tzXG5cbl9mb3JFYWNoTmFtZShfY2FsbGJhY2tOYW1lcyArIFwicGFyZW50LGR1cmF0aW9uLGVhc2UsZGVsYXksb3ZlcndyaXRlLHJ1bkJhY2t3YXJkcyxzdGFydEF0LHlveW8saW1tZWRpYXRlUmVuZGVyLHJlcGVhdCxyZXBlYXREZWxheSxkYXRhLHBhdXNlZCxyZXZlcnNlZCxsYXp5LGNhbGxiYWNrU2NvcGUsc3RyaW5nRmlsdGVyLGlkLHlveW9FYXNlLHN0YWdnZXIsaW5oZXJpdCxyZXBlYXRSZWZyZXNoLGtleWZyYW1lcyxhdXRvUmV2ZXJ0LHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbn0pO1xuXG5fZ2xvYmFscy5Ud2Vlbk1heCA9IF9nbG9iYWxzLlR3ZWVuTGl0ZSA9IFR3ZWVuO1xuX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbl9nbG9iYWxUaW1lbGluZSA9IG5ldyBUaW1lbGluZSh7XG4gIHNvcnRDaGlsZHJlbjogZmFsc2UsXG4gIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gIGF1dG9SZW1vdmVDaGlsZHJlbjogdHJ1ZSxcbiAgaWQ6IFwicm9vdFwiLFxuICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxufSk7XG5fY29uZmlnLnN0cmluZ0ZpbHRlciA9IF9jb2xvclN0cmluZ0ZpbHRlcjtcblxudmFyIF9tZWRpYSA9IFtdLFxuICAgIF9saXN0ZW5lcnMgPSB7fSxcbiAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgIF9sYXN0TWVkaWFUaW1lID0gMCxcbiAgICBfY29udGV4dElEID0gMCxcbiAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICByZXR1cm4gKF9saXN0ZW5lcnNbdHlwZV0gfHwgX2VtcHR5QXJyYXkpLm1hcChmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmKCk7XG4gIH0pO1xufSxcbiAgICBfb25NZWRpYUNoYW5nZSA9IGZ1bmN0aW9uIF9vbk1lZGlhQ2hhbmdlKCkge1xuICB2YXIgdGltZSA9IERhdGUubm93KCksXG4gICAgICBtYXRjaGVzID0gW107XG5cbiAgaWYgKHRpbWUgLSBfbGFzdE1lZGlhVGltZSA+IDIpIHtcbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhSW5pdFwiKTtcblxuICAgIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgcXVlcmllcyA9IGMucXVlcmllcyxcbiAgICAgICAgICBjb25kaXRpb25zID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgYW55TWF0Y2gsXG4gICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgZm9yIChwIGluIHF1ZXJpZXMpIHtcbiAgICAgICAgbWF0Y2ggPSBfd2luLm1hdGNoTWVkaWEocXVlcmllc1twXSkubWF0Y2hlczsgLy8gRmlyZWZveCBkb2Vzbid0IHVwZGF0ZSB0aGUgXCJtYXRjaGVzXCIgcHJvcGVydHkgb2YgdGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBjb3JyZWN0bHkgLSBpdCBvbmx5IGRvZXMgc28gYXMgaXQgY2FsbHMgaXRzIGNoYW5nZSBoYW5kbGVyIC0gc28gd2UgbXVzdCByZS1jcmVhdGUgYSBtZWRpYSBxdWVyeSBoZXJlIHRvIGVuc3VyZSBpdCdzIGFjY3VyYXRlLlxuXG4gICAgICAgIG1hdGNoICYmIChhbnlNYXRjaCA9IDEpO1xuXG4gICAgICAgIGlmIChtYXRjaCAhPT0gY29uZGl0aW9uc1twXSkge1xuICAgICAgICAgIGNvbmRpdGlvbnNbcF0gPSBtYXRjaDtcbiAgICAgICAgICB0b2dnbGVkID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9nZ2xlZCkge1xuICAgICAgICBjLnJldmVydCgpO1xuICAgICAgICBhbnlNYXRjaCAmJiBtYXRjaGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpO1xuXG4gICAgbWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5vbk1hdGNoKGMsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIHJldHVybiBjLmFkZChudWxsLCBmdW5jKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9sYXN0TWVkaWFUaW1lID0gdGltZTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFcIik7XG4gIH1cbn07XG5cbnZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzY29wZSAmJiBzZWxlY3RvcihzY29wZSk7XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5fciA9IFtdOyAvLyByZXR1cm5lZC9jbGVhbnVwIGZ1bmN0aW9uc1xuXG4gICAgdGhpcy5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgdGhpcy5pZCA9IF9jb250ZXh0SUQrKzsgLy8gdG8gd29yayBhcm91bmQgaXNzdWVzIHRoYXQgZnJhbWV3b3JrcyBsaWtlIFZ1ZSBjYXVzZSBieSBtYWtpbmcgdGhpbmdzIGludG8gUHJveGllcyB3aGljaCBtYWtlIGl0IGltcG9zc2libGUgdG8gZG8gc29tZXRoaW5nIGxpa2UgX21lZGlhLmluZGV4T2YodGhpcykgYmVjYXVzZSBcInRoaXNcIiB3b3VsZCBubyBsb25nZXIgcmVmZXIgdG8gdGhlIENvbnRleHQgaW5zdGFuY2UgaXRzZWxmIC0gaXQnZCByZWZlciB0byBhIFByb3h5ISBXZSBuZWVkZWQgYSB3YXkgdG8gaWRlbnRpZnkgdGhlIGNvbnRleHQgdW5pcXVlbHlcblxuICAgIGZ1bmMgJiYgdGhpcy5hZGQoZnVuYyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IENvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzUuYWRkID0gZnVuY3Rpb24gYWRkKG5hbWUsIGZ1bmMsIHNjb3BlKSB7XG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIGlmIHdlIG5lZWQgdGhlIGFiaWxpdHkgdG8gYWRkKCkgYW4gYW5pbWF0aW9uIHRvIGEgY29udGV4dCBhbmQgZm9yIHdoYXRldmVyIHJlYXNvbiBjYW5ub3QgY3JlYXRlIHRoYXQgYW5pbWF0aW9uIGluc2lkZSBvZiBhIGNvbnRleHQuYWRkKCgpID0+IHsuLi59KSBmdW5jdGlvbi5cbiAgICAvLyBpZiAobmFtZSAmJiBfaXNGdW5jdGlvbihuYW1lLnJldmVydCkpIHtcbiAgICAvLyBcdHRoaXMuZGF0YS5wdXNoKG5hbWUpO1xuICAgIC8vIFx0cmV0dXJuIChuYW1lLl9jdHggPSB0aGlzKTtcbiAgICAvLyB9XG4gICAgaWYgKF9pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICBzY29wZSA9IGZ1bmM7XG4gICAgICBmdW5jID0gbmFtZTtcbiAgICAgIG5hbWUgPSBfaXNGdW5jdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgdmFyIHByZXYgPSBfY29udGV4dCxcbiAgICAgICAgICBwcmV2U2VsZWN0b3IgPSBzZWxmLnNlbGVjdG9yLFxuICAgICAgICAgIHJlc3VsdDtcbiAgICAgIHByZXYgJiYgcHJldiAhPT0gc2VsZiAmJiBwcmV2LmRhdGEucHVzaChzZWxmKTtcbiAgICAgIHNjb3BlICYmIChzZWxmLnNlbGVjdG9yID0gc2VsZWN0b3Ioc2NvcGUpKTtcbiAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIF9pc0Z1bmN0aW9uKHJlc3VsdCkgJiYgc2VsZi5fci5wdXNoKHJlc3VsdCk7XG4gICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICBzZWxmLnNlbGVjdG9yID0gcHJldlNlbGVjdG9yO1xuICAgICAgc2VsZi5pc1JldmVydGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBzZWxmLmxhc3QgPSBmO1xuICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZiwgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZWxmLmFkZChudWxsLCBmdW5jKTtcbiAgICB9KSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gIH07XG5cbiAgX3Byb3RvNS5pZ25vcmUgPSBmdW5jdGlvbiBpZ25vcmUoZnVuYykge1xuICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgX2NvbnRleHQgPSBudWxsO1xuICAgIGZ1bmModGhpcyk7XG4gICAgX2NvbnRleHQgPSBwcmV2O1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VHdlZW5zID0gZnVuY3Rpb24gZ2V0VHdlZW5zKCkge1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ29udGV4dCA/IGEucHVzaC5hcHBseShhLCBlLmdldFR3ZWVucygpKSA6IGUgaW5zdGFuY2VvZiBUd2VlbiAmJiAhKGUucGFyZW50ICYmIGUucGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIpICYmIGEucHVzaChlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IF90aGlzNC5nZXRUd2VlbnMoKSxcbiAgICAgICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICB0O1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAvLyBGbGlwIHBsdWdpbiB0d2VlbnMgYXJlIHZlcnkgZGlmZmVyZW50IGluIHRoYXQgdGhleSBzaG91bGQgYWN0dWFsbHkgYmUgcHVzaGVkIHRvIHRoZWlyIGVuZC4gVGhlIHBsdWdpbiByZXBsYWNlcyB0aGUgdGltZWxpbmUncyAucmV2ZXJ0KCkgbWV0aG9kIHRvIGRvIGV4YWN0bHkgdGhhdC4gQnV0IHdlIGFsc28gbmVlZCB0byByZW1vdmUgYW55IG9mIHRob3NlIG5lc3RlZCB0d2VlbnMgaW5zaWRlIHRoZSBmbGlwIHRpbWVsaW5lIHNvIHRoYXQgdGhleSBkb24ndCBnZXQgaW5kaXZpZHVhbGx5IHJldmVydGVkLlxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0LmRhdGEgPT09IFwiaXNGbGlwXCIpIHtcbiAgICAgICAgICAgIHQucmV2ZXJ0KCk7XG4gICAgICAgICAgICB0LmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICAgICAgICByZXR1cm4gdHdlZW5zLnNwbGljZSh0d2VlbnMuaW5kZXhPZih0d2VlbiksIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHNhdmUgYXMgYW4gb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGNhY2hlIHRoZSBnbG9iYWxUaW1lIGZvciBlYWNoIHR3ZWVuIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIGR1cmluZyB0aGUgc29ydFxuXG5cbiAgICAgICAgdHdlZW5zLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnOiB0Ll9kdXIgfHwgdC5fZGVsYXkgfHwgdC5fc2F0ICYmICF0Ll9zYXQudmFycy5pbW1lZGlhdGVSZW5kZXIgPyB0Lmdsb2JhbFRpbWUoMCkgOiAtSW5maW5pdHksXG4gICAgICAgICAgICB0OiB0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLUluZmluaXR5O1xuICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8udC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgfSk7IC8vIG5vdGU6IGFsbCBvZiB0aGUgX3N0YXJ0QXQgdHdlZW5zIHNob3VsZCBiZSByZXZlcnRlZCBpbiByZXZlcnNlIG9yZGVyIHRoYXQgdGhleSB3ZXJlIGNyZWF0ZWQsIGFuZCB0aGV5J2xsIGFsbCBoYXZlIHRoZSBzYW1lIGdsb2JhbFRpbWUgKC0xKSBzbyB0aGUgXCIgfHwgLTFcIiBpbiB0aGUgc29ydCBrZWVwcyB0aGUgb3JkZXIgcHJvcGVybHkuXG5cbiAgICAgICAgaSA9IF90aGlzNC5kYXRhLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGxvb3AgYmFja3dhcmRzIHNvIHRoYXQsIGZvciBleGFtcGxlLCBTcGxpdFRleHRzIHRoYXQgd2VyZSBjcmVhdGVkIGxhdGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQgZ2V0IHJldmVydGVkIGZpcnN0XG4gICAgICAgICAgdCA9IF90aGlzNC5kYXRhW2ldO1xuXG4gICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgICAgICAgaWYgKHQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgICAgICAgICB0LnNjcm9sbFRyaWdnZXIgJiYgdC5zY3JvbGxUcmlnZ2VyLnJldmVydCgpO1xuICAgICAgICAgICAgICB0LmtpbGwoKTsgLy8gZG9uJ3QgcmV2ZXJ0KCkgdGhlIHRpbWVsaW5lIGJlY2F1c2UgdGhhdCdzIGR1cGxpY2F0aW5nIGVmZm9ydHMgc2luY2Ugd2UgYWxyZWFkeSByZXZlcnRlZCBhbGwgdGhlIHR3ZWVuc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAhKHQgaW5zdGFuY2VvZiBUd2VlbikgJiYgdC5yZXZlcnQgJiYgdC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczQuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBmKHJldmVydCwgX3RoaXM0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXM0LmlzUmV2ZXJ0ZWQgPSB0cnVlO1xuICAgICAgfSkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgLy8gcHJldmlvdXNseSwgd2UgY2hlY2tlZCBfbWVkaWEuaW5kZXhPZih0aGlzKSwgYnV0IHNvbWUgZnJhbWV3b3JrcyBsaWtlIFZ1ZSBlbmZvcmNlIFByb3h5IG9iamVjdHMgdGhhdCBtYWtlIGl0IGltcG9zc2libGUgdG8gZ2V0IHRoZSBwcm9wZXIgcmVzdWx0IHRoYXQgd2F5LCBzbyB3ZSBtdXN0IHVzZSBhIHVuaXF1ZSBJRCBudW1iZXIgaW5zdGVhZC5cbiAgICAgICAgX21lZGlhW2ldLmlkID09PSB0aGlzLmlkICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIGtpbGxXaXRoQ2xlYW51cCgpIHtcbiAgLy8gXHR0aGlzLmtpbGwoKTtcbiAgLy8gXHR0aGlzLl9yLmZvckVhY2goZiA9PiBmKGZhbHNlLCB0aGlzKSk7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIF9jb250ZXh0ICYmIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG82ID0gTWF0Y2hNZWRpYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNi5hZGQgPSBmdW5jdGlvbiBhZGQoY29uZGl0aW9ucywgZnVuYywgc2NvcGUpIHtcbiAgICBfaXNPYmplY3QoY29uZGl0aW9ucykgfHwgKGNvbmRpdGlvbnMgPSB7XG4gICAgICBtYXRjaGVzOiBjb25kaXRpb25zXG4gICAgfSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgwLCBzY29wZSB8fCB0aGlzLnNjb3BlKSxcbiAgICAgICAgY29uZCA9IGNvbnRleHQuY29uZGl0aW9ucyA9IHt9LFxuICAgICAgICBtcSxcbiAgICAgICAgcCxcbiAgICAgICAgYWN0aXZlO1xuICAgIF9jb250ZXh0ICYmICFjb250ZXh0LnNlbGVjdG9yICYmIChjb250ZXh0LnNlbGVjdG9yID0gX2NvbnRleHQuc2VsZWN0b3IpOyAvLyBpbiBjYXNlIGEgY29udGV4dCBpcyBjcmVhdGVkIGluc2lkZSBhIGNvbnRleHQuIExpa2UgYSBnc2FwLm1hdGNoTWVkaWEoKSB0aGF0J3MgaW5zaWRlIGEgc2NvcGVkIGdzYXAuY29udGV4dCgpXG5cbiAgICB0aGlzLmNvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgZnVuYyA9IGNvbnRleHQuYWRkKFwib25NYXRjaFwiLCBmdW5jKTtcbiAgICBjb250ZXh0LnF1ZXJpZXMgPSBjb25kaXRpb25zO1xuXG4gICAgZm9yIChwIGluIGNvbmRpdGlvbnMpIHtcbiAgICAgIGlmIChwID09PSBcImFsbFwiKSB7XG4gICAgICAgIGFjdGl2ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtcSA9IF93aW4ubWF0Y2hNZWRpYShjb25kaXRpb25zW3BdKTtcblxuICAgICAgICBpZiAobXEpIHtcbiAgICAgICAgICBfbWVkaWEuaW5kZXhPZihjb250ZXh0KSA8IDAgJiYgX21lZGlhLnB1c2goY29udGV4dCk7XG4gICAgICAgICAgKGNvbmRbcF0gPSBtcS5tYXRjaGVzKSAmJiAoYWN0aXZlID0gMSk7XG4gICAgICAgICAgbXEuYWRkTGlzdGVuZXIgPyBtcS5hZGRMaXN0ZW5lcihfb25NZWRpYUNoYW5nZSkgOiBtcS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIF9vbk1lZGlhQ2hhbmdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFjdGl2ZSAmJiBmdW5jKGNvbnRleHQsIGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5hZGQobnVsbCwgZik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gcmVmcmVzaCgpIHtcbiAgLy8gXHRsZXQgdGltZSA9IF9sYXN0TWVkaWFUaW1lLFxuICAvLyBcdFx0bWVkaWEgPSBfbWVkaWE7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSAtMTtcbiAgLy8gXHRfbWVkaWEgPSB0aGlzLmNvbnRleHRzO1xuICAvLyBcdF9vbk1lZGlhQ2hhbmdlKCk7XG4gIC8vIFx0X2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuICAvLyBcdF9tZWRpYSA9IG1lZGlhO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG82LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICBfcHJvdG82LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCkge1xuICAgIHRoaXMuY29udGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMua2lsbChyZXZlcnQsIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNYXRjaE1lZGlhO1xufSgpO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBHU0FQXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxudmFyIF9nc2FwID0ge1xuICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW4oKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgIHJldHVybiBfY3JlYXRlUGx1Z2luKGNvbmZpZyk7XG4gICAgfSk7XG4gIH0sXG4gIHRpbWVsaW5lOiBmdW5jdGlvbiB0aW1lbGluZSh2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lbGluZSh2YXJzKTtcbiAgfSxcbiAgZ2V0VHdlZW5zT2Y6IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpO1xuICB9LFxuICBnZXRQcm9wZXJ0eTogZnVuY3Rpb24gZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgIF9pc1N0cmluZyh0YXJnZXQpICYmICh0YXJnZXQgPSB0b0FycmF5KHRhcmdldClbMF0pOyAvL2luIGNhc2Ugc2VsZWN0b3IgdGV4dCBvciBhbiBhcnJheSBpcyBwYXNzZWQgaW5cblxuICAgIHZhciBnZXR0ZXIgPSBfZ2V0Q2FjaGUodGFyZ2V0IHx8IHt9KS5nZXQsXG4gICAgICAgIGZvcm1hdCA9IHVuaXQgPyBfcGFzc1Rocm91Z2ggOiBfbnVtZXJpY0lmUG9zc2libGU7XG5cbiAgICB1bml0ID09PSBcIm5hdGl2ZVwiICYmICh1bml0ID0gXCJcIik7XG4gICAgcmV0dXJuICF0YXJnZXQgPyB0YXJnZXQgOiAhcHJvcGVydHkgPyBmdW5jdGlvbiAocHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICAgIHJldHVybiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICAgIH0gOiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICB9LFxuICBxdWlja1NldHRlcjogZnVuY3Rpb24gcXVpY2tTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkge1xuICAgIHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KTtcblxuICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIHNldHRlcnMgPSB0YXJnZXQubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBnc2FwLnF1aWNrU2V0dGVyKHQsIHByb3BlcnR5LCB1bml0KTtcbiAgICAgIH0pLFxuICAgICAgICAgIGwgPSBzZXR0ZXJzLmxlbmd0aDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSBsO1xuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBzZXR0ZXJzW2ldKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0YXJnZXRbMF0gfHwge307XG5cbiAgICB2YXIgUGx1Z2luID0gX3BsdWdpbnNbcHJvcGVydHldLFxuICAgICAgICBjYWNoZSA9IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICBwID0gY2FjaGUuaGFybmVzcyAmJiAoY2FjaGUuaGFybmVzcy5hbGlhc2VzIHx8IHt9KVtwcm9wZXJ0eV0gfHwgcHJvcGVydHksXG4gICAgICAgIC8vIGluIGNhc2UgaXQncyBhbiBhbGlhcywgbGlrZSBcInJvdGF0ZVwiIGZvciBcInJvdGF0aW9uXCIuXG4gICAgc2V0dGVyID0gUGx1Z2luID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgcCA9IG5ldyBQbHVnaW4oKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCA9IDA7XG4gICAgICBwLmluaXQodGFyZ2V0LCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIF9xdWlja1R3ZWVuLCAwLCBbdGFyZ2V0XSk7XG4gICAgICBwLnJlbmRlcigxLCBwKTtcbiAgICAgIF9xdWlja1R3ZWVuLl9wdCAmJiBfcmVuZGVyUHJvcFR3ZWVucygxLCBfcXVpY2tUd2Vlbik7XG4gICAgfSA6IGNhY2hlLnNldCh0YXJnZXQsIHApO1xuXG4gICAgcmV0dXJuIFBsdWdpbiA/IHNldHRlciA6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHNldHRlcih0YXJnZXQsIHAsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgY2FjaGUsIDEpO1xuICAgIH07XG4gIH0sXG4gIHF1aWNrVG86IGZ1bmN0aW9uIHF1aWNrVG8odGFyZ2V0LCBwcm9wZXJ0eSwgdmFycykge1xuICAgIHZhciBfc2V0RGVmYXVsdHMyO1xuXG4gICAgdmFyIHR3ZWVuID0gZ3NhcC50byh0YXJnZXQsIF9zZXREZWZhdWx0cygoX3NldERlZmF1bHRzMiA9IHt9LCBfc2V0RGVmYXVsdHMyW3Byb3BlcnR5XSA9IFwiKz0wLjFcIiwgX3NldERlZmF1bHRzMi5wYXVzZWQgPSB0cnVlLCBfc2V0RGVmYXVsdHMyLnN0YWdnZXIgPSAwLCBfc2V0RGVmYXVsdHMyKSwgdmFycyB8fCB7fSkpLFxuICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyh2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgICAgcmV0dXJuIHR3ZWVuLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTtcbiAgICB9O1xuXG4gICAgZnVuYy50d2VlbiA9IHR3ZWVuO1xuICAgIHJldHVybiBmdW5jO1xuICB9LFxuICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIHRydWUpLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgIHZhbHVlICYmIHZhbHVlLmVhc2UgJiYgKHZhbHVlLmVhc2UgPSBfcGFyc2VFYXNlKHZhbHVlLmVhc2UsIF9kZWZhdWx0cy5lYXNlKSk7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICB9LFxuICByZWdpc3RlckVmZmVjdDogZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoX3JlZjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdCxcbiAgICAgICAgcGx1Z2lucyA9IF9yZWYzLnBsdWdpbnMsXG4gICAgICAgIGRlZmF1bHRzID0gX3JlZjMuZGVmYXVsdHMsXG4gICAgICAgIGV4dGVuZFRpbWVsaW5lID0gX3JlZjMuZXh0ZW5kVGltZWxpbmU7XG4gICAgKHBsdWdpbnMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgIH0pO1xuXG4gICAgX2VmZmVjdHNbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgdGwpIHtcbiAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgIH07XG5cbiAgICBpZiAoZXh0ZW5kVGltZWxpbmUpIHtcbiAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIHJlZ2lzdGVyRWFzZTogZnVuY3Rpb24gcmVnaXN0ZXJFYXNlKG5hbWUsIGVhc2UpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gIH0sXG4gIHBhcnNlRWFzZTogZnVuY3Rpb24gcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICB9LFxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgfSxcbiAgZXhwb3J0Um9vdDogZnVuY3Rpb24gZXhwb3J0Um9vdCh2YXJzLCBpbmNsdWRlRGVsYXllZENhbGxzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQ7XG4gICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgdGwuX2RwID0gMDsgLy9vdGhlcndpc2UgaXQnbGwgZ2V0IHJlLWFjdGl2YXRlZCB3aGVuIGFkZGluZyBjaGlsZHJlbiBhbmQgYmUgcmUtaW50cm9kdWNlZCBpbnRvIF9nbG9iYWxUaW1lbGluZSdzIGxpbmtlZCBsaXN0ICh0aGVuIGFkZGVkIHRvIGl0c2VsZikuXG5cbiAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRsLCBjaGlsZCwgY2hpbGQuX3N0YXJ0IC0gY2hpbGQuX2RlbGF5KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgcmV0dXJuIHRsO1xuICB9LFxuICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIGZ1bmMgPyBuZXcgQ29udGV4dChmdW5jLCBzY29wZSkgOiBfY29udGV4dDtcbiAgfSxcbiAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gbWF0Y2hNZWRpYShzY29wZSkge1xuICAgIHJldHVybiBuZXcgTWF0Y2hNZWRpYShzY29wZSk7XG4gIH0sXG4gIG1hdGNoTWVkaWFSZWZyZXNoOiBmdW5jdGlvbiBtYXRjaE1lZGlhUmVmcmVzaCgpIHtcbiAgICByZXR1cm4gX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBjb25kID0gYy5jb25kaXRpb25zLFxuICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgIHA7XG5cbiAgICAgIGZvciAocCBpbiBjb25kKSB7XG4gICAgICAgIGlmIChjb25kW3BdKSB7XG4gICAgICAgICAgY29uZFtwXSA9IGZhbHNlO1xuICAgICAgICAgIGZvdW5kID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3VuZCAmJiBjLnJldmVydCgpO1xuICAgIH0pIHx8IF9vbk1lZGlhQ2hhbmdlKCk7XG4gIH0sXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0gfHwgKF9saXN0ZW5lcnNbdHlwZV0gPSBbXSk7XG4gICAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbiAgfSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgICAgaSA9IGEgJiYgYS5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICBpID49IDAgJiYgYS5zcGxpY2UoaSwgMSk7XG4gIH0sXG4gIHV0aWxzOiB7XG4gICAgd3JhcDogd3JhcCxcbiAgICB3cmFwWW95bzogd3JhcFlveW8sXG4gICAgZGlzdHJpYnV0ZTogZGlzdHJpYnV0ZSxcbiAgICByYW5kb206IHJhbmRvbSxcbiAgICBzbmFwOiBzbmFwLFxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplLFxuICAgIGdldFVuaXQ6IGdldFVuaXQsXG4gICAgY2xhbXA6IGNsYW1wLFxuICAgIHNwbGl0Q29sb3I6IHNwbGl0Q29sb3IsXG4gICAgdG9BcnJheTogdG9BcnJheSxcbiAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgbWFwUmFuZ2U6IG1hcFJhbmdlLFxuICAgIHBpcGU6IHBpcGUsXG4gICAgdW5pdGl6ZTogdW5pdGl6ZSxcbiAgICBpbnRlcnBvbGF0ZTogaW50ZXJwb2xhdGUsXG4gICAgc2h1ZmZsZTogc2h1ZmZsZVxuICB9LFxuICBpbnN0YWxsOiBfaW5zdGFsbCxcbiAgZWZmZWN0czogX2VmZmVjdHMsXG4gIHRpY2tlcjogX3RpY2tlcixcbiAgdXBkYXRlUm9vdDogVGltZWxpbmUudXBkYXRlUm9vdCxcbiAgcGx1Z2luczogX3BsdWdpbnMsXG4gIGdsb2JhbFRpbWVsaW5lOiBfZ2xvYmFsVGltZWxpbmUsXG4gIGNvcmU6IHtcbiAgICBQcm9wVHdlZW46IFByb3BUd2VlbixcbiAgICBnbG9iYWxzOiBfYWRkR2xvYmFsLFxuICAgIFR3ZWVuOiBUd2VlbixcbiAgICBUaW1lbGluZTogVGltZWxpbmUsXG4gICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgZ2V0Q2FjaGU6IF9nZXRDYWNoZSxcbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW06IF9yZW1vdmVMaW5rZWRMaXN0SXRlbSxcbiAgICByZXZlcnRpbmc6IGZ1bmN0aW9uIHJldmVydGluZygpIHtcbiAgICAgIHJldHVybiBfcmV2ZXJ0aW5nO1xuICAgIH0sXG4gICAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dCh0b0FkZCkge1xuICAgICAgaWYgKHRvQWRkICYmIF9jb250ZXh0KSB7XG4gICAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0b0FkZCk7XG5cbiAgICAgICAgdG9BZGQuX2N0eCA9IF9jb250ZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgfSxcbiAgICBzdXBwcmVzc092ZXJ3cml0ZXM6IGZ1bmN0aW9uIHN1cHByZXNzT3ZlcndyaXRlcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9zdXBwcmVzc092ZXJ3cml0ZXMgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbl9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLGRlbGF5ZWRDYWxsLHNldCxraWxsVHdlZW5zT2ZcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9nc2FwW25hbWVdID0gVHdlZW5bbmFtZV07XG59KTtcblxuX3RpY2tlci5hZGQoVGltZWxpbmUudXBkYXRlUm9vdCk7XG5cbl9xdWlja1R3ZWVuID0gX2dzYXAudG8oe30sIHtcbiAgZHVyYXRpb246IDBcbn0pOyAvLyAtLS0tIEVYVFJBIFBMVUdJTlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIF9nZXRQbHVnaW5Qcm9wVHdlZW4gPSBmdW5jdGlvbiBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHBsdWdpbiwgcHJvcCkge1xuICB2YXIgcHQgPSBwbHVnaW4uX3B0O1xuXG4gIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wICYmIHB0Lm9wICE9PSBwcm9wICYmIHB0LmZwICE9PSBwcm9wKSB7XG4gICAgcHQgPSBwdC5fbmV4dDtcbiAgfVxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZE1vZGlmaWVycyA9IGZ1bmN0aW9uIF9hZGRNb2RpZmllcnModHdlZW4sIG1vZGlmaWVycykge1xuICB2YXIgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBwdDtcblxuICBmb3IgKHAgaW4gbW9kaWZpZXJzKSB7XG4gICAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcHQgPSB0d2Vlbi5fcHRMb29rdXBbaV1bcF07XG5cbiAgICAgIGlmIChwdCAmJiAocHQgPSBwdC5kKSkge1xuICAgICAgICBpZiAocHQuX3B0KSB7XG4gICAgICAgICAgLy8gaXMgYSBwbHVnaW5cbiAgICAgICAgICBwdCA9IF9nZXRQbHVnaW5Qcm9wVHdlZW4ocHQsIHApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHQgJiYgcHQubW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXJzW3BdLCB0d2VlbiwgdGFyZ2V0c1tpXSwgcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59LFxuICAgIF9idWlsZE1vZGlmaWVyUGx1Z2luID0gZnVuY3Rpb24gX2J1aWxkTW9kaWZpZXJQbHVnaW4obmFtZSwgbW9kaWZpZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd1ZhcnM6IDEsXG4gICAgLy9kb24ndCBwcmUtcHJvY2VzcyBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgb3IgXCJyYW5kb20oKVwiIHN0cmluZ3MuXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKSB7XG4gICAgICB0d2Vlbi5fb25Jbml0ID0gZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgIHZhciB0ZW1wLCBwO1xuXG4gICAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBfZm9yRWFjaE5hbWUodmFycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wW25hbWVdID0gMTtcbiAgICAgICAgICB9KTsgLy9pZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byByb3VuZFByb3BzLCBsaWtlIFwieCx5XCIsIHdlIHJvdW5kIHRvIHdob2xlIG51bWJlcnMuXG5cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vZGlmaWVyKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgIHRlbXBbcF0gPSBtb2RpZmllcih2YXJzW3BdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIF9hZGRNb2RpZmllcnModHdlZW4sIHZhcnMpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59OyAvL3JlZ2lzdGVyIGNvcmUgcGx1Z2luc1xuXG5cbmV4cG9ydCB2YXIgZ3NhcCA9IF9nc2FwLnJlZ2lzdGVyUGx1Z2luKHtcbiAgbmFtZTogXCJhdHRyXCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcCwgcHQsIHY7XG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIHYgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHApIHx8IFwiXCI7XG4gICAgICBwdCA9IHRoaXMuYWRkKHRhcmdldCwgXCJzZXRBdHRyaWJ1dGVcIiwgKHYgfHwgMCkgKyBcIlwiLCB2YXJzW3BdLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICBwdC5vcCA9IHA7XG4gICAgICBwdC5iID0gdjsgLy8gcmVjb3JkIHRoZSBiZWdpbm5pbmcgdmFsdWUgc28gd2UgY2FuIHJldmVydCgpXG5cbiAgICAgIHRoaXMuX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBfcmV2ZXJ0aW5nID8gcHQuc2V0KHB0LnQsIHB0LnAsIHB0LmIsIHB0KSA6IHB0LnIocmF0aW8sIHB0LmQpOyAvLyBpZiByZXZlcnRpbmcsIGdvIGJhY2sgdG8gdGhlIG9yaWdpbmFsIChwdC5iKVxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cbiAgfVxufSwge1xuICBuYW1lOiBcImVuZEFycmF5XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0sIDAsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cbiAgfVxufSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7IC8vdG8gcHJldmVudCB0aGUgY29yZSBwbHVnaW5zIGZyb20gYmVpbmcgZHJvcHBlZCB2aWEgYWdncmVzc2l2ZSB0cmVlIHNoYWtpbmcsIHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiB0aGlzIHdheS5cblxuVHdlZW4udmVyc2lvbiA9IFRpbWVsaW5lLnZlcnNpb24gPSBnc2FwLnZlcnNpb24gPSBcIjMuMTIuN1wiO1xuX2NvcmVSZWFkeSA9IDE7XG5fd2luZG93RXhpc3RzKCkgJiYgX3dha2UoKTtcbnZhciBQb3dlcjAgPSBfZWFzZU1hcC5Qb3dlcjAsXG4gICAgUG93ZXIxID0gX2Vhc2VNYXAuUG93ZXIxLFxuICAgIFBvd2VyMiA9IF9lYXNlTWFwLlBvd2VyMixcbiAgICBQb3dlcjMgPSBfZWFzZU1hcC5Qb3dlcjMsXG4gICAgUG93ZXI0ID0gX2Vhc2VNYXAuUG93ZXI0LFxuICAgIExpbmVhciA9IF9lYXNlTWFwLkxpbmVhcixcbiAgICBRdWFkID0gX2Vhc2VNYXAuUXVhZCxcbiAgICBDdWJpYyA9IF9lYXNlTWFwLkN1YmljLFxuICAgIFF1YXJ0ID0gX2Vhc2VNYXAuUXVhcnQsXG4gICAgUXVpbnQgPSBfZWFzZU1hcC5RdWludCxcbiAgICBTdHJvbmcgPSBfZWFzZU1hcC5TdHJvbmcsXG4gICAgRWxhc3RpYyA9IF9lYXNlTWFwLkVsYXN0aWMsXG4gICAgQmFjayA9IF9lYXNlTWFwLkJhY2ssXG4gICAgU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5TdGVwcGVkRWFzZSxcbiAgICBCb3VuY2UgPSBfZWFzZU1hcC5Cb3VuY2UsXG4gICAgU2luZSA9IF9lYXNlTWFwLlNpbmUsXG4gICAgRXhwbyA9IF9lYXNlTWFwLkV4cG8sXG4gICAgQ2lyYyA9IF9lYXNlTWFwLkNpcmM7XG5leHBvcnQgeyBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTtcbmV4cG9ydCB7IFR3ZWVuIGFzIFR3ZWVuTWF4LCBUd2VlbiBhcyBUd2VlbkxpdGUsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTWF4LCBUaW1lbGluZSBhcyBUaW1lbGluZUxpdGUsIGdzYXAgYXMgZGVmYXVsdCwgd3JhcCwgd3JhcFlveW8sIGRpc3RyaWJ1dGUsIHJhbmRvbSwgc25hcCwgbm9ybWFsaXplLCBnZXRVbml0LCBjbGFtcCwgc3BsaXRDb2xvciwgdG9BcnJheSwgc2VsZWN0b3IsIG1hcFJhbmdlLCBwaXBlLCB1bml0aXplLCBpbnRlcnBvbGF0ZSwgc2h1ZmZsZSB9OyAvL2V4cG9ydCBzb21lIGludGVybmFsIG1ldGhvZHMvb3JvamVjdHMgZm9yIHVzZSBpbiBDU1NQbHVnaW4gc28gdGhhdCB3ZSBjYW4gZXh0ZXJuYWxpemUgdGhhdCBmaWxlIGFuZCBhbGxvdyBjdXN0b20gYnVpbGRzIHRoYXQgZXhjbHVkZSBpdC5cblxuZXhwb3J0IHsgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfcmVwbGFjZVJhbmRvbSwgX2NoZWNrUGx1Z2luLCBfcGx1Z2lucywgX3RpY2tlciwgX2NvbmZpZywgX3JvdW5kTW9kaWZpZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBjcmVhdGVCYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VFYWNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKi9cbnZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VFYWNoO1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwidmFyIGJhc2VGb3IgPSByZXF1aXJlKCcuL19iYXNlRm9yJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvck93bjtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWF0Y2g7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYmFzZU1hdGNoZXMgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlcycpLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIHByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJdGVyYXRlZTtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWFwO1xuIiwidmFyIGJhc2VJc01hdGNoID0gcmVxdWlyZSgnLi9fYmFzZUlzTWF0Y2gnKSxcbiAgICBnZXRNYXRjaERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXRjaERhdGEnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKSxcbiAgICBnZXQgPSByZXF1aXJlKCcuL2dldCcpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0RnVuY3Rpb247XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUVhY2g7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwidmFyIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWF0Y2hEYXRhO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZm9yRWFjaCcpO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCJ2YXIgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGNhc3RGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2Nhc3RGdW5jdGlvbicpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAYWxpYXMgZWFjaFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gKlxuICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgY2FzdEZ1bmN0aW9uKGl0ZXJhdGVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaDtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwidmFyIGJhc2VIYXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VIYXNJbicpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNJbjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpLFxuICAgIGJhc2VQcm9wZXJ0eURlZXAgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlEZWVwJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xuXG4vKiogQHR5cGVkZWYge2FueX0gVE9ETyAqL1xuXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZShcIi4vbm9ybWFsaXplLXVybFwiKTtcbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiO1xudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqIEByZXR1cm5zIHsoZnVuY3Rpb24oKTogdm9pZCl8Kn1cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWUpIHtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb25DYWxsLCB0aW1lKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7VE9ET30gbW9kdWxlSWRcbiAqIEByZXR1cm5zIHtUT0RPfVxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gKCAvKiogQHR5cGUge0hUTUxTY3JpcHRFbGVtZW50fSAqL2RvY3VtZW50LmN1cnJlbnRTY3JpcHQpLnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcbiAgICAgIHZhciBsYXN0U2NyaXB0VGFnID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlTWFwXG4gICAqIEByZXR1cm5zIHtudWxsIHwgc3RyaW5nW119XG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKFwiLmpzXCIsIFwiLmNzc1wiKV07XG4gICAgfVxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZShcIi5qc1wiLCBcIi5jc3NcIildO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uIChtYXBSdWxlKSB7XG4gICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChmaWxlbmFtZSwgXCJcXFxcLmpzJFwiKSwgXCJnXCIpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VE9ET30gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdXJsXVxuICovXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoXCI/XCIpWzBdO1xuICB9XG4gIGlmICghaXNVcmxSZXF1ZXN0KCAvKiogQHR5cGUge3N0cmluZ30gKi91cmwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghdXJsIHx8ICEodXJsLmluZGV4T2YoXCIuY3NzXCIpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChuZXdFbC5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5ocmVmID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KERhdGUubm93KCkpO1xuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZWwubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAqIEBwYXJhbSB7VE9ET30gc3JjXG4gKiBAcmV0dXJucyB7VE9ET31cbiAqL1xuZnVuY3Rpb24gZ2V0UmVsb2FkVXJsKGhyZWYsIHNyYykge1xuICB2YXIgcmV0O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBocmVmID0gbm9ybWFsaXplVXJsKGhyZWYpO1xuICBzcmMuc29tZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cbiAgZnVuY3Rpb24gKHVybCkge1xuICAgIGlmIChocmVmLmluZGV4T2Yoc3JjKSA+IC0xKSB7XG4gICAgICByZXQgPSB1cmw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NyY11cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiByZWxvYWRTdHlsZShzcmMpIHtcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHVybCA9IGdldFJlbG9hZFVybChlbC5ocmVmLCBzcmMpO1xuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVybCkge1xuICAgICAgdXBkYXRlQ3NzKGVsLCB1cmwpO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcblxuICAvLyBJdCBpcyBub3QgaHR0cCBvciBodHRwc1xuICBpZiAoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RPRE99IG1vZHVsZUlkXG4gKiBAcGFyYW0ge1RPRE99IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtUT0RPfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgb3B0aW9ucykge1xuICBpZiAobm9Eb2N1bWVudCkge1xuICAgIGNvbnNvbGUubG9nKFwibm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTXCIpO1xuICAgIHJldHVybiBub29wO1xuICB9XG4gIHZhciBnZXRTY3JpcHRTcmMgPSBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKTtcbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcbiAgICBpZiAob3B0aW9ucy5sb2NhbHMpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBjc3MgcmVsb2FkICVzXCIsIHNyYy5qb2luKFwiIFwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKHVwZGF0ZSwgNTApO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRoQ29tcG9uZW50c1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlIFwiLi5cIjpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIi5cIjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIC8qKiBAdHlwZSB7c3RyaW5nW119ICovW10pLmpvaW4oXCIvXCIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxTdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybFN0cmluZykge1xuICB1cmxTdHJpbmcgPSB1cmxTdHJpbmcudHJpbSgpO1xuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoXCIvL1wiKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoXCIvL1wiKVswXSArIFwiLy9cIiA6IFwiXCI7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgXCJpXCIpLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCBcIlwiKTtcbiAgY29tcG9uZW50c1swXSA9IFwiXCI7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYy9ub3JtYWxpemVXaGVlbC5qcycpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAwNC1wcmVzZW50IEZhY2Vib29rLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBVc2VyQWdlbnRfREVQUkVDQVRFRFxuICovXG5cbi8qKlxuICogIFByb3ZpZGVzIGVudGlyZWx5IGNsaWVudC1zaWRlIFVzZXIgQWdlbnQgYW5kIE9TIGRldGVjdGlvbi4gWW91IHNob3VsZCBwcmVmZXJcbiAqICB0aGUgbm9uLWRlcHJlY2F0ZWQgVXNlckFnZW50IG1vZHVsZSB3aGVuIHBvc3NpYmxlLCB3aGljaCBleHBvc2VzIG91clxuICogIGF1dGhvcml0YXRpdmUgc2VydmVyLXNpZGUgUEhQLWJhc2VkIGRldGVjdGlvbiB0byB0aGUgY2xpZW50LlxuICpcbiAqICBVc2FnZSBpcyBzdHJhaWdodGZvcndhcmQ6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkpIHtcbiAqICAgICAgLy8gIElFXG4gKiAgICB9XG4gKlxuICogIFlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNoZWNrczpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA+PSA3KSB7XG4gKiAgICAgIC8vICBJRTcgb3IgYmV0dGVyXG4gKiAgICB9XG4gKlxuICogIFRoZSBicm93c2VyIGZ1bmN0aW9ucyB3aWxsIHJldHVybiBOYU4gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3QgbWF0Y2gsIHNvXG4gKiAgeW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY29tcGFyZXMgdGhlIG90aGVyIHdheTpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA8IDcpIHtcbiAqICAgICAgLy8gIElFNiBvciB3b3JzZVxuICogICAgfVxuICpcbiAqICBOb3RlIHRoYXQgdGhlIHZlcnNpb24gaXMgYSBmbG9hdCBhbmQgbWF5IGluY2x1ZGUgYSBtaW5vciB2ZXJzaW9uIG51bWJlcixcbiAqICBzbyB5b3Ugc2hvdWxkIGFsd2F5cyB1c2UgcmFuZ2Ugb3BlcmF0b3JzIHRvIHBlcmZvcm0gY29tcGFyaXNvbnMsIG5vdFxuICogIHN0cmljdCBlcXVhbGl0eS5cbiAqXG4gKiAgKipOb3RlOioqIFlvdSBzaG91bGQgKipzdHJvbmdseSoqIHByZWZlciBjYXBhYmlsaXR5IGRldGVjdGlvbiB0byBicm93c2VyXG4gKiAgdmVyc2lvbiBkZXRlY3Rpb24gd2hlcmUgaXQncyByZWFzb25hYmxlOlxuICpcbiAqICAgIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvc3VwcG9ydC5odG1sXG4gKlxuICogIEZ1cnRoZXIsIHdlIGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgbWF0dXJlIHdyYXBwZXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG4gKiAgd2hpY2ggYWJzdHJhY3QgYXdheSBtYW55IGJyb3dzZXIgaXJyZWd1bGFyaXRpZXMuIENoZWNrIHRoZSBkb2N1bWVudGF0aW9uLFxuICogIGdyZXAgZm9yIHRoaW5ncywgb3IgYXNrIG9uIGphdmFzY3JpcHRAbGlzdHMuZmFjZWJvb2suY29tIGJlZm9yZSB3cml0aW5nIHlldFxuICogIGFub3RoZXIgY29weSBvZiBcImV2ZW50IHx8IHdpbmRvdy5ldmVudFwiLlxuICpcbiAqL1xuXG52YXIgX3BvcHVsYXRlZCA9IGZhbHNlO1xuXG4vLyBCcm93c2Vyc1xudmFyIF9pZSwgX2ZpcmVmb3gsIF9vcGVyYSwgX3dlYmtpdCwgX2Nocm9tZTtcblxuLy8gQWN0dWFsIElFIGJyb3dzZXIgZm9yIGNvbXBhdGliaWxpdHkgbW9kZVxudmFyIF9pZV9yZWFsX3ZlcnNpb247XG5cbi8vIFBsYXRmb3Jtc1xudmFyIF9vc3gsIF93aW5kb3dzLCBfbGludXgsIF9hbmRyb2lkO1xuXG4vLyBBcmNoaXRlY3R1cmVzXG52YXIgX3dpbjY0O1xuXG4vLyBEZXZpY2VzXG52YXIgX2lwaG9uZSwgX2lwYWQsIF9uYXRpdmU7XG5cbnZhciBfbW9iaWxlO1xuXG5mdW5jdGlvbiBfcG9wdWxhdGUoKSB7XG4gIGlmIChfcG9wdWxhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3BvcHVsYXRlZCA9IHRydWU7XG5cbiAgLy8gVG8gd29yayBhcm91bmQgYnVnZ3kgSlMgbGlicmFyaWVzIHRoYXQgY2FuJ3QgaGFuZGxlIG11bHRpLWRpZ2l0XG4gIC8vIHZlcnNpb24gbnVtYmVycywgT3BlcmEgMTAncyB1c2VyIGFnZW50IHN0cmluZyBjbGFpbXMgaXQncyBPcGVyYVxuICAvLyA5LCB0aGVuIGxhdGVyIGluY2x1ZGVzIGEgVmVyc2lvbi9YLlkgZmllbGQ6XG4gIC8vXG4gIC8vIE9wZXJhLzkuODAgKGZvbykgUHJlc3RvLzIuMi4xNSBWZXJzaW9uLzEwLjEwXG4gIHZhciB1YXMgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICB2YXIgYWdlbnQgPSAvKD86TVNJRS4oXFxkK1xcLlxcZCspKXwoPzooPzpGaXJlZm94fEdyYW5QYXJhZGlzb3xJY2V3ZWFzZWwpLihcXGQrXFwuXFxkKykpfCg/Ok9wZXJhKD86LitWZXJzaW9uLnwuKShcXGQrXFwuXFxkKykpfCg/OkFwcGxlV2ViS2l0LihcXGQrKD86XFwuXFxkKyk/KSl8KD86VHJpZGVudFxcL1xcZCtcXC5cXGQrLipydjooXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICB2YXIgb3MgICAgPSAvKE1hYyBPUyBYKXwoV2luZG93cyl8KExpbnV4KS8uZXhlYyh1YXMpO1xuXG4gIF9pcGhvbmUgPSAvXFxiKGlQaG9uZXxpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfaXBhZCA9IC9cXGIoaVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2FuZHJvaWQgPSAvQW5kcm9pZC9pLmV4ZWModWFzKTtcbiAgX25hdGl2ZSA9IC9GQkFOXFwvXFx3KzsvaS5leGVjKHVhcyk7XG4gIF9tb2JpbGUgPSAvTW9iaWxlL2kuZXhlYyh1YXMpO1xuXG4gIC8vIE5vdGUgdGhhdCB0aGUgSUUgdGVhbSBibG9nIHdvdWxkIGhhdmUgeW91IGJlbGlldmUgeW91IHNob3VsZCBiZSBjaGVja2luZ1xuICAvLyBmb3IgJ1dpbjY0OyB4NjQnLiAgQnV0IE1TRE4gdGhlbiByZXZlYWxzIHRoYXQgeW91IGNhbiBhY3R1YWxseSBiZSBjb21pbmdcbiAgLy8gZnJvbSBlaXRoZXIgeDY0IG9yIGlhNjQ7ICBzbyB1bHRpbWF0ZWx5LCB5b3Ugc2hvdWxkIGp1c3QgY2hlY2sgZm9yIFdpbjY0XG4gIC8vIGFzIGluIGluZGljYXRvciBvZiB3aGV0aGVyIHlvdSdyZSBpbiA2NC1iaXQgSUUuICAzMi1iaXQgSUUgb24gNjQtYml0XG4gIC8vIFdpbmRvd3Mgd2lsbCBzZW5kICdXT1c2NCcgaW5zdGVhZC5cbiAgX3dpbjY0ID0gISEoL1dpbjY0Ly5leGVjKHVhcykpO1xuXG4gIGlmIChhZ2VudCkge1xuICAgIF9pZSA9IGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiAoXG4gICAgICAgICAgYWdlbnRbNV0gPyBwYXJzZUZsb2F0KGFnZW50WzVdKSA6IE5hTik7XG4gICAgLy8gSUUgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgaWYgKF9pZSAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpIHtcbiAgICAgIF9pZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgICB9XG4gICAgLy8gZ3JhYiB0aGUgXCJ0cnVlXCIgaWUgdmVyc2lvbiBmcm9tIHRoZSB0cmlkZW50IHRva2VuIGlmIGF2YWlsYWJsZVxuICAgIHZhciB0cmlkZW50ID0gLyg/OlRyaWRlbnRcXC8oXFxkKy5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICBfaWVfcmVhbF92ZXJzaW9uID0gdHJpZGVudCA/IHBhcnNlRmxvYXQodHJpZGVudFsxXSkgKyA0IDogX2llO1xuXG4gICAgX2ZpcmVmb3ggPSBhZ2VudFsyXSA/IHBhcnNlRmxvYXQoYWdlbnRbMl0pIDogTmFOO1xuICAgIF9vcGVyYSAgID0gYWdlbnRbM10gPyBwYXJzZUZsb2F0KGFnZW50WzNdKSA6IE5hTjtcbiAgICBfd2Via2l0ICA9IGFnZW50WzRdID8gcGFyc2VGbG9hdChhZ2VudFs0XSkgOiBOYU47XG4gICAgaWYgKF93ZWJraXQpIHtcbiAgICAgIC8vIFdlIGRvIG5vdCBhZGQgdGhlIHJlZ2V4cCB0byB0aGUgYWJvdmUgdGVzdCwgYmVjYXVzZSBpdCB3aWxsIGFsd2F5c1xuICAgICAgLy8gbWF0Y2ggJ3NhZmFyaScgb25seSBzaW5jZSAnQXBwbGVXZWJLaXQnIGFwcGVhcnMgYmVmb3JlICdDaHJvbWUnIGluXG4gICAgICAvLyB0aGUgdXNlckFnZW50IHN0cmluZy5cbiAgICAgIGFnZW50ID0gLyg/OkNocm9tZVxcLyhcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgICBfY2hyb21lID0gYWdlbnQgJiYgYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IE5hTjtcbiAgICB9IGVsc2Uge1xuICAgICAgX2Nocm9tZSA9IE5hTjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX2llID0gX2ZpcmVmb3ggPSBfb3BlcmEgPSBfY2hyb21lID0gX3dlYmtpdCA9IE5hTjtcbiAgfVxuXG4gIGlmIChvcykge1xuICAgIGlmIChvc1sxXSkge1xuICAgICAgLy8gRGV0ZWN0IE9TIFggdmVyc2lvbi4gIElmIG5vIHZlcnNpb24gbnVtYmVyIG1hdGNoZXMsIHNldCBfb3N4IHRvIHRydWUuXG4gICAgICAvLyBWZXJzaW9uIGV4YW1wbGVzOiAgMTAsIDEwXzZfMSwgMTAuN1xuICAgICAgLy8gUGFyc2VzIHZlcnNpb24gbnVtYmVyIGFzIGEgZmxvYXQsIHRha2luZyBvbmx5IGZpcnN0IHR3byBzZXRzIG9mXG4gICAgICAvLyBkaWdpdHMuICBJZiBvbmx5IG9uZSBzZXQgb2YgZGlnaXRzIGlzIGZvdW5kLCByZXR1cm5zIGp1c3QgdGhlIG1ham9yXG4gICAgICAvLyB2ZXJzaW9uIG51bWJlci5cbiAgICAgIHZhciB2ZXIgPSAvKD86TWFjIE9TIFggKFxcZCsoPzpbLl9dXFxkKyk/KSkvLmV4ZWModWFzKTtcblxuICAgICAgX29zeCA9IHZlciA/IHBhcnNlRmxvYXQodmVyWzFdLnJlcGxhY2UoJ18nLCAnLicpKSA6IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vc3ggPSBmYWxzZTtcbiAgICB9XG4gICAgX3dpbmRvd3MgPSAhIW9zWzJdO1xuICAgIF9saW51eCAgID0gISFvc1szXTtcbiAgfSBlbHNlIHtcbiAgICBfb3N4ID0gX3dpbmRvd3MgPSBfbGludXggPSBmYWxzZTtcbiAgfVxufVxuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSB7XG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGllOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2llO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB3ZSdyZSBpbiBJbnRlcm5ldCBFeHBsb3JlciBjb21wYXRpYmlsaXR5IG1vZGUuXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIGluIGNvbXBhdGliaWxpdHkgbW9kZSwgZmFsc2UgaWZcbiAgICogbm90IGNvbXBhdGliaWxpdHkgbW9kZSBvciBub3QgaWVcbiAgICovXG4gIGllQ29tcGF0aWJpbGl0eU1vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2llX3JlYWxfdmVyc2lvbiA+IF9pZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnJvd3NlciBpcyA2NC1iaXQgSUUuICBSZWFsbHksIHRoaXMgaXMga2luZCBvZiB3ZWFrIHNhdWNlOyAgd2VcbiAgICogb25seSBuZWVkIHRoaXMgYmVjYXVzZSBTa3lwZSBjYW4ndCBoYW5kbGUgNjQtYml0IElFIHlldC4gIFdlIG5lZWQgdG8gcmVtb3ZlXG4gICAqIHRoaXMgd2hlbiB3ZSBkb24ndCBuZWVkIGl0IC0tIHRyYWNrZWQgYnkgIzYwMTk1Ny5cbiAgICovXG4gIGllNjQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpICYmIF93aW42NDtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBGaXJlZm94LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBmaXJlZm94OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2ZpcmVmb3g7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBPcGVyYS5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgb3BlcmE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3BlcmE7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBXZWJLaXQuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIHdlYmtpdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93ZWJraXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBGb3IgUHVzaFxuICAgKiAgV0lMTCBCRSBSRU1PVkVEIFZFUlkgU09PTi4gVXNlIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdFxuICAgKi9cbiAgc2FmYXJpOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgYSBDaHJvbWUgYnJvd3Nlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgY2hyb21lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9jaHJvbWU7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgV2luZG93cy5cbiAgICpcbiAgICogIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBXaW5kb3dzLlxuICAgKi9cbiAgd2luZG93czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93aW5kb3dzO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIE1hYyBPUyBYLlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxib29sICAgUmV0dXJucyBhIGZsb2F0IGlmIGEgdmVyc2lvbiBudW1iZXIgaXMgZGV0ZWN0ZWQsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgdHJ1ZS9mYWxzZS5cbiAgICovXG4gIG9zeDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vc3g7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTGludXguXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBzb21lIGZsYXZvciBvZiBMaW51eC5cbiAgICovXG4gIGxpbnV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2xpbnV4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZSBvciBpUG9kIHBsYXRmb3JtLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgc29tZSBmbGF2b3Igb2YgdGhlXG4gICAqICAgIGlQaG9uZSBPUy5cbiAgICovXG4gIGlwaG9uZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGhvbmU7XG4gIH0sXG5cbiAgbW9iaWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pcGhvbmUgfHwgX2lwYWQgfHwgX2FuZHJvaWQgfHwgX21vYmlsZSk7XG4gIH0sXG5cbiAgbmF0aXZlQXBwOiBmdW5jdGlvbigpIHtcbiAgICAvLyB3ZWJ2aWV3cyBpbnNpZGUgb2YgdGhlIG5hdGl2ZSBhcHBzXG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9uYXRpdmU7XG4gIH0sXG5cbiAgYW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9hbmRyb2lkO1xuICB9LFxuXG4gIGlwYWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBhZDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQWdlbnRfREVQUkVDQVRFRDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG5vcm1hbGl6ZVdoZWVsXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnRfREVQUkVDQVRFRCcpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG5cbi8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbnZhciBQSVhFTF9TVEVQICA9IDEwO1xudmFyIExJTkVfSEVJR0hUID0gNDA7XG52YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG5cbi8qKlxuICogTW91c2Ugd2hlZWwgKGFuZCAyLWZpbmdlciB0cmFja3BhZCkgc3VwcG9ydCBvbiB0aGUgd2ViIHN1Y2tzLiAgSXQgaXNcbiAqIGNvbXBsaWNhdGVkLCB0aHVzIHRoaXMgZG9jIGlzIGxvbmcgYW5kIChob3BlZnVsbHkpIGRldGFpbGVkIGVub3VnaCB0byBhbnN3ZXJcbiAqIHlvdXIgcXVlc3Rpb25zLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIHJlYWN0IHRvIHRoZSBtb3VzZSB3aGVlbCBpbiBhIHByZWRpY3RhYmxlIHdheSwgdGhpcyBjb2RlIGlzXG4gKiBsaWtlIHlvdXIgYmVzdGVzdCBmcmllbmQuICogaHVncyAqXG4gKlxuICogQXMgb2YgdG9kYXksIHRoZXJlIGFyZSA0IERPTSBldmVudCB0eXBlcyB5b3UgY2FuIGxpc3RlbiB0bzpcbiAqXG4gKiAgICd3aGVlbCcgICAgICAgICAgICAgICAgLS0gQ2hyb21lKDMxKyksIEZGKDE3KyksIElFKDkrKVxuICogICAnbW91c2V3aGVlbCcgICAgICAgICAgIC0tIENocm9tZSwgSUUoNispLCBPcGVyYSwgU2FmYXJpXG4gKiAgICdNb3pNb3VzZVBpeGVsU2Nyb2xsJyAgLS0gRkYoMy41IG9ubHkhKSAoMjAxMC0yMDEzKSAtLSBkb24ndCBib3RoZXIhXG4gKiAgICdET01Nb3VzZVNjcm9sbCcgICAgICAgLS0gRkYoMC45LjcrKSBzaW5jZSAyMDAzXG4gKlxuICogU28gd2hhdCB0byBkbz8gIFRoZSBpcyB0aGUgYmVzdDpcbiAqXG4gKiAgIG5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSgpO1xuICpcbiAqIEluIHlvdXIgZXZlbnQgY2FsbGJhY2ssIHVzZSB0aGlzIGNvZGUgdG8gZ2V0IHNhbmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlXG4gKiBkZWx0YXMuICBUaGlzIGNvZGUgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggcHJvcGVydGllczpcbiAqXG4gKiAgIHNwaW5YICAgLS0gbm9ybWFsaXplZCBzcGluIHNwZWVkICh1c2UgZm9yIHpvb20pIC0geCBwbGFuZVxuICogICBzcGluWSAgIC0tIFwiIC0geSBwbGFuZVxuICogICBwaXhlbFggIC0tIG5vcm1hbGl6ZWQgZGlzdGFuY2UgKHRvIHBpeGVscykgLSB4IHBsYW5lXG4gKiAgIHBpeGVsWSAgLS0gXCIgLSB5IHBsYW5lXG4gKlxuICogV2hlZWwgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciBhc3N1bWluZyB5b3UgYXJlIHVzaW5nIHRoZSB3aGVlbCB0b1xuICogc2Nyb2xsIGEgd2ViIHBhZ2UgYnkgYSBudW1iZXIgb2YgbGluZXMgb3IgcGl4ZWxzIChvciBwYWdlcykuICBWYWx1ZXMgY2FuIHZhcnlcbiAqIHNpZ25pZmljYW50bHkgb24gZGlmZmVyZW50IHBsYXRmb3JtcyBhbmQgYnJvd3NlcnMsIGZvcmdldHRpbmcgdGhhdCB5b3UgY2FuXG4gKiBzY3JvbGwgYXQgZGlmZmVyZW50IHNwZWVkcy4gIFNvbWUgZGV2aWNlcyAobGlrZSB0cmFja3BhZHMpIGVtaXQgbW9yZSBldmVudHNcbiAqIGF0IHNtYWxsZXIgaW5jcmVtZW50cyB3aXRoIGZpbmUgZ3JhbnVsYXJpdHksIGFuZCBzb21lIGVtaXQgbWFzc2l2ZSBqdW1wcyB3aXRoXG4gKiBsaW5lYXIgc3BlZWQgb3IgYWNjZWxlcmF0aW9uLlxuICpcbiAqIFRoaXMgY29kZSBkb2VzIGl0cyBiZXN0IHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGFzIGZvciB5b3U6XG4gKlxuICogICAtIHNwaW4gaXMgdHJ5aW5nIHRvIG5vcm1hbGl6ZSBob3cgZmFyIHRoZSB3aGVlbCB3YXMgc3B1biAob3IgdHJhY2twYWRcbiAqICAgICBkcmFnZ2VkKS4gIFRoaXMgaXMgc3VwZXIgdXNlZnVsIGZvciB6b29tIHN1cHBvcnQgd2hlcmUgeW91IHdhbnQgdG9cbiAqICAgICB0aHJvdyBhd2F5IHRoZSBjaHVua3kgc2Nyb2xsIHN0ZXBzIG9uIHRoZSBQQyBhbmQgbWFrZSB0aG9zZSBlcXVhbCB0b1xuICogICAgIHRoZSBzbG93IGFuZCBzbW9vdGggdGlueSBzdGVwcyBvbiB0aGUgTWFjLiBLZXkgZGF0YTogVGhpcyBjb2RlIHRyaWVzIHRvXG4gKiAgICAgcmVzb2x2ZSBhIHNpbmdsZSBzbG93IHN0ZXAgb24gYSB3aGVlbCB0byAxLlxuICpcbiAqICAgLSBwaXhlbCBpcyBub3JtYWxpemluZyB0aGUgZGVzaXJlZCBzY3JvbGwgZGVsdGEgaW4gcGl4ZWwgdW5pdHMuICBZb3UnbGxcbiAqICAgICBnZXQgdGhlIGNyYXp5IGRpZmZlcmVuY2VzIGJldHdlZW4gYnJvd3NlcnMsIGJ1dCBhdCBsZWFzdCBpdCdsbCBiZSBpblxuICogICAgIHBpeGVscyFcbiAqXG4gKiAgIC0gcG9zaXRpdmUgdmFsdWUgaW5kaWNhdGVzIHNjcm9sbGluZyBET1dOL1JJR0hULCBuZWdhdGl2ZSBVUC9MRUZULiAgVGhpc1xuICogICAgIHNob3VsZCB0cmFuc2xhdGUgdG8gcG9zaXRpdmUgdmFsdWUgem9vbWluZyBJTiwgbmVnYXRpdmUgem9vbWluZyBPVVQuXG4gKiAgICAgVGhpcyBtYXRjaGVzIHRoZSBuZXdlciAnd2hlZWwnIGV2ZW50LlxuICpcbiAqIFdoeSBhcmUgdGhlcmUgc3BpblgsIHNwaW5ZIChvciBwaXhlbHMpP1xuICpcbiAqICAgLSBzcGluWCBpcyBhIDItZmluZ2VyIHNpZGUgZHJhZyBvbiB0aGUgdHJhY2twYWQsIGFuZCBhIHNoaWZ0ICsgd2hlZWwgdHVyblxuICogICAgIHdpdGggYSBtb3VzZS4gIEl0IHJlc3VsdHMgaW4gc2lkZS1zY3JvbGxpbmcgaW4gdGhlIGJyb3dzZXIgYnkgZGVmYXVsdC5cbiAqXG4gKiAgIC0gc3BpblkgaXMgd2hhdCB5b3UgZXhwZWN0IC0tIGl0J3MgdGhlIGNsYXNzaWMgYXhpcyBvZiBhIG1vdXNlIHdoZWVsLlxuICpcbiAqICAgLSBJIGRyb3BwZWQgc3BpblovcGl4ZWxaLiAgSXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBET00gMyAnd2hlZWwnIGV2ZW50IGFuZFxuICogICAgIHByb2JhYmx5IGlzIGJ5IGJyb3dzZXJzIGluIGNvbmp1bmN0aW9uIHdpdGggZmFuY3kgM0QgY29udHJvbGxlcnMgLi4gYnV0XG4gKiAgICAgeW91IGtub3cuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaW5mbzpcbiAqXG4gKiBFeGFtcGxlcyBvZiAnd2hlZWwnIGV2ZW50IGlmIHlvdSBzY3JvbGwgc2xvd2x5IChkb3duKSBieSBvbmUgc3RlcCB3aXRoIGFuXG4gKiBhdmVyYWdlIG1vdXNlOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgICA0ICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIE9TIFggKyBTYWZhcmkgIChtb3VzZSkgICAgIC0gIE4vQSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgLTEyKVxuICogICBPUyBYICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDAuMSBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqICAgV2luOCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgMTAwICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIFdpbjggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMyAgIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICpcbiAqIE9uIHRoZSB0cmFja3BhZDpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgICh0cmFja3BhZCkgIC0gICAgMiAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgIC02KVxuICogICBPUyBYICsgRmlyZWZveCAodHJhY2twYWQpICAtICAgIDEgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqXG4gKiBPbiBvdGhlci9vbGRlciBicm93c2Vycy4uIGl0J3MgbW9yZSBjb21wbGljYXRlZCBhcyB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgYW5kXG4gKiBhbHNvIG1pc3NpbmcgZGVsdGEgdmFsdWVzLlxuICpcbiAqIFRoZSAnd2hlZWwnIGV2ZW50IGlzIG1vcmUgc3RhbmRhcmQ6XG4gKlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtd2hlZWxldmVudHNcbiAqXG4gKiBUaGUgYmFzaWNzIGlzIHRoYXQgaXQgaW5jbHVkZXMgYSB1bml0LCBkZWx0YU1vZGUgKHBpeGVscywgbGluZXMsIHBhZ2VzKSwgYW5kXG4gKiBkZWx0YVgsIGRlbHRhWSBhbmQgZGVsdGFaLiAgU29tZSBicm93c2VycyBwcm92aWRlIG90aGVyIHZhbHVlcyB0byBtYWludGFpblxuICogYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGV2ZW50cy4gIFRob3NlIG90aGVyIHZhbHVlcyBoZWxwIHVzXG4gKiBiZXR0ZXIgbm9ybWFsaXplIHNwaW4gc3BlZWQuICBFeGFtcGxlIG9mIHdoYXQgdGhlIGJyb3dzZXJzIHByb3ZpZGU6XG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgZXZlbnQud2hlZWxEZWx0YSB8IGV2ZW50LmRldGFpbFxuICogICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS1cbiAqICAgICAgICAgIFNhZmFyaSB2NS9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICBTYWZhcmkgdjUvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICAgICAgICBJRTkvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICB1bmRlZmluZWRcbiAqICAgICAgICAgRmlyZWZveCB2NC9PUyBYICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAxXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvV2luNyAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgM1xuICpcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2hlZWwoLypvYmplY3QqLyBldmVudCkgLypvYmplY3QqLyB7XG4gIHZhciBzWCA9IDAsIHNZID0gMCwgICAgICAgLy8gc3BpblgsIHNwaW5ZXG4gICAgICBwWCA9IDAsIHBZID0gMDsgICAgICAgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAvLyBMZWdhY3lcbiAgaWYgKCdkZXRhaWwnICAgICAgaW4gZXZlbnQpIHsgc1kgPSBldmVudC5kZXRhaWw7IH1cbiAgaWYgKCd3aGVlbERlbHRhJyAgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhWSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBldmVudCkgeyBzWCA9IC1ldmVudC53aGVlbERlbHRhWCAvIDEyMDsgfVxuXG4gIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgaWYgKCAnYXhpcycgaW4gZXZlbnQgJiYgZXZlbnQuYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgIHNYID0gc1k7XG4gICAgc1kgPSAwO1xuICB9XG5cbiAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gIGlmICgnZGVsdGFZJyBpbiBldmVudCkgeyBwWSA9IGV2ZW50LmRlbHRhWTsgfVxuICBpZiAoJ2RlbHRhWCcgaW4gZXZlbnQpIHsgcFggPSBldmVudC5kZWx0YVg7IH1cblxuICBpZiAoKHBYIHx8IHBZKSAmJiBldmVudC5kZWx0YU1vZGUpIHtcbiAgICBpZiAoZXZlbnQuZGVsdGFNb2RlID09IDEpIHsgICAgICAgICAgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICBpZiAocFggJiYgIXNYKSB7IHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7IH1cbiAgaWYgKHBZICYmICFzWSkgeyBzWSA9IChwWSA8IDEpID8gLTEgOiAxOyB9XG5cbiAgcmV0dXJuIHsgc3BpblggIDogc1gsXG4gICAgICAgICAgIHNwaW5ZICA6IHNZLFxuICAgICAgICAgICBwaXhlbFggOiBwWCxcbiAgICAgICAgICAgcGl4ZWxZIDogcFkgfTtcbn1cblxuXG4vKipcbiAqIFRoZSBiZXN0IGNvbWJpbmF0aW9uIGlmIHlvdSBwcmVmZXIgc3BpblggKyBzcGluWSBub3JtYWxpemF0aW9uLiAgSXQgZmF2b3JzXG4gKiB0aGUgb2xkZXIgRE9NTW91c2VTY3JvbGwgZm9yIEZpcmVmb3gsIGFzIEZGIGRvZXMgbm90IGluY2x1ZGUgd2hlZWxEZWx0YSB3aXRoXG4gKiAnd2hlZWwnIGV2ZW50LCBtYWtpbmcgc3BpbiBzcGVlZCBkZXRlcm1pbmF0aW9uIGltcG9zc2libGUuXG4gKi9cbm5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSA9IGZ1bmN0aW9uKCkgLypzdHJpbmcqLyB7XG4gIHJldHVybiAoVXNlckFnZW50X0RFUFJFQ0FURUQuZmlyZWZveCgpKVxuICAgICAgICAgICA/ICdET01Nb3VzZVNjcm9sbCdcbiAgICAgICAgICAgOiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSlcbiAgICAgICAgICAgICAgID8gJ3doZWVsJ1xuICAgICAgICAgICAgICAgOiAnbW91c2V3aGVlbCc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVdoZWVsO1xuIiwiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0uanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcE1hdDQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hdDQoKTtcbmNvbnN0IHRlbXBWZWMzYSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVmVjMygpO1xuY29uc3QgdGVtcFZlYzNiID0gLyogQF9fUFVSRV9fICovIG5ldyBWZWMzKCk7XG5cbmV4cG9ydCBjbGFzcyBDYW1lcmEgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IG5lYXIgPSAwLjEsIGZhciA9IDEwMCwgZm92ID0gNDUsIGFzcGVjdCA9IDEsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem9vbSA9IDEgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IG5lYXIsIGZhciwgZm92LCBhc3BlY3QsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem9vbSB9KTtcblxuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLnZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLnByb2plY3Rpb25WaWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy53b3JsZFBvc2l0aW9uID0gbmV3IFZlYzMoKTtcblxuICAgICAgICAvLyBVc2Ugb3J0aG9ncmFwaGljIGlmIGxlZnQvcmlnaHQgc2V0LCBlbHNlIGRlZmF1bHQgdG8gcGVyc3BlY3RpdmUgY2FtZXJhXG4gICAgICAgIHRoaXMudHlwZSA9IGxlZnQgfHwgcmlnaHQgPyAnb3J0aG9ncmFwaGljJyA6ICdwZXJzcGVjdGl2ZSc7XG5cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ29ydGhvZ3JhcGhpYycpIHRoaXMub3J0aG9ncmFwaGljKCk7XG4gICAgICAgIGVsc2UgdGhpcy5wZXJzcGVjdGl2ZSgpO1xuICAgIH1cblxuICAgIHBlcnNwZWN0aXZlKHsgbmVhciA9IHRoaXMubmVhciwgZmFyID0gdGhpcy5mYXIsIGZvdiA9IHRoaXMuZm92LCBhc3BlY3QgPSB0aGlzLmFzcGVjdCB9ID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IG5lYXIsIGZhciwgZm92LCBhc3BlY3QgfSk7XG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeC5mcm9tUGVyc3BlY3RpdmUoeyBmb3Y6IGZvdiAqIChNYXRoLlBJIC8gMTgwKSwgYXNwZWN0LCBuZWFyLCBmYXIgfSk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwZXJzcGVjdGl2ZSc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9ydGhvZ3JhcGhpYyh7XG4gICAgICAgIG5lYXIgPSB0aGlzLm5lYXIsXG4gICAgICAgIGZhciA9IHRoaXMuZmFyLFxuICAgICAgICBsZWZ0ID0gdGhpcy5sZWZ0IHx8IC0xLFxuICAgICAgICByaWdodCA9IHRoaXMucmlnaHQgfHwgMSxcbiAgICAgICAgYm90dG9tID0gdGhpcy5ib3R0b20gfHwgLTEsXG4gICAgICAgIHRvcCA9IHRoaXMudG9wIHx8IDEsXG4gICAgICAgIHpvb20gPSB0aGlzLnpvb20sXG4gICAgfSA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBuZWFyLCBmYXIsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem9vbSB9KTtcbiAgICAgICAgbGVmdCAvPSB6b29tO1xuICAgICAgICByaWdodCAvPSB6b29tO1xuICAgICAgICBib3R0b20gLz0gem9vbTtcbiAgICAgICAgdG9wIC89IHpvb207XG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeC5mcm9tT3J0aG9nb25hbCh7IGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyIH0pO1xuICAgICAgICB0aGlzLnR5cGUgPSAnb3J0aG9ncmFwaGljJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlTWF0cml4V29ybGQoKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG4gICAgICAgIHRoaXMudmlld01hdHJpeC5pbnZlcnNlKHRoaXMud29ybGRNYXRyaXgpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4LmdldFRyYW5zbGF0aW9uKHRoaXMud29ybGRQb3NpdGlvbik7XG5cbiAgICAgICAgLy8gdXNlZCBmb3Igc29ydGluZ1xuICAgICAgICB0aGlzLnByb2plY3Rpb25WaWV3TWF0cml4Lm11bHRpcGx5KHRoaXMucHJvamVjdGlvbk1hdHJpeCwgdGhpcy52aWV3TWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3BlcnNwZWN0aXZlJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVyc3BlY3RpdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9ydGhvZ3JhcGhpYygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9va0F0KHRhcmdldCkge1xuICAgICAgICBzdXBlci5sb29rQXQodGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gUHJvamVjdCAzRCBjb29yZGluYXRlIHRvIDJEIHBvaW50XG4gICAgcHJvamVjdCh2KSB7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMudmlld01hdHJpeCk7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIFVucHJvamVjdCAyRCBwb2ludCB0byAzRCBjb29yZGluYXRlXG4gICAgdW5wcm9qZWN0KHYpIHtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGVtcE1hdDQuaW52ZXJzZSh0aGlzLnByb2plY3Rpb25NYXRyaXgpKTtcbiAgICAgICAgdi5hcHBseU1hdHJpeDQodGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVwZGF0ZUZydXN0dW0oKSB7XG4gICAgICAgIGlmICghdGhpcy5mcnVzdHVtKSB7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW0gPSBbbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKSwgbmV3IFZlYzMoKV07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtID0gdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeDtcbiAgICAgICAgdGhpcy5mcnVzdHVtWzBdLnNldChtWzNdIC0gbVswXSwgbVs3XSAtIG1bNF0sIG1bMTFdIC0gbVs4XSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTJdOyAvLyAteFxuICAgICAgICB0aGlzLmZydXN0dW1bMV0uc2V0KG1bM10gKyBtWzBdLCBtWzddICsgbVs0XSwgbVsxMV0gKyBtWzhdKS5jb25zdGFudCA9IG1bMTVdICsgbVsxMl07IC8vICt4XG4gICAgICAgIHRoaXMuZnJ1c3R1bVsyXS5zZXQobVszXSArIG1bMV0sIG1bN10gKyBtWzVdLCBtWzExXSArIG1bOV0pLmNvbnN0YW50ID0gbVsxNV0gKyBtWzEzXTsgLy8gK3lcbiAgICAgICAgdGhpcy5mcnVzdHVtWzNdLnNldChtWzNdIC0gbVsxXSwgbVs3XSAtIG1bNV0sIG1bMTFdIC0gbVs5XSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTNdOyAvLyAteVxuICAgICAgICB0aGlzLmZydXN0dW1bNF0uc2V0KG1bM10gLSBtWzJdLCBtWzddIC0gbVs2XSwgbVsxMV0gLSBtWzEwXSkuY29uc3RhbnQgPSBtWzE1XSAtIG1bMTRdOyAvLyAreiAoZmFyKVxuICAgICAgICB0aGlzLmZydXN0dW1bNV0uc2V0KG1bM10gKyBtWzJdLCBtWzddICsgbVs2XSwgbVsxMV0gKyBtWzEwXSkuY29uc3RhbnQgPSBtWzE1XSArIG1bMTRdOyAvLyAteiAobmVhcilcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW52TGVuID0gMS4wIC8gdGhpcy5mcnVzdHVtW2ldLmRpc3RhbmNlKCk7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW1baV0ubXVsdGlwbHkoaW52TGVuKTtcbiAgICAgICAgICAgIHRoaXMuZnJ1c3R1bVtpXS5jb25zdGFudCAqPSBpbnZMZW47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmcnVzdHVtSW50ZXJzZWN0c01lc2gobm9kZSwgd29ybGRNYXRyaXggPSBub2RlLndvcmxkTWF0cml4KSB7XG4gICAgICAgIC8vIElmIG5vIHBvc2l0aW9uIGF0dHJpYnV0ZSwgdHJlYXQgYXMgZnJ1c3R1bUN1bGxlZCBmYWxzZVxuICAgICAgICBpZiAoIW5vZGUuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbikgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgaWYgKCFub2RlLmdlb21ldHJ5LmJvdW5kcyB8fCBub2RlLmdlb21ldHJ5LmJvdW5kcy5yYWRpdXMgPT09IEluZmluaXR5KSBub2RlLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG4gICAgICAgIGlmICghbm9kZS5nZW9tZXRyeS5ib3VuZHMpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRlbXBWZWMzYTtcbiAgICAgICAgY2VudGVyLmNvcHkobm9kZS5nZW9tZXRyeS5ib3VuZHMuY2VudGVyKTtcbiAgICAgICAgY2VudGVyLmFwcGx5TWF0cml4NCh3b3JsZE1hdHJpeCk7XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gbm9kZS5nZW9tZXRyeS5ib3VuZHMucmFkaXVzICogd29ybGRNYXRyaXguZ2V0TWF4U2NhbGVPbkF4aXMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mcnVzdHVtSW50ZXJzZWN0c1NwaGVyZShjZW50ZXIsIHJhZGl1cyk7XG4gICAgfVxuXG4gICAgZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUoY2VudGVyLCByYWRpdXMpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gdGVtcFZlYzNiO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFuZSA9IHRoaXMuZnJ1c3R1bVtpXTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbm9ybWFsLmNvcHkocGxhbmUpLmRvdChjZW50ZXIpICsgcGxhbmUuY29uc3RhbnQ7XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCAtcmFkaXVzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIiwiLy8gYXR0cmlidXRlIHBhcmFtc1xuLy8ge1xuLy8gICAgIGRhdGEgLSB0eXBlZCBhcnJheSBlZyBVSW50MTZBcnJheSBmb3IgaW5kaWNlcywgRmxvYXQzMkFycmF5XG4vLyAgICAgc2l6ZSAtIGludCBkZWZhdWx0IDFcbi8vICAgICBpbnN0YW5jZWQgLSBkZWZhdWx0IG51bGwuIFBhc3MgZGl2aXNvciBhbW91bnRcbi8vICAgICB0eXBlIC0gZ2wgZW51bSBkZWZhdWx0IGdsLlVOU0lHTkVEX1NIT1JUIGZvciAnaW5kZXgnLCBnbC5GTE9BVCBmb3Igb3RoZXJzXG4vLyAgICAgbm9ybWFsaXplZCAtIGJvb2xlYW4gZGVmYXVsdCBmYWxzZVxuXG4vLyAgICAgYnVmZmVyIC0gZ2wgYnVmZmVyLCBpZiBidWZmZXIgZXhpc3RzLCBkb24ndCBuZWVkIHRvIHByb3ZpZGUgZGF0YSAtIGFsdGhvdWdoIG5lZWRzIHBvc2l0aW9uIGRhdGEgZm9yIGJvdW5kcyBjYWxjdWxhdGlvblxuLy8gICAgIHN0cmlkZSAtIGRlZmF1bHQgMCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgb2Zmc2V0IC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBjb3VudCAtIGRlZmF1bHQgbnVsbCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWluIC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG1heCAtIGFycmF5IC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vIH1cblxuLy8gVE9ETzogZml0IGluIHRyYW5zZm9ybSBmZWVkYmFja1xuXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcFZlYzMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcblxubGV0IElEID0gMTtcbmxldCBBVFRSX0lEID0gMTtcblxuLy8gVG8gc3RvcCBpbmlmaW5pdGUgd2FybmluZ3NcbmxldCBpc0JvdW5kc1dhcm5lZCA9IGZhbHNlO1xuXG5leHBvcnQgY2xhc3MgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCBhdHRyaWJ1dGVzID0ge30pIHtcbiAgICAgICAgaWYgKCFnbC5jYW52YXMpIGNvbnNvbGUuZXJyb3IoJ2dsIG5vdCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgdG8gR2VvbWV0cnknKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICAvLyBTdG9yZSBvbmUgVkFPIHBlciBwcm9ncmFtIGF0dHJpYnV0ZSBsb2NhdGlvbnMgb3JkZXJcbiAgICAgICAgdGhpcy5WQU9zID0ge307XG5cbiAgICAgICAgdGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogMCB9O1xuICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gMDtcblxuICAgICAgICAvLyBVbmJpbmQgY3VycmVudCBWQU8gc28gdGhhdCBuZXcgYnVmZmVycyBkb24ndCBnZXQgYWRkZWQgdG8gYWN0aXZlIG1lc2hcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ID0gbnVsbDtcblxuICAgICAgICAvLyBBbGlhcyBmb3Igc3RhdGUgc3RvcmUgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIGZvciBnbG9iYWwgc3RhdGVcbiAgICAgICAgdGhpcy5nbFN0YXRlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIGJ1ZmZlcnNcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEF0dHJpYnV0ZShrZXksIGF0dHIpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW2tleV0gPSBhdHRyO1xuXG4gICAgICAgIC8vIFNldCBvcHRpb25zXG4gICAgICAgIGF0dHIuaWQgPSBBVFRSX0lEKys7IC8vIFRPRE86IGN1cnJlbnRseSB1bnVzZWQsIHJlbW92ZT9cbiAgICAgICAgYXR0ci5zaXplID0gYXR0ci5zaXplIHx8IDE7XG4gICAgICAgIGF0dHIudHlwZSA9XG4gICAgICAgICAgICBhdHRyLnR5cGUgfHxcbiAgICAgICAgICAgIChhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IEZsb2F0MzJBcnJheVxuICAgICAgICAgICAgICAgID8gdGhpcy5nbC5GTE9BVFxuICAgICAgICAgICAgICAgIDogYXR0ci5kYXRhLmNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheVxuICAgICAgICAgICAgICAgID8gdGhpcy5nbC5VTlNJR05FRF9TSE9SVFxuICAgICAgICAgICAgICAgIDogdGhpcy5nbC5VTlNJR05FRF9JTlQpOyAvLyBVaW50MzJBcnJheVxuICAgICAgICBhdHRyLnRhcmdldCA9IGtleSA9PT0gJ2luZGV4JyA/IHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIgOiB0aGlzLmdsLkFSUkFZX0JVRkZFUjtcbiAgICAgICAgYXR0ci5ub3JtYWxpemVkID0gYXR0ci5ub3JtYWxpemVkIHx8IGZhbHNlO1xuICAgICAgICBhdHRyLnN0cmlkZSA9IGF0dHIuc3RyaWRlIHx8IDA7XG4gICAgICAgIGF0dHIub2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMDtcbiAgICAgICAgYXR0ci5jb3VudCA9IGF0dHIuY291bnQgfHwgKGF0dHIuc3RyaWRlID8gYXR0ci5kYXRhLmJ5dGVMZW5ndGggLyBhdHRyLnN0cmlkZSA6IGF0dHIuZGF0YS5sZW5ndGggLyBhdHRyLnNpemUpO1xuICAgICAgICBhdHRyLmRpdmlzb3IgPSBhdHRyLmluc3RhbmNlZCB8fCAwO1xuICAgICAgICBhdHRyLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIGF0dHIudXNhZ2UgPSBhdHRyLnVzYWdlIHx8IHRoaXMuZ2wuU1RBVElDX0RSQVc7XG5cbiAgICAgICAgaWYgKCFhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgLy8gUHVzaCBkYXRhIHRvIGJ1ZmZlclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgZ2VvbWV0cnkgY291bnRzLiBJZiBpbmRleGVkLCBpZ25vcmUgcmVndWxhciBhdHRyaWJ1dGVzXG4gICAgICAgIGlmIChhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbnN0YW5jZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VkQ291bnQgJiYgdGhpcy5pbnN0YW5jZWRDb3VudCAhPT0gYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZ2VvbWV0cnkgaGFzIG11bHRpcGxlIGluc3RhbmNlZCBidWZmZXJzIG9mIGRpZmZlcmVudCBsZW5ndGgnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuaW5zdGFuY2VkQ291bnQgPSBNYXRoLm1pbih0aGlzLmluc3RhbmNlZENvdW50LCBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcjtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbmRleCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gYXR0ci5jb3VudDtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IE1hdGgubWF4KHRoaXMuZHJhd1JhbmdlLmNvdW50LCBhdHRyLmNvdW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUF0dHJpYnV0ZShhdHRyKSB7XG4gICAgICAgIGNvbnN0IGlzTmV3QnVmZmVyID0gIWF0dHIuYnVmZmVyO1xuICAgICAgICBpZiAoaXNOZXdCdWZmZXIpIGF0dHIuYnVmZmVyID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciAhPT0gYXR0ci5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcihhdHRyLnRhcmdldCwgYXR0ci5idWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyID0gYXR0ci5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3QnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoYXR0ci50YXJnZXQsIGF0dHIuZGF0YSwgYXR0ci51c2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlclN1YkRhdGEoYXR0ci50YXJnZXQsIDAsIGF0dHIuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0ci5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldEluZGV4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKCdpbmRleCcsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREcmF3UmFuZ2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gY291bnQ7XG4gICAgfVxuXG4gICAgc2V0SW5zdGFuY2VkQ291bnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNyZWF0ZVZBTyhwcm9ncmFtKSB7XG4gICAgICAgIHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSA9IHRoaXMuZ2wucmVuZGVyZXIuY3JlYXRlVmVydGV4QXJyYXkoKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkodGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKTtcbiAgICAgICAgdGhpcy5iaW5kQXR0cmlidXRlcyhwcm9ncmFtKTtcbiAgICB9XG5cbiAgICBiaW5kQXR0cmlidXRlcyhwcm9ncmFtKSB7XG4gICAgICAgIC8vIExpbmsgYWxsIGF0dHJpYnV0ZXMgdG8gcHJvZ3JhbSB1c2luZyBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyXG4gICAgICAgIHByb2dyYW0uYXR0cmlidXRlTG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uLCB7IG5hbWUsIHR5cGUgfSkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgZ2VvbWV0cnkgbWlzc2luZyBhIHJlcXVpcmVkIHNoYWRlciBhdHRyaWJ1dGVcbiAgICAgICAgICAgIGlmICghdGhpcy5hdHRyaWJ1dGVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBhY3RpdmUgYXR0cmlidXRlICR7bmFtZX0gbm90IGJlaW5nIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIoYXR0ci50YXJnZXQsIGF0dHIuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciA9IGF0dHIuYnVmZmVyO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWF0cml4IGF0dHJpYnV0ZXMsIGJ1ZmZlciBuZWVkcyB0byBiZSBkZWZpbmVkIHBlciBjb2x1bW5cbiAgICAgICAgICAgIGxldCBudW1Mb2MgPSAxO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc0KSBudW1Mb2MgPSAyOyAvLyBtYXQyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzUpIG51bUxvYyA9IDM7IC8vIG1hdDNcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NikgbnVtTG9jID0gNDsgLy8gbWF0NFxuXG4gICAgICAgICAgICBjb25zdCBzaXplID0gYXR0ci5zaXplIC8gbnVtTG9jO1xuICAgICAgICAgICAgY29uc3Qgc3RyaWRlID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIG51bUxvYyAqIDQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogNDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Mb2M7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiArIGksIHNpemUsIGF0dHIudHlwZSwgYXR0ci5ub3JtYWxpemVkLCBhdHRyLnN0cmlkZSArIHN0cmlkZSwgYXR0ci5vZmZzZXQgKyBpICogb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uICsgaSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2VkIGF0dHJpYnV0ZXMsIGRpdmlzb3IgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAgICAgICAgICAgIC8vIEZvciBmaXJlZm94LCBuZWVkIHRvIHNldCBiYWNrIHRvIDAgaWYgbm9uLWluc3RhbmNlZCBkcmF3biBhZnRlciBpbnN0YW5jZWQuIEVsc2Ugd29uJ3QgcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uICsgaSwgYXR0ci5kaXZpc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQmluZCBpbmRpY2VzIGlmIGdlb21ldHJ5IGluZGV4ZWRcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5idWZmZXIpO1xuICAgIH1cblxuICAgIGRyYXcoeyBwcm9ncmFtLCBtb2RlID0gdGhpcy5nbC5UUklBTkdMRVMgfSkge1xuICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgIT09IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSkgdGhpcy5jcmVhdGVWQU8ocHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBhdHRyaWJ1dGVzIG5lZWQgdXBkYXRpbmdcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHIubmVlZHNVcGRhdGUpIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3IgZHJhd0VsZW1lbnRzLCBvZmZzZXQgbmVlZHMgdG8gYmUgbXVsdGlwbGUgb2YgdHlwZSBzaXplXG4gICAgICAgIGxldCBpbmRleEJ5dGVzUGVyRWxlbWVudCA9IDI7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXg/LnR5cGUgPT09IHRoaXMuZ2wuVU5TSUdORURfSU5UKSBpbmRleEJ5dGVzUGVyRWxlbWVudCA9IDQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJbnN0YW5jZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdFbGVtZW50c0luc3RhbmNlZChcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgub2Zmc2V0ICsgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgKiBpbmRleEJ5dGVzUGVyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0FycmF5c0luc3RhbmNlZChtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQsIHRoaXMuaW5zdGFuY2VkQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIGluZGV4Qnl0ZXNQZXJFbGVtZW50XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kcmF3QXJyYXlzKG1vZGUsIHRoaXMuZHJhd1JhbmdlLnN0YXJ0LCB0aGlzLmRyYXdSYW5nZS5jb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIHBvc2l0aW9uIGJ1ZmZlciwgb3IgbWluL21heCBpZiBhdmFpbGFibGVcbiAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcbiAgICAgICAgLy8gaWYgKGF0dHIubWluKSByZXR1cm4gWy4uLmF0dHIubWluLCAuLi5hdHRyLm1heF07XG4gICAgICAgIGlmIChhdHRyLmRhdGEpIHJldHVybiBhdHRyO1xuICAgICAgICBpZiAoaXNCb3VuZHNXYXJuZWQpIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBwb3NpdGlvbiBidWZmZXIgZGF0YSBmb3VuZCB0byBjb21wdXRlIGJvdW5kcycpO1xuICAgICAgICByZXR1cm4gKGlzQm91bmRzV2FybmVkID0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29tcHV0ZUJvdW5kaW5nQm94KGF0dHIpIHtcbiAgICAgICAgaWYgKCFhdHRyKSBhdHRyID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBhcnJheSA9IGF0dHIuZGF0YTtcbiAgICAgICAgLy8gRGF0YSBsb2FkZWQgc2hvdWxkbid0IGhhYXZlIHN0cmlkZSwgb25seSBidWZmZXJzXG4gICAgICAgIC8vIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gYXR0ci5zaXplO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzID0ge1xuICAgICAgICAgICAgICAgIG1pbjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBtYXg6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIHJhZGl1czogSW5maW5pdHksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5ib3VuZHMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLmJvdW5kcy5tYXg7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRzLmNlbnRlcjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLmJvdW5kcy5zY2FsZTtcblxuICAgICAgICBtaW4uc2V0KCtJbmZpbml0eSk7XG4gICAgICAgIG1heC5zZXQoLUluZmluaXR5KTtcblxuICAgICAgICAvLyBUT0RPOiBjaGVjayBzaXplIG9mIHBvc2l0aW9uIChlZyB0cmlhbmdsZSB3aXRoIFZlYzIpXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBhcnJheVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBhcnJheVtpICsgMV07XG4gICAgICAgICAgICBjb25zdCB6ID0gYXJyYXlbaSArIDJdO1xuXG4gICAgICAgICAgICBtaW4ueCA9IE1hdGgubWluKHgsIG1pbi54KTtcbiAgICAgICAgICAgIG1pbi55ID0gTWF0aC5taW4oeSwgbWluLnkpO1xuICAgICAgICAgICAgbWluLnogPSBNYXRoLm1pbih6LCBtaW4ueik7XG5cbiAgICAgICAgICAgIG1heC54ID0gTWF0aC5tYXgoeCwgbWF4LngpO1xuICAgICAgICAgICAgbWF4LnkgPSBNYXRoLm1heCh5LCBtYXgueSk7XG4gICAgICAgICAgICBtYXgueiA9IE1hdGgubWF4KHosIG1heC56KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlLnN1YihtYXgsIG1pbik7XG4gICAgICAgIGNlbnRlci5hZGQobWluLCBtYXgpLmRpdmlkZSgyKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdTcGhlcmUoYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICAvLyBEYXRhIGxvYWRlZCBzaG91bGRuJ3QgaGFhdmUgc3RyaWRlLCBvbmx5IGJ1ZmZlcnNcbiAgICAgICAgLy8gY29uc3Qgc3RyaWRlID0gYXR0ci5zdHJpZGUgPyBhdHRyLnN0cmlkZSAvIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIDogYXR0ci5zaXplO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykgdGhpcy5jb21wdXRlQm91bmRpbmdCb3goYXR0cik7XG5cbiAgICAgICAgbGV0IG1heFJhZGl1c1NxID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgdGVtcFZlYzMuZnJvbUFycmF5KGFycmF5LCBpKTtcbiAgICAgICAgICAgIG1heFJhZGl1c1NxID0gTWF0aC5tYXgobWF4UmFkaXVzU3EsIHRoaXMuYm91bmRzLmNlbnRlci5zcXVhcmVkRGlzdGFuY2UodGVtcFZlYzMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYm91bmRzLnJhZGl1cyA9IE1hdGguc3FydChtYXhSYWRpdXNTcSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5WQU9zKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRlbGV0ZVZlcnRleEFycmF5KHRoaXMuVkFPc1trZXldKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLlZBT3Nba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLmF0dHJpYnV0ZXNba2V5XS5idWZmZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0uanMnO1xuaW1wb3J0IHsgTWF0MyB9IGZyb20gJy4uL21hdGgvTWF0My5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcblxubGV0IElEID0gMDtcblxuZXhwb3J0IGNsYXNzIE1lc2ggZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IGdlb21ldHJ5LCBwcm9ncmFtLCBtb2RlID0gZ2wuVFJJQU5HTEVTLCBmcnVzdHVtQ3VsbGVkID0gdHJ1ZSwgcmVuZGVyT3JkZXIgPSAwIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBNZXNoJyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAgICAgICAvLyBVc2VkIHRvIHNraXAgZnJ1c3R1bSBjdWxsaW5nXG4gICAgICAgIHRoaXMuZnJ1c3R1bUN1bGxlZCA9IGZydXN0dW1DdWxsZWQ7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgc29ydGluZyB0byBmb3JjZSBhbiBvcmRlclxuICAgICAgICB0aGlzLnJlbmRlck9yZGVyID0gcmVuZGVyT3JkZXI7XG4gICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5ub3JtYWxNYXRyaXggPSBuZXcgTWF0MygpO1xuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgb25CZWZvcmVSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvbkFmdGVyUmVuZGVyKGYpIHtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkcmF3KHsgY2FtZXJhIH0gPSB7fSkge1xuICAgICAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgICAgICAvLyBBZGQgZW1wdHkgbWF0cml4IHVuaWZvcm1zIHRvIHByb2dyYW0gaWYgdW5zZXRcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnByb2dyYW0udW5pZm9ybXMsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgdmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhUG9zaXRpb246IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBtYXRyaXggdW5pZm9ybXNcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4LnZhbHVlID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMuY2FtZXJhUG9zaXRpb24udmFsdWUgPSBjYW1lcmEud29ybGRQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy52aWV3TWF0cml4LnZhbHVlID0gY2FtZXJhLnZpZXdNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseShjYW1lcmEudmlld01hdHJpeCwgdGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5tb2RlbFZpZXdNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4LnZhbHVlID0gdGhpcy53b3JsZE1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbFZpZXdNYXRyaXgudmFsdWUgPSB0aGlzLm1vZGVsVmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5ub3JtYWxNYXRyaXgudmFsdWUgPSB0aGlzLm5vcm1hbE1hdHJpeDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcy5mb3JFYWNoKChmKSA9PiBmICYmIGYoeyBtZXNoOiB0aGlzLCBjYW1lcmEgfSkpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiBmYWNlcyBuZWVkIHRvIGJlIGZsaXBwZWQgLSB3aGVuIG1lc2ggc2NhbGVkIG5lZ2F0aXZlbHlcbiAgICAgICAgbGV0IGZsaXBGYWNlcyA9IHRoaXMucHJvZ3JhbS5jdWxsRmFjZSAmJiB0aGlzLndvcmxkTWF0cml4LmRldGVybWluYW50KCkgPCAwO1xuICAgICAgICB0aGlzLnByb2dyYW0udXNlKHsgZmxpcEZhY2VzIH0pO1xuICAgICAgICB0aGlzLmdlb21ldHJ5LmRyYXcoeyBtb2RlOiB0aGlzLm1vZGUsIHByb2dyYW06IHRoaXMucHJvZ3JhbSB9KTtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcy5mb3JFYWNoKChmKSA9PiBmICYmIGYoeyBtZXNoOiB0aGlzLCBjYW1lcmEgfSkpO1xuICAgIH1cbn1cbiIsIi8vIFRPRE86IHVwbG9hZCBlbXB0eSB0ZXh0dXJlIGlmIG51bGwgPyBtYXliZSBub3Rcbi8vIFRPRE86IHVwbG9hZCBpZGVudGl0eSBtYXRyaXggaWYgbnVsbCA/XG4vLyBUT0RPOiBzYW1wbGVyIEN1YmVcblxubGV0IElEID0gMTtcblxuLy8gY2FjaGUgb2YgdHlwZWQgYXJyYXlzIHVzZWQgdG8gZmxhdHRlbiB1bmlmb3JtIGFycmF5c1xuY29uc3QgYXJyYXlDYWNoZUYzMiA9IHt9O1xuXG5leHBvcnQgY2xhc3MgUHJvZ3JhbSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdsLFxuICAgICAgICB7XG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICAgIHVuaWZvcm1zID0ge30sXG5cbiAgICAgICAgICAgIHRyYW5zcGFyZW50ID0gZmFsc2UsXG4gICAgICAgICAgICBjdWxsRmFjZSA9IGdsLkJBQ0ssXG4gICAgICAgICAgICBmcm9udEZhY2UgPSBnbC5DQ1csXG4gICAgICAgICAgICBkZXB0aFRlc3QgPSB0cnVlLFxuICAgICAgICAgICAgZGVwdGhXcml0ZSA9IHRydWUsXG4gICAgICAgICAgICBkZXB0aEZ1bmMgPSBnbC5MRVFVQUwsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBQcm9ncmFtJyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IHVuaWZvcm1zO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICBpZiAoIXZlcnRleCkgY29uc29sZS53YXJuKCd2ZXJ0ZXggc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuICAgICAgICBpZiAoIWZyYWdtZW50KSBjb25zb2xlLndhcm4oJ2ZyYWdtZW50IHNoYWRlciBub3Qgc3VwcGxpZWQnKTtcblxuICAgICAgICAvLyBTdG9yZSBwcm9ncmFtIHN0YXRlXG4gICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSB0cmFuc3BhcmVudDtcbiAgICAgICAgdGhpcy5jdWxsRmFjZSA9IGN1bGxGYWNlO1xuICAgICAgICB0aGlzLmZyb250RmFjZSA9IGZyb250RmFjZTtcbiAgICAgICAgdGhpcy5kZXB0aFRlc3QgPSBkZXB0aFRlc3Q7XG4gICAgICAgIHRoaXMuZGVwdGhXcml0ZSA9IGRlcHRoV3JpdGU7XG4gICAgICAgIHRoaXMuZGVwdGhGdW5jID0gZGVwdGhGdW5jO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYyA9IHt9O1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24gPSB7fTtcbiAgICAgICAgdGhpcy5zdGVuY2lsRnVuYyA9IHt9O1xuICAgICAgICB0aGlzLnN0ZW5jaWxPcCA9IHt9XG5cbiAgICAgICAgLy8gc2V0IGRlZmF1bHQgYmxlbmRGdW5jIGlmIHRyYW5zcGFyZW50IGZsYWdnZWRcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwYXJlbnQgJiYgIXRoaXMuYmxlbmRGdW5jLnNyYykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2wucmVuZGVyZXIucHJlbXVsdGlwbGllZEFscGhhKSB0aGlzLnNldEJsZW5kRnVuYyh0aGlzLmdsLk9ORSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5TUkNfQUxQSEEsIHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgZW1wdHkgc2hhZGVycyBhbmQgYXR0YWNoIHRvIHByb2dyYW1cbiAgICAgICAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB0aGlzLnZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIHRoaXMuZnJhZ21lbnRTaGFkZXIpO1xuXG4gICAgICAgIC8vIENvbXBpbGUgc2hhZGVycyB3aXRoIHNvdXJjZVxuICAgICAgICB0aGlzLnNldFNoYWRlcnMoeyB2ZXJ0ZXgsIGZyYWdtZW50IH0pO1xuICAgIH1cblxuICAgIHNldFNoYWRlcnMoeyB2ZXJ0ZXgsIGZyYWdtZW50IH0pIHtcbiAgICAgICAgaWYgKHZlcnRleCkge1xuICAgICAgICAgICAgLy8gY29tcGlsZSB2ZXJ0ZXggc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZSh0aGlzLnZlcnRleFNoYWRlciwgdmVydGV4KTtcbiAgICAgICAgICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcih0aGlzLnZlcnRleFNoYWRlcik7XG4gICAgICAgICAgICBpZiAodGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHRoaXMudmVydGV4U2hhZGVyKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7dGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHRoaXMudmVydGV4U2hhZGVyKX1cXG5WZXJ0ZXggU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyh2ZXJ0ZXgpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAvLyBjb21waWxlIGZyYWdtZW50IHNoYWRlciBhbmQgbG9nIGVycm9yc1xuICAgICAgICAgICAgdGhpcy5nbC5zaGFkZXJTb3VyY2UodGhpcy5mcmFnbWVudFNoYWRlciwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHRoaXMuZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLmZyYWdtZW50U2hhZGVyKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7dGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHRoaXMuZnJhZ21lbnRTaGFkZXIpfVxcbkZyYWdtZW50IFNoYWRlclxcbiR7YWRkTGluZU51bWJlcnMoZnJhZ21lbnQpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSBwcm9ncmFtIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgIHRoaXMuZ2wubGlua1Byb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgaWYgKCF0aGlzLmdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCB0aGlzLmdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2Fybih0aGlzLmdsLmdldFByb2dyYW1JbmZvTG9nKHRoaXMucHJvZ3JhbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGFjdGl2ZSB1bmlmb3JtIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBudW1Vbmlmb3JtcyA9IHRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIHRoaXMuZ2wuQUNUSVZFX1VOSUZPUk1TKTtcbiAgICAgICAgZm9yIChsZXQgdUluZGV4ID0gMDsgdUluZGV4IDwgbnVtVW5pZm9ybXM7IHVJbmRleCsrKSB7XG4gICAgICAgICAgICBsZXQgdW5pZm9ybSA9IHRoaXMuZ2wuZ2V0QWN0aXZlVW5pZm9ybSh0aGlzLnByb2dyYW0sIHVJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KHVuaWZvcm0sIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgdW5pZm9ybS5uYW1lKSk7XG5cbiAgICAgICAgICAgIC8vIHNwbGl0IHVuaWZvcm1zJyBuYW1lcyB0byBzZXBhcmF0ZSBhcnJheSBhbmQgc3RydWN0IGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgY29uc3Qgc3BsaXQgPSB1bmlmb3JtLm5hbWUubWF0Y2goLyhcXHcrKS9nKTtcblxuICAgICAgICAgICAgdW5pZm9ybS51bmlmb3JtTmFtZSA9IHNwbGl0WzBdO1xuICAgICAgICAgICAgdW5pZm9ybS5uYW1lQ29tcG9uZW50cyA9IHNwbGl0LnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGFjdGl2ZSBhdHRyaWJ1dGUgbG9jYXRpb25zXG4gICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBsb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgbnVtQXR0cmlicyA9IHRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIHRoaXMuZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xuICAgICAgICBmb3IgKGxldCBhSW5kZXggPSAwOyBhSW5kZXggPCBudW1BdHRyaWJzOyBhSW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gdGhpcy5nbC5nZXRBY3RpdmVBdHRyaWIodGhpcy5wcm9ncmFtLCBhSW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgLy8gSWdub3JlIHNwZWNpYWwgYnVpbHQtaW4gaW5wdXRzLiBlZyBnbF9WZXJ0ZXhJRCwgZ2xfSW5zdGFuY2VJRFxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSAtMSkgY29udGludWU7XG4gICAgICAgICAgICBsb2NhdGlvbnNbbG9jYXRpb25dID0gYXR0cmlidXRlLm5hbWU7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucy5zZXQoYXR0cmlidXRlLCBsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVPcmRlciA9IGxvY2F0aW9ucy5qb2luKCcnKTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEZ1bmMoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSkge1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLmRzdCA9IGRzdDtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuc3JjQWxwaGEgPSBzcmNBbHBoYTtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGEgPSBkc3RBbHBoYTtcbiAgICAgICAgaWYgKHNyYykgdGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRFcXVhdGlvbihtb2RlUkdCLCBtb2RlQWxwaGEpIHtcbiAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPSBtb2RlUkdCO1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID0gbW9kZUFscGhhO1xuICAgIH1cblxuICAgIHNldFN0ZW5jaWxGdW5jKGZ1bmMsIHJlZiwgbWFzaykge1xuICAgICAgICB0aGlzLnN0ZW5jaWxSZWYgPSByZWY7XG4gICAgICAgIHRoaXMuc3RlbmNpbEZ1bmMuZnVuYyA9IGZ1bmM7XG4gICAgICAgIHRoaXMuc3RlbmNpbEZ1bmMucmVmID0gcmVmO1xuICAgICAgICB0aGlzLnN0ZW5jaWxGdW5jLm1hc2sgPSBtYXNrO1xuICAgIH1cblxuICAgIHNldFN0ZW5jaWxPcChzdGVuY2lsRmFpbCwgZGVwdGhGYWlsLCBkZXB0aFBhc3MpIHtcbiAgICAgICAgdGhpcy5zdGVuY2lsT3Auc3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcbiAgICAgICAgdGhpcy5zdGVuY2lsT3AuZGVwdGhGYWlsID0gZGVwdGhGYWlsO1xuICAgICAgICB0aGlzLnN0ZW5jaWxPcC5kZXB0aFBhc3MgPSBkZXB0aFBhc3M7XG4gICAgfVxuXG4gICAgYXBwbHlTdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVwdGhUZXN0KSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1bGxGYWNlKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcblxuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKSB0aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkJMRU5EKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5CTEVORCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuc2V0Q3VsbEZhY2UodGhpcy5jdWxsRmFjZSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aE1hc2sodGhpcy5kZXB0aFdyaXRlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXREZXB0aEZ1bmModGhpcy5kZXB0aEZ1bmMpO1xuICAgICAgICBpZiAodGhpcy5ibGVuZEZ1bmMuc3JjKSB0aGlzLmdsLnJlbmRlcmVyLnNldEJsZW5kRnVuYyh0aGlzLmJsZW5kRnVuYy5zcmMsIHRoaXMuYmxlbmRGdW5jLmRzdCwgdGhpcy5ibGVuZEZ1bmMuc3JjQWxwaGEsIHRoaXMuYmxlbmRGdW5jLmRzdEFscGhhKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRCbGVuZEVxdWF0aW9uKHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlUkdCLCB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhKTtcblxuICAgICAgICBpZih0aGlzLnN0ZW5jaWxGdW5jLmZ1bmMgfHwgdGhpcy5zdGVuY2lsT3Auc3RlbmNpbEZhaWwpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuU1RFTkNJTF9URVNUKVxuICAgICAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpXG5cbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRTdGVuY2lsRnVuYyh0aGlzLnN0ZW5jaWxGdW5jLmZ1bmMsIHRoaXMuc3RlbmNpbEZ1bmMucmVmLCB0aGlzLnN0ZW5jaWxGdW5jLm1hc2spXG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0U3RlbmNpbE9wKHRoaXMuc3RlbmNpbE9wLnN0ZW5jaWxGYWlsLCB0aGlzLnN0ZW5jaWxPcC5kZXB0aEZhaWwsIHRoaXMuc3RlbmNpbE9wLmRlcHRoUGFzcylcblxuICAgIH1cblxuICAgIHVzZSh7IGZsaXBGYWNlcyA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBsZXQgdGV4dHVyZVVuaXQgPSAtMTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbUFjdGl2ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPT09IHRoaXMuaWQ7XG5cbiAgICAgICAgLy8gQXZvaWQgZ2wgY2FsbCBpZiBwcm9ncmFtIGFscmVhZHkgaW4gdXNlXG4gICAgICAgIGlmICghcHJvZ3JhbUFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlLmN1cnJlbnRQcm9ncmFtID0gdGhpcy5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBvbmx5IHRoZSBhY3RpdmUgdW5pZm9ybXMgZm91bmQgaW4gdGhlIHNoYWRlclxuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIGFjdGl2ZVVuaWZvcm0pID0+IHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gdGhpcy51bmlmb3Jtc1thY3RpdmVVbmlmb3JtLnVuaWZvcm1OYW1lXTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgYWN0aXZlVW5pZm9ybS5uYW1lQ29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgIGlmICghdW5pZm9ybSkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50IGluIHVuaWZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuaWZvcm1bY29tcG9uZW50XTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodW5pZm9ybS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXVuaWZvcm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FybihgQWN0aXZlIHVuaWZvcm0gJHthY3RpdmVVbmlmb3JtLm5hbWV9IGhhcyBub3QgYmVlbiBzdXBwbGllZGApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5pZm9ybSAmJiB1bmlmb3JtLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FybihgJHthY3RpdmVVbmlmb3JtLm5hbWV9IHVuaWZvcm0gaXMgbWlzc2luZyBhIHZhbHVlIHBhcmFtZXRlcmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdCArIDE7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0ZXh0dXJlIG5lZWRzIHRvIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICB1bmlmb3JtLnZhbHVlLnVwZGF0ZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3IgdGV4dHVyZSBhcnJheXMsIHNldCB1bmlmb3JtIGFzIGFuIGFycmF5IG9mIHRleHR1cmUgdW5pdHMgaW5zdGVhZCBvZiBqdXN0IG9uZVxuICAgICAgICAgICAgaWYgKHVuaWZvcm0udmFsdWUubGVuZ3RoICYmIHVuaWZvcm0udmFsdWVbMF0udGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmVVbml0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXQgPSB0ZXh0dXJlVW5pdCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnVwZGF0ZSh0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVVbml0cy5wdXNoKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzZXRVbmlmb3JtKHRoaXMuZ2wsIGFjdGl2ZVVuaWZvcm0udHlwZSwgbG9jYXRpb24sIHRleHR1cmVVbml0cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdW5pZm9ybS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwbHlTdGF0ZSgpO1xuICAgICAgICBpZiAoZmxpcEZhY2VzKSB0aGlzLmdsLnJlbmRlcmVyLnNldEZyb250RmFjZSh0aGlzLmZyb250RmFjZSA9PT0gdGhpcy5nbC5DQ1cgPyB0aGlzLmdsLkNXIDogdGhpcy5nbC5DQ1cpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRVbmlmb3JtKGdsLCB0eXBlLCBsb2NhdGlvbiwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmxlbmd0aCA/IGZsYXR0ZW4odmFsdWUpIDogdmFsdWU7XG4gICAgY29uc3Qgc2V0VmFsdWUgPSBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLmdldChsb2NhdGlvbik7XG5cbiAgICAvLyBBdm9pZCByZWR1bmRhbnQgdW5pZm9ybSBjb21tYW5kc1xuICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB1bmRlZmluZWQgfHwgc2V0VmFsdWUubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGNsb25lIGFycmF5IHRvIHN0b3JlIGFzIGNhY2hlXG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUuc2xpY2UoMCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFycmF5c0VxdWFsKHNldFZhbHVlLCB2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNhY2hlZCBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIHNldFZhbHVlLnNldCA/IHNldFZhbHVlLnNldCh2YWx1ZSkgOiBzZXRBcnJheShzZXRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgZ2wucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb24sIHNldFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRWYWx1ZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgZ2wucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQobG9jYXRpb24sIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSA1MTI2OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IGdsLnVuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlKSA6IGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVFxuICAgICAgICBjYXNlIDM1NjY0OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDMlxuICAgICAgICBjYXNlIDM1NjY1OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDM1xuICAgICAgICBjYXNlIDM1NjY2OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm00ZnYobG9jYXRpb24sIHZhbHVlKTsgLy8gRkxPQVRfVkVDNFxuICAgICAgICBjYXNlIDM1NjcwOiAvLyBCT09MXG4gICAgICAgIGNhc2UgNTEyNDogLy8gSU5UXG4gICAgICAgIGNhc2UgMzU2Nzg6IC8vIFNBTVBMRVJfMkRcbiAgICAgICAgY2FzZSAzNjMwNjogLy8gVV9TQU1QTEVSXzJEXG4gICAgICAgIGNhc2UgMzU2ODA6IC8vIFNBTVBMRVJfQ1VCRVxuICAgICAgICBjYXNlIDM2Mjg5OiAvLyBTQU1QTEVSXzJEX0FSUkFZXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIFNBTVBMRVJfQ1VCRVxuICAgICAgICBjYXNlIDM1NjcxOiAvLyBCT09MX1ZFQzJcbiAgICAgICAgY2FzZSAzNTY2NzpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtMml2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NzI6IC8vIEJPT0xfVkVDM1xuICAgICAgICBjYXNlIDM1NjY4OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzNcbiAgICAgICAgY2FzZSAzNTY3MzogLy8gQk9PTF9WRUM0XG4gICAgICAgIGNhc2UgMzU2Njk6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDNFxuICAgICAgICBjYXNlIDM1Njc0OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXgyZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDJcbiAgICAgICAgY2FzZSAzNTY3NTpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4M2Z2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQzXG4gICAgICAgIGNhc2UgMzU2NzY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUNFxuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkTGluZU51bWJlcnMoc3RyaW5nKSB7XG4gICAgbGV0IGxpbmVzID0gc3RyaW5nLnNwbGl0KCdcXG4nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpbmVzW2ldID0gaSArIDEgKyAnOiAnICsgbGluZXNbaV07XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihhKSB7XG4gICAgY29uc3QgYXJyYXlMZW4gPSBhLmxlbmd0aDtcbiAgICBjb25zdCB2YWx1ZUxlbiA9IGFbMF0ubGVuZ3RoO1xuICAgIGlmICh2YWx1ZUxlbiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gYTtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheUxlbiAqIHZhbHVlTGVuO1xuICAgIGxldCB2YWx1ZSA9IGFycmF5Q2FjaGVGMzJbbGVuZ3RoXTtcbiAgICBpZiAoIXZhbHVlKSBhcnJheUNhY2hlRjMyW2xlbmd0aF0gPSB2YWx1ZSA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuOyBpKyspIHZhbHVlLnNldChhW2ldLCBpICogdmFsdWVMZW4pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRBcnJheShhLCBiKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBhW2ldID0gYltpXTtcbiAgICB9XG59XG5cbmxldCB3YXJuQ291bnQgPSAwO1xuZnVuY3Rpb24gd2FybihtZXNzYWdlKSB7XG4gICAgaWYgKHdhcm5Db3VudCA+IDEwMCkgcmV0dXJuO1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB3YXJuQ291bnQrKztcbiAgICBpZiAod2FybkNvdW50ID4gMTAwKSBjb25zb2xlLndhcm4oJ01vcmUgdGhhbiAxMDAgcHJvZ3JhbSB3YXJuaW5ncyAtIHN0b3BwaW5nIGxvZ3MuJyk7XG59XG4iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuLy8gVE9ETzogSGFuZGxlIGNvbnRleHQgbG9zcyBodHRwczovL3d3dy5raHJvbm9zLm9yZy93ZWJnbC93aWtpL0hhbmRsaW5nQ29udGV4dExvc3RcblxuLy8gTm90IGF1dG9tYXRpYyAtIGRldnMgdG8gdXNlIHRoZXNlIG1ldGhvZHMgbWFudWFsbHlcbi8vIGdsLmNvbG9yTWFzayggY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrICk7XG4vLyBnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7XG4vLyBnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTtcbi8vIGdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTtcbi8vIGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG4vLyBnbC5jbGVhclN0ZW5jaWwoIHN0ZW5jaWwgKTtcblxuY29uc3QgdGVtcFZlYzMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcbmxldCBJRCA9IDE7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgd2lkdGggPSAzMDAsXG4gICAgICAgIGhlaWdodCA9IDE1MCxcbiAgICAgICAgZHByID0gMSxcbiAgICAgICAgYWxwaGEgPSBmYWxzZSxcbiAgICAgICAgZGVwdGggPSB0cnVlLFxuICAgICAgICBzdGVuY2lsID0gZmFsc2UsXG4gICAgICAgIGFudGlhbGlhcyA9IGZhbHNlLFxuICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZSxcbiAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gZmFsc2UsXG4gICAgICAgIHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0JyxcbiAgICAgICAgYXV0b0NsZWFyID0gdHJ1ZSxcbiAgICAgICAgd2ViZ2wgPSAyLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0geyBhbHBoYSwgZGVwdGgsIHN0ZW5jaWwsIGFudGlhbGlhcywgcHJlbXVsdGlwbGllZEFscGhhLCBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIsIHBvd2VyUHJlZmVyZW5jZSB9O1xuICAgICAgICB0aGlzLmRwciA9IGRwcjtcbiAgICAgICAgdGhpcy5hbHBoYSA9IGFscGhhO1xuICAgICAgICB0aGlzLmNvbG9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgICAgICB0aGlzLnN0ZW5jaWwgPSBzdGVuY2lsO1xuICAgICAgICB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcbiAgICAgICAgdGhpcy5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIEF0dGVtcHQgV2ViR0wyIHVubGVzcyBmb3JjZWQgdG8gMSwgaWYgbm90IHN1cHBvcnRlZCBmYWxsYmFjayB0byBXZWJHTDFcbiAgICAgICAgaWYgKHdlYmdsID09PSAyKSB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIGF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmlzV2ViZ2wyID0gISF0aGlzLmdsO1xuICAgICAgICBpZiAoIXRoaXMuZ2wpIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgaWYgKCF0aGlzLmdsKSBjb25zb2xlLmVycm9yKCd1bmFibGUgdG8gY3JlYXRlIHdlYmdsIGNvbnRleHQnKTtcblxuICAgICAgICAvLyBBdHRhY2ggcmVuZGVyZXIgdG8gZ2wgc28gdGhhdCBhbGwgY2xhc3NlcyBoYXZlIGFjY2VzcyB0byBpbnRlcm5hbCBzdGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlciA9IHRoaXM7XG5cbiAgICAgICAgLy8gaW5pdGlhbGlzZSBzaXplIHZhbHVlc1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy8gZ2wgc3RhdGUgc3RvcmVzIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBvbiBtZXRob2RzIHVzZWQgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jID0geyBzcmM6IHRoaXMuZ2wuT05FLCBkc3Q6IHRoaXMuZ2wuWkVSTyB9O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24gPSB7IG1vZGVSR0I6IHRoaXMuZ2wuRlVOQ19BREQgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdWxsRmFjZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLmZyb250RmFjZSA9IHRoaXMuZ2wuQ0NXO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoTWFzayA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhGdW5jID0gdGhpcy5nbC5MRVFVQUw7XG4gICAgICAgIHRoaXMuc3RhdGUucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLmZsaXBZID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUudW5wYWNrQWxpZ25tZW50ID0gNDtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQgPSB7IHg6IDAsIHk6IDAsIHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS50ZXh0dXJlVW5pdHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IDA7XG4gICAgICAgIHRoaXMuc3RhdGUuYm91bmRCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudFByb2dyYW0gPSBudWxsO1xuXG4gICAgICAgIC8vIHN0b3JlIHJlcXVlc3RlZCBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgZXh0cmEgZm9ybWF0IHR5cGVzXG4gICAgICAgIGlmICh0aGlzLmlzV2ViZ2wyKSB7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF9zUkdCJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcblxuICAgICAgICAvLyBDcmVhdGUgbWV0aG9kIGFsaWFzZXMgdXNpbmcgZXh0ZW5zaW9uIChXZWJHTDEpIG9yIG5hdGl2ZSBpZiBhdmFpbGFibGUgKFdlYkdMMilcbiAgICAgICAgdGhpcy52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAndmVydGV4QXR0cmliRGl2aXNvcicsICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3QXJyYXlzSW5zdGFuY2VkID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAnZHJhd0FycmF5c0luc3RhbmNlZCcsICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3RWxlbWVudHNJbnN0YW5jZWQgPSB0aGlzLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsICdkcmF3RWxlbWVudHNJbnN0YW5jZWQnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdjcmVhdGVWZXJ0ZXhBcnJheScsICdjcmVhdGVWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmJpbmRWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdiaW5kVmVydGV4QXJyYXknLCAnYmluZFZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuZGVsZXRlVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnZGVsZXRlVmVydGV4QXJyYXknLCAnZGVsZXRlVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5kcmF3QnVmZmVycyA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnNXRUJHTCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIGRldmljZSBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMubWF4VGV4dHVyZVVuaXRzID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5tYXhBbmlzb3Ryb3B5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICAgICAgICAgICA/IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpXG4gICAgICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5nbC5jYW52YXMud2lkdGggPSB3aWR0aCAqIHRoaXMuZHByO1xuICAgICAgICB0aGlzLmdsLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLmRwcjtcblxuICAgICAgICBpZiAoIXRoaXMuZ2wuY2FudmFzLnN0eWxlKSByZXR1cm47XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5nbC5jYW52YXMuc3R5bGUsIHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICdweCcsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArICdweCcsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFZpZXdwb3J0KHdpZHRoLCBoZWlnaHQsIHggPSAwLCB5ID0gMCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aCA9PT0gd2lkdGggJiYgdGhpcy5zdGF0ZS52aWV3cG9ydC5oZWlnaHQgPT09IGhlaWdodCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LnggPSB4O1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LnkgPSB5O1xuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHNldFNjaXNzb3Iod2lkdGgsIGhlaWdodCwgeCA9IDAsIHkgPSAwKSB7XG4gICAgICAgIHRoaXMuZ2wuc2Npc3Nvcih4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBlbmFibGUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVbaWRdID09PSB0cnVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlKGlkKTtcbiAgICAgICAgdGhpcy5zdGF0ZVtpZF0gPSB0cnVlO1xuICAgIH1cblxuICAgIGRpc2FibGUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVbaWRdID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmRpc2FibGUoaWQpO1xuICAgICAgICB0aGlzLnN0YXRlW2lkXSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyYyA9PT0gc3JjICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3QgPT09IGRzdCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjQWxwaGEgPT09IHNyY0FscGhhICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3RBbHBoYSA9PT0gZHN0QWxwaGFcbiAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdCA9IGRzdDtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjQWxwaGEgPSBzcmNBbHBoYTtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0QWxwaGEgPSBkc3RBbHBoYTtcbiAgICAgICAgaWYgKHNyY0FscGhhICE9PSB1bmRlZmluZWQpIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5ibGVuZEZ1bmMoc3JjLCBkc3QpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRXF1YXRpb24obW9kZVJHQiwgbW9kZUFscGhhKSB7XG4gICAgICAgIG1vZGVSR0IgPSBtb2RlUkdCIHx8IHRoaXMuZ2wuRlVOQ19BREQ7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9PT0gbW9kZVJHQiAmJiB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID09PSBtb2RlQWxwaGEpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPSBtb2RlUkdCO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID0gbW9kZUFscGhhO1xuICAgICAgICBpZiAobW9kZUFscGhhICE9PSB1bmRlZmluZWQpIHRoaXMuZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKG1vZGVSR0IsIG1vZGVBbHBoYSk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5ibGVuZEVxdWF0aW9uKG1vZGVSR0IpO1xuICAgIH1cblxuICAgIHNldEN1bGxGYWNlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmN1bGxGYWNlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmN1bGxGYWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuY3VsbEZhY2UodmFsdWUpO1xuICAgIH1cblxuICAgIHNldEZyb250RmFjZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mcm9udEZhY2UgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZnJvbnRGYWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREZXB0aE1hc2sodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGVwdGhNYXNrID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmRlcHRoTWFzayA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmRlcHRoTWFzayh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RGVwdGhGdW5jKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlcHRoRnVuYyA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5kZXB0aEZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIHNldFN0ZW5jaWxNYXNrKHZhbHVlKSB7XG4gICAgICAgIGlmKHRoaXMuc3RhdGUuc3RlbmNpbE1hc2sgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbE1hc2sgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5zdGVuY2lsTWFzayh2YWx1ZSlcbiAgICB9XG5cbiAgICBzZXRTdGVuY2lsRnVuYyhmdW5jLCByZWYsIG1hc2spIHtcblxuICAgICAgICBpZigodGhpcy5zdGF0ZS5zdGVuY2lsRnVuYyA9PT0gZnVuYykgJiZcbiAgICAgICAgICAgICh0aGlzLnN0YXRlLnN0ZW5jaWxSZWYgPT09IHJlZikgJiZcbiAgICAgICAgICAgICh0aGlzLnN0YXRlLnN0ZW5jaWxGdW5jTWFzayA9PT0gbWFzaylcbiAgICAgICAgKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5zdGF0ZS5zdGVuY2lsRnVuYyA9IGZ1bmMgfHwgdGhpcy5nbC5BTFdBWVM7XG4gICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbFJlZiA9IHJlZiB8fCAwO1xuICAgICAgICB0aGlzLnN0YXRlLnN0ZW5jaWxGdW5jTWFzayA9IG1hc2sgfHwgMDtcblxuICAgICAgICB0aGlzLmdsLnN0ZW5jaWxGdW5jKGZ1bmMgfHwgdGhpcy5nbC5BTFdBWVMsIHJlZiB8fCAwLCBtYXNrIHx8IDApO1xuICAgIH1cblxuICAgIHNldFN0ZW5jaWxPcChzdGVuY2lsRmFpbCwgZGVwdGhGYWlsLCBkZXB0aFBhc3MpIHtcblxuICAgICAgICBpZih0aGlzLnN0YXRlLnN0ZW5jaWxGYWlsID09PSBzdGVuY2lsRmFpbCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zdGVuY2lsRGVwdGhGYWlsID09PSBkZXB0aEZhaWwgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbERlcHRoUGFzcyA9PT0gZGVwdGhQYXNzXG4gICAgICAgICkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc3RhdGUuc3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcbiAgICAgICAgdGhpcy5zdGF0ZS5zdGVuY2lsRGVwdGhGYWlsID0gZGVwdGhGYWlsO1xuICAgICAgICB0aGlzLnN0YXRlLnN0ZW5jaWxEZXB0aFBhc3MgPSBkZXB0aFBhc3M7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmdsLnN0ZW5jaWxPcChzdGVuY2lsRmFpbCwgZGVwdGhGYWlsLCBkZXB0aFBhc3MpO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBhY3RpdmVUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmFjdGl2ZVRleHR1cmVVbml0ID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZVRleHR1cmVVbml0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwICsgdmFsdWUpO1xuICAgIH1cblxuICAgIGJpbmRGcmFtZWJ1ZmZlcih7IHRhcmdldCA9IHRoaXMuZ2wuRlJBTUVCVUZGRVIsIGJ1ZmZlciA9IG51bGwgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZyYW1lYnVmZmVyID09PSBidWZmZXIpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuICAgIH1cblxuICAgIGdldEV4dGVuc2lvbihleHRlbnNpb24sIHdlYmdsMkZ1bmMsIGV4dEZ1bmMpIHtcbiAgICAgICAgLy8gaWYgd2ViZ2wyIGZ1bmN0aW9uIHN1cHBvcnRlZCwgcmV0dXJuIGZ1bmMgYm91bmQgdG8gZ2wgY29udGV4dFxuICAgICAgICBpZiAod2ViZ2wyRnVuYyAmJiB0aGlzLmdsW3dlYmdsMkZ1bmNdKSByZXR1cm4gdGhpcy5nbFt3ZWJnbDJGdW5jXS5iaW5kKHRoaXMuZ2wpO1xuXG4gICAgICAgIC8vIGZldGNoIGV4dGVuc2lvbiBvbmNlIG9ubHlcbiAgICAgICAgaWYgKCF0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSkge1xuICAgICAgICAgICAgdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0gPSB0aGlzLmdsLmdldEV4dGVuc2lvbihleHRlbnNpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIGV4dGVuc2lvbiBpZiBubyBmdW5jdGlvbiByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKCF3ZWJnbDJGdW5jKSByZXR1cm4gdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl07XG5cbiAgICAgICAgLy8gUmV0dXJuIG51bGwgaWYgZXh0ZW5zaW9uIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgaWYgKCF0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgLy8gcmV0dXJuIGV4dGVuc2lvbiBmdW5jdGlvbiwgYm91bmQgdG8gZXh0ZW5zaW9uXG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXVtleHRGdW5jXS5iaW5kKHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dKTtcbiAgICB9XG5cbiAgICBzb3J0T3BhcXVlKGEsIGIpIHtcbiAgICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChhLnByb2dyYW0uaWQgIT09IGIucHJvZ3JhbS5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJvZ3JhbS5pZCAtIGIucHJvZ3JhbS5pZDtcbiAgICAgICAgfSBlbHNlIGlmIChhLnpEZXB0aCAhPT0gYi56RGVwdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnpEZXB0aCAtIGIuekRlcHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc29ydFRyYW5zcGFyZW50KGEsIGIpIHtcbiAgICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS56RGVwdGggIT09IGIuekRlcHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYi56RGVwdGggLSBhLnpEZXB0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNvcnRVSShhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5wcm9ncmFtLmlkICE9PSBiLnByb2dyYW0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRSZW5kZXJMaXN0KHsgc2NlbmUsIGNhbWVyYSwgZnJ1c3R1bUN1bGwsIHNvcnQgfSkge1xuICAgICAgICBsZXQgcmVuZGVyTGlzdCA9IFtdO1xuXG4gICAgICAgIGlmIChjYW1lcmEgJiYgZnJ1c3R1bUN1bGwpIGNhbWVyYS51cGRhdGVGcnVzdHVtKCk7XG5cbiAgICAgICAgLy8gR2V0IHZpc2libGVcbiAgICAgICAgc2NlbmUudHJhdmVyc2UoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmICghbm9kZS52aXNpYmxlKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghbm9kZS5kcmF3KSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChmcnVzdHVtQ3VsbCAmJiBub2RlLmZydXN0dW1DdWxsZWQgJiYgY2FtZXJhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYW1lcmEuZnJ1c3R1bUludGVyc2VjdHNNZXNoKG5vZGUpKSByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlckxpc3QucHVzaChub2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNvcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wYXF1ZSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNwYXJlbnQgPSBbXTsgLy8gZGVwdGhUZXN0IHRydWVcbiAgICAgICAgICAgIGNvbnN0IHVpID0gW107IC8vIGRlcHRoVGVzdCBmYWxzZVxuXG4gICAgICAgICAgICByZW5kZXJMaXN0LmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBpbnRvIHRoZSAzIHJlbmRlciBncm91cHNcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUucHJvZ3JhbS50cmFuc3BhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICBvcGFxdWUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUucHJvZ3JhbS5kZXB0aFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1aS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGUuekRlcHRoID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgY2FsY3VsYXRlIHotZGVwdGggaWYgcmVuZGVyT3JkZXIgdW5zZXQgYW5kIGRlcHRoVGVzdCBpcyB0cnVlXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucmVuZGVyT3JkZXIgIT09IDAgfHwgIW5vZGUucHJvZ3JhbS5kZXB0aFRlc3QgfHwgIWNhbWVyYSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHotZGVwdGhcbiAgICAgICAgICAgICAgICBub2RlLndvcmxkTWF0cml4LmdldFRyYW5zbGF0aW9uKHRlbXBWZWMzKTtcbiAgICAgICAgICAgICAgICB0ZW1wVmVjMy5hcHBseU1hdHJpeDQoY2FtZXJhLnByb2plY3Rpb25WaWV3TWF0cml4KTtcbiAgICAgICAgICAgICAgICBub2RlLnpEZXB0aCA9IHRlbXBWZWMzLno7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3BhcXVlLnNvcnQodGhpcy5zb3J0T3BhcXVlKTtcbiAgICAgICAgICAgIHRyYW5zcGFyZW50LnNvcnQodGhpcy5zb3J0VHJhbnNwYXJlbnQpO1xuICAgICAgICAgICAgdWkuc29ydCh0aGlzLnNvcnRVSSk7XG5cbiAgICAgICAgICAgIHJlbmRlckxpc3QgPSBvcGFxdWUuY29uY2F0KHRyYW5zcGFyZW50LCB1aSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyTGlzdDtcbiAgICB9XG5cbiAgICByZW5kZXIoeyBzY2VuZSwgY2FtZXJhLCB0YXJnZXQgPSBudWxsLCB1cGRhdGUgPSB0cnVlLCBzb3J0ID0gdHJ1ZSwgZnJ1c3R1bUN1bGwgPSB0cnVlLCBjbGVhciB9KSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBubyByZW5kZXIgdGFyZ2V0IGJvdW5kIHNvIGRyYXdzIHRvIGNhbnZhc1xuICAgICAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQodGhpcy53aWR0aCAqIHRoaXMuZHByLCB0aGlzLmhlaWdodCAqIHRoaXMuZHByKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJpbmQgc3VwcGxpZWQgcmVuZGVyIHRhcmdldCBhbmQgdXBkYXRlIHZpZXdwb3J0XG4gICAgICAgICAgICB0aGlzLmJpbmRGcmFtZWJ1ZmZlcih0YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydCh0YXJnZXQud2lkdGgsIHRhcmdldC5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsZWFyIHx8ICh0aGlzLmF1dG9DbGVhciAmJiBjbGVhciAhPT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgZGVwdGggYnVmZmVyIHdyaXRpbmcgaXMgZW5hYmxlZCBzbyBpdCBjYW4gYmUgY2xlYXJlZFxuICAgICAgICAgICAgaWYgKHRoaXMuZGVwdGggJiYgKCF0YXJnZXQgfHwgdGFyZ2V0LmRlcHRoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREZXB0aE1hc2sodHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNhbWUgZm9yIHN0ZW5jaWxcbiAgICAgICAgICAgIGlmKHRoaXMuc3RlbmNpbCB8fCAoIXRhcmdldCB8fCB0YXJnZXQuc3RlbmNpbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSh0aGlzLmdsLlNURU5DSUxfVEVTVCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGVuY2lsTWFzaygweGZmKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmdsLmNsZWFyKFxuICAgICAgICAgICAgICAgICh0aGlzLmNvbG9yID8gdGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5kZXB0aCA/IHRoaXMuZ2wuREVQVEhfQlVGRkVSX0JJVCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3RlbmNpbCA/IHRoaXMuZ2wuU1RFTkNJTF9CVUZGRVJfQklUIDogMClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGVzIGFsbCBzY2VuZSBncmFwaCBtYXRyaWNlc1xuICAgICAgICBpZiAodXBkYXRlKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBjYW1lcmEgc2VwYXJhdGVseSwgaW4gY2FzZSBub3QgaW4gc2NlbmUgZ3JhcGhcbiAgICAgICAgaWYgKGNhbWVyYSkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cbiAgICAgICAgLy8gR2V0IHJlbmRlciBsaXN0IC0gZW50YWlscyBjdWxsaW5nIGFuZCBzb3J0aW5nXG4gICAgICAgIGNvbnN0IHJlbmRlckxpc3QgPSB0aGlzLmdldFJlbmRlckxpc3QoeyBzY2VuZSwgY2FtZXJhLCBmcnVzdHVtQ3VsbCwgc29ydCB9KTtcblxuICAgICAgICByZW5kZXJMaXN0LmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUuZHJhdyh7IGNhbWVyYSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gVE9ETzogZGVsZXRlIHRleHR1cmVcbi8vIFRPRE86IHVzZSB0ZXhTdWJJbWFnZTJEIGZvciB1cGRhdGVzICh2aWRlbyBvciB3aGVuIGxvYWRlZClcbi8vIFRPRE86IG5lZWQ/IGVuY29kaW5nID0gbGluZWFyRW5jb2Rpbmdcbi8vIFRPRE86IHN1cHBvcnQgbm9uLWNvbXByZXNzZWQgbWlwbWFwcyB1cGxvYWRzXG5cbmNvbnN0IGVtcHR5UGl4ZWwgPSBuZXcgVWludDhBcnJheSg0KTtcblxuZnVuY3Rpb24gaXNQb3dlck9mMih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT09IDA7XG59XG5cbmxldCBJRCA9IDE7XG5cbmV4cG9ydCBjbGFzcyBUZXh0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2wsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgdGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgIHR5cGUgPSBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICAgICAgZm9ybWF0ID0gZ2wuUkdCQSxcbiAgICAgICAgICAgIGludGVybmFsRm9ybWF0ID0gZm9ybWF0LFxuICAgICAgICAgICAgd3JhcFMgPSBnbC5DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgd3JhcFQgPSBnbC5DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgd3JhcFIgPSBnbC5DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgZ2VuZXJhdGVNaXBtYXBzID0gdGFyZ2V0ID09PSAoZ2wuVEVYVFVSRV8yRCB8fCBnbC5URVhUVVJFX0NVQkVfTUFQKSxcbiAgICAgICAgICAgIG1pbkZpbHRlciA9IGdlbmVyYXRlTWlwbWFwcyA/IGdsLk5FQVJFU1RfTUlQTUFQX0xJTkVBUiA6IGdsLkxJTkVBUixcbiAgICAgICAgICAgIG1hZ0ZpbHRlciA9IGdsLkxJTkVBUixcbiAgICAgICAgICAgIHByZW11bHRpcGx5QWxwaGEgPSBmYWxzZSxcbiAgICAgICAgICAgIHVucGFja0FsaWdubWVudCA9IDQsXG4gICAgICAgICAgICBmbGlwWSA9IHRhcmdldCA9PSAoZ2wuVEVYVFVSRV8yRCB8fCBnbC5URVhUVVJFXzNEKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaXNvdHJvcHkgPSAwLFxuICAgICAgICAgICAgbGV2ZWwgPSAwLFxuICAgICAgICAgICAgd2lkdGgsIC8vIHVzZWQgZm9yIFJlbmRlclRhcmdldHMgb3IgRGF0YSBUZXh0dXJlc1xuICAgICAgICAgICAgaGVpZ2h0ID0gd2lkdGgsXG4gICAgICAgICAgICBsZW5ndGggPSAxLFxuICAgICAgICB9ID0ge31cbiAgICApIHtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgdGhpcy5pbnRlcm5hbEZvcm1hdCA9IGludGVybmFsRm9ybWF0O1xuICAgICAgICB0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlcjtcbiAgICAgICAgdGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXI7XG4gICAgICAgIHRoaXMud3JhcFMgPSB3cmFwUztcbiAgICAgICAgdGhpcy53cmFwVCA9IHdyYXBUO1xuICAgICAgICB0aGlzLndyYXBSID0gd3JhcFI7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuICAgICAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBwcmVtdWx0aXBseUFscGhhO1xuICAgICAgICB0aGlzLnVucGFja0FsaWdubWVudCA9IHVucGFja0FsaWdubWVudDtcbiAgICAgICAgdGhpcy5mbGlwWSA9IGZsaXBZO1xuICAgICAgICB0aGlzLmFuaXNvdHJvcHkgPSBNYXRoLm1pbihhbmlzb3Ryb3B5LCB0aGlzLmdsLnJlbmRlcmVyLnBhcmFtZXRlcnMubWF4QW5pc290cm9weSk7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG4gICAgICAgIHRoaXMuc3RvcmUgPSB7XG4gICAgICAgICAgICBpbWFnZTogbnVsbCxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBBbGlhcyBmb3Igc3RhdGUgc3RvcmUgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIGZvciBnbG9iYWwgc3RhdGVcbiAgICAgICAgdGhpcy5nbFN0YXRlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZTtcblxuICAgICAgICAvLyBTdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIHBlci10ZXh0dXJlIHN0YXRlXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0ZS5taW5GaWx0ZXIgPSB0aGlzLmdsLk5FQVJFU1RfTUlQTUFQX0xJTkVBUjtcbiAgICAgICAgdGhpcy5zdGF0ZS5tYWdGaWx0ZXIgPSB0aGlzLmdsLkxJTkVBUjtcbiAgICAgICAgdGhpcy5zdGF0ZS53cmFwUyA9IHRoaXMuZ2wuUkVQRUFUO1xuICAgICAgICB0aGlzLnN0YXRlLndyYXBUID0gdGhpcy5nbC5SRVBFQVQ7XG4gICAgICAgIHRoaXMuc3RhdGUuYW5pc290cm9weSA9IDA7XG4gICAgfVxuXG4gICAgYmluZCgpIHtcbiAgICAgICAgLy8gQWxyZWFkeSBib3VuZCB0byBhY3RpdmUgdGV4dHVyZSB1bml0XG4gICAgICAgIGlmICh0aGlzLmdsU3RhdGUudGV4dHVyZVVuaXRzW3RoaXMuZ2xTdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdF0gPT09IHRoaXMuaWQpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLnRhcmdldCwgdGhpcy50ZXh0dXJlKTtcbiAgICAgICAgdGhpcy5nbFN0YXRlLnRleHR1cmVVbml0c1t0aGlzLmdsU3RhdGUuYWN0aXZlVGV4dHVyZVVuaXRdID0gdGhpcy5pZDtcbiAgICB9XG5cbiAgICB1cGRhdGUodGV4dHVyZVVuaXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IG5lZWRzVXBkYXRlID0gISh0aGlzLmltYWdlID09PSB0aGlzLnN0b3JlLmltYWdlICYmICF0aGlzLm5lZWRzVXBkYXRlKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0ZXh0dXJlIGlzIGJvdW5kIHRvIGl0cyB0ZXh0dXJlIHVuaXRcbiAgICAgICAgaWYgKG5lZWRzVXBkYXRlIHx8IHRoaXMuZ2xTdGF0ZS50ZXh0dXJlVW5pdHNbdGV4dHVyZVVuaXRdICE9PSB0aGlzLmlkKSB7XG4gICAgICAgICAgICAvLyBzZXQgYWN0aXZlIHRleHR1cmUgdW5pdCB0byBwZXJmb3JtIHRleHR1cmUgZnVuY3Rpb25zXG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5lZWRzVXBkYXRlKSByZXR1cm47XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5mbGlwWSAhPT0gdGhpcy5nbFN0YXRlLmZsaXBZKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGhpcy5mbGlwWSk7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuZmxpcFkgPSB0aGlzLmZsaXBZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJlbXVsdGlwbHlBbHBoYSAhPT0gdGhpcy5nbFN0YXRlLnByZW11bHRpcGx5QWxwaGEpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRoaXMucHJlbXVsdGlwbHlBbHBoYSk7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUucHJlbXVsdGlwbHlBbHBoYSA9IHRoaXMucHJlbXVsdGlwbHlBbHBoYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnVucGFja0FsaWdubWVudCAhPT0gdGhpcy5nbFN0YXRlLnVucGFja0FsaWdubWVudCkge1xuICAgICAgICAgICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19BTElHTk1FTlQsIHRoaXMudW5wYWNrQWxpZ25tZW50KTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS51bnBhY2tBbGlnbm1lbnQgPSB0aGlzLnVucGFja0FsaWdubWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1pbkZpbHRlciAhPT0gdGhpcy5zdGF0ZS5taW5GaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsIHRoaXMubWluRmlsdGVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubWluRmlsdGVyID0gdGhpcy5taW5GaWx0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYWdGaWx0ZXIgIT09IHRoaXMuc3RhdGUubWFnRmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCB0aGlzLm1hZ0ZpbHRlcik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLm1hZ0ZpbHRlciA9IHRoaXMubWFnRmlsdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcFMgIT09IHRoaXMuc3RhdGUud3JhcFMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfUywgdGhpcy53cmFwUyk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLndyYXBTID0gdGhpcy53cmFwUztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndyYXBUICE9PSB0aGlzLnN0YXRlLndyYXBUKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1QsIHRoaXMud3JhcFQpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS53cmFwVCA9IHRoaXMud3JhcFQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53cmFwUiAhPT0gdGhpcy5zdGF0ZS53cmFwUikge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9SLCB0aGlzLndyYXBSKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUud3JhcFIgPSB0aGlzLndyYXBSO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYW5pc290cm9weSAmJiB0aGlzLmFuaXNvdHJvcHkgIT09IHRoaXMuc3RhdGUuYW5pc290cm9weSkge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJmKHRoaXMudGFyZ2V0LCB0aGlzLmdsLnJlbmRlcmVyLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIHRoaXMuYW5pc290cm9weSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbWFnZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2Uud2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV9DVUJFX01BUCkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBjdWJlIG1hcHNcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGlzLmltYWdlKSkge1xuICAgICAgICAgICAgICAgIC8vIERhdGEgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzJEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV8yRF9BUlJBWSB8fCB0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFXzNEKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UzRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMubGVuZ3RoLCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW1hZ2UuaXNDb21wcmVzc2VkVGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIC8vIENvbXByZXNzZWQgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0aGlzLmltYWdlLmxlbmd0aDsgbGV2ZWwrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCBsZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy5pbWFnZVtsZXZlbF0ud2lkdGgsIHRoaXMuaW1hZ2VbbGV2ZWxdLmhlaWdodCwgMCwgdGhpcy5pbWFnZVtsZXZlbF0uZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZWd1bGFyIHRleHR1cmVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV8yRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIHRoaXMubGV2ZWwsIHRoaXMuaW50ZXJuYWxGb3JtYXQsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UzRCh0aGlzLnRhcmdldCwgdGhpcy5sZXZlbCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMubGVuZ3RoLCAwLCB0aGlzLmZvcm1hdCwgdGhpcy50eXBlLCB0aGlzLmltYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdlbmVyYXRlTWlwbWFwcykge1xuICAgICAgICAgICAgICAgIC8vIEZvciBXZWJHTDEsIGlmIG5vdCBhIHBvd2VyIG9mIDIsIHR1cm4gb2ZmIG1pcHMsIHNldCB3cmFwcGluZyB0byBjbGFtcCB0byBlZGdlIGFuZCBtaW5GaWx0ZXIgdG8gbGluZWFyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdsLnJlbmRlcmVyLmlzV2ViZ2wyICYmICghaXNQb3dlck9mMih0aGlzLmltYWdlLndpZHRoKSB8fCAhaXNQb3dlck9mMih0aGlzLmltYWdlLmhlaWdodCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JhcFMgPSB0aGlzLndyYXBUID0gdGhpcy5nbC5DTEFNUF9UT19FREdFO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbkZpbHRlciA9IHRoaXMuZ2wuTElORUFSO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuZ2VuZXJhdGVNaXBtYXAodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsbGJhY2sgZm9yIHdoZW4gZGF0YSBpcyBwdXNoZWQgdG8gR1BVXG4gICAgICAgICAgICB0aGlzLm9uVXBkYXRlICYmIHRoaXMub25VcGRhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gdGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBsb2FkIGVtcHR5IHBpeGVsIGZvciBlYWNoIHNpZGUgd2hpbGUgbm8gaW1hZ2UgdG8gYXZvaWQgZXJyb3JzIHdoaWxlIGltYWdlIG9yIHZpZGVvIGxvYWRpbmdcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwLCB0aGlzLmdsLlJHQkEsIDEsIDEsIDAsIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCBlbXB0eVBpeGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAvLyBpbWFnZSBpbnRlbnRpb25hbGx5IGxlZnQgbnVsbCBmb3IgUmVuZGVyVGFyZ2V0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSB0aGlzLmdsLlRFWFRVUkVfMkQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTNEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sZW5ndGgsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVXBsb2FkIGVtcHR5IHBpeGVsIGlmIG5vIGltYWdlIHRvIGF2b2lkIGVycm9ycyB3aGlsZSBpbWFnZSBvciB2aWRlbyBsb2FkaW5nXG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCAwLCB0aGlzLmdsLlJHQkEsIDEsIDEsIDAsIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCBlbXB0eVBpeGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3JlLmltYWdlID0gdGhpcy5pbWFnZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcbmltcG9ydCB7IFF1YXQgfSBmcm9tICcuLi9tYXRoL1F1YXQuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uL21hdGgvTWF0NC5qcyc7XG5pbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uL21hdGgvRXVsZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbiA9IG5ldyBRdWF0KCk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMygxKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuICAgICAgICB0aGlzLnVwID0gbmV3IFZlYzMoMCwgMSwgMCk7XG5cbiAgICAgICAgdGhpcy5yb3RhdGlvbi5fdGFyZ2V0Lm9uQ2hhbmdlID0gKCkgPT4gdGhpcy5xdWF0ZXJuaW9uLmZyb21FdWxlcih0aGlzLnJvdGF0aW9uLCB0cnVlKTtcbiAgICAgICAgdGhpcy5xdWF0ZXJuaW9uLl90YXJnZXQub25DaGFuZ2UgPSAoKSA9PiB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbiwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQocGFyZW50LCBub3RpZnlQYXJlbnQgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMucGFyZW50KSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBpZiAobm90aWZ5UGFyZW50ICYmIHBhcmVudCkgcGFyZW50LmFkZENoaWxkKHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhZGRDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghfnRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkpIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChub3RpZnlDaGlsZCkgY2hpbGQuc2V0UGFyZW50KHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpKSB0aGlzLmNoaWxkcmVuLnNwbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCAxKTtcbiAgICAgICAgaWYgKG5vdGlmeUNoaWxkKSBjaGlsZC5zZXRQYXJlbnQobnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUpIHRoaXMudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIGlmICh0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkgdGhpcy53b3JsZE1hdHJpeC5jb3B5KHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy53b3JsZE1hdHJpeC5tdWx0aXBseSh0aGlzLnBhcmVudC53b3JsZE1hdHJpeCwgdGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeCgpIHtcbiAgICAgICAgdGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnF1YXRlcm5pb24sIHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRyYXZlcnNlKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIGluIGNhbGxiYWNrIHRvIHN0b3AgdHJhdmVyc2luZyBjaGlsZHJlblxuICAgICAgICBpZiAoY2FsbGJhY2sodGhpcykpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS50cmF2ZXJzZShjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNvbXBvc2UoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmRlY29tcG9zZSh0aGlzLnF1YXRlcm5pb24uX3RhcmdldCwgdGhpcy5wb3NpdGlvbiwgdGhpcy5zY2FsZSk7XG4gICAgICAgIHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG5cbiAgICBsb29rQXQodGFyZ2V0LCBpbnZlcnQgPSBmYWxzZSkge1xuICAgICAgICBpZiAoaW52ZXJ0KSB0aGlzLm1hdHJpeC5sb29rQXQodGhpcy5wb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLnVwKTtcbiAgICAgICAgZWxzZSB0aGlzLm1hdHJpeC5sb29rQXQodGFyZ2V0LCB0aGlzLnBvc2l0aW9uLCB0aGlzLnVwKTtcbiAgICAgICAgdGhpcy5tYXRyaXguZ2V0Um90YXRpb24odGhpcy5xdWF0ZXJuaW9uLl90YXJnZXQpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9jb3JlL0dlb21ldHJ5LmpzJztcblxuZXhwb3J0IGNsYXNzIFBsYW5lIGV4dGVuZHMgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgYXR0cmlidXRlcyA9IHt9IH0gPSB7fSkge1xuICAgICAgICBjb25zdCB3U2VncyA9IHdpZHRoU2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGhTZWdzID0gaGVpZ2h0U2VnbWVudHM7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGxlbmd0aCBvZiBhcnJheXNcbiAgICAgICAgY29uc3QgbnVtID0gKHdTZWdzICsgMSkgKiAoaFNlZ3MgKyAxKTtcbiAgICAgICAgY29uc3QgbnVtSW5kaWNlcyA9IHdTZWdzICogaFNlZ3MgKiA2O1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGVtcHR5IGFycmF5cyBvbmNlXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAzKTtcbiAgICAgICAgY29uc3QgdXYgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDIpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG51bUluZGljZXMgPiA2NTUzNiA/IG5ldyBVaW50MzJBcnJheShudW1JbmRpY2VzKSA6IG5ldyBVaW50MTZBcnJheShudW1JbmRpY2VzKTtcblxuICAgICAgICBQbGFuZS5idWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgMCwgd1NlZ3MsIGhTZWdzKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHNpemU6IDMsIGRhdGE6IHBvc2l0aW9uIH0sXG4gICAgICAgICAgICBub3JtYWw6IHsgc2l6ZTogMywgZGF0YTogbm9ybWFsIH0sXG4gICAgICAgICAgICB1djogeyBzaXplOiAyLCBkYXRhOiB1diB9LFxuICAgICAgICAgICAgaW5kZXg6IHsgZGF0YTogaW5kZXggfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIoZ2wsIGF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBidWlsZFBsYW5lKHBvc2l0aW9uLCBub3JtYWwsIHV2LCBpbmRleCwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdTZWdzLCBoU2VncywgdSA9IDAsIHYgPSAxLCB3ID0gMiwgdURpciA9IDEsIHZEaXIgPSAtMSwgaSA9IDAsIGlpID0gMCkge1xuICAgICAgICBjb25zdCBpbyA9IGk7XG4gICAgICAgIGNvbnN0IHNlZ1cgPSB3aWR0aCAvIHdTZWdzO1xuICAgICAgICBjb25zdCBzZWdIID0gaGVpZ2h0IC8gaFNlZ3M7XG5cbiAgICAgICAgZm9yIChsZXQgaXkgPSAwOyBpeSA8PSBoU2VnczsgaXkrKykge1xuICAgICAgICAgICAgbGV0IHkgPSBpeSAqIHNlZ0ggLSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgZm9yIChsZXQgaXggPSAwOyBpeCA8PSB3U2VnczsgaXgrKywgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHggPSBpeCAqIHNlZ1cgLSB3aWR0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHVdID0geCAqIHVEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB2XSA9IHkgKiB2RGlyO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgd10gPSBkZXB0aCAvIDI7XG5cbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB1XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgdl0gPSAwO1xuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHddID0gZGVwdGggPj0gMCA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgIHV2W2kgKiAyXSA9IGl4IC8gd1NlZ3M7XG4gICAgICAgICAgICAgICAgdXZbaSAqIDIgKyAxXSA9IDEgLSBpeSAvIGhTZWdzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl5ID09PSBoU2VncyB8fCBpeCA9PT0gd1NlZ3MpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxldCBhID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSk7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBpbyArIGl4ICsgKGl5ICsgMSkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgZCA9IGlvICsgaXggKyBpeSAqICh3U2VncyArIDEpICsgMTtcblxuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNl0gPSBhO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDFdID0gYjtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAyXSA9IGQ7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgM10gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDRdID0gYztcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyA1XSA9IGQ7XG4gICAgICAgICAgICAgICAgaWkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIEV1bGVyRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMnO1xuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NC5qcyc7XG5cbmNvbnN0IHRtcE1hdDQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hdDQoKTtcblxuZXhwb3J0IGNsYXNzIEV1bGVyIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgsIG9yZGVyID0gJ1lYWicpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICgpID0+IHt9O1xuXG4gICAgICAgIC8vIEtlZXAgcmVmZXJlbmNlIHRvIHByb3h5IHRhcmdldCB0byBhdm9pZCB0cmlnZ2VyaW5nIG9uQ2hhbmdlIGludGVybmFsbHlcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGhpcztcblxuICAgICAgICAvLyBSZXR1cm4gYSBwcm94eSB0byB0cmlnZ2VyIG9uQ2hhbmdlIHdoZW4gYXJyYXkgZWxlbWVudHMgYXJlIGVkaXRlZCBkaXJlY3RseVxuICAgICAgICBjb25zdCB0cmlnZ2VyUHJvcHMgPSBbJzAnLCAnMScsICcyJ107XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gUmVmbGVjdC5zZXQoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2VzcyAmJiB0cmlnZ2VyUHJvcHMuaW5jbHVkZXMocHJvcGVydHkpKSB0YXJnZXQub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB4O1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB5O1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB6O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2WzBdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2WzFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2WzJdO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlb3JkZXIob3JkZXIpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0Lm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVJvdGF0aW9uTWF0cml4KG0sIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICBFdWxlckZ1bmMuZnJvbVJvdGF0aW9uTWF0cml4KHRoaXMuX3RhcmdldCwgbSwgb3JkZXIpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEsIG9yZGVyID0gdGhpcy5vcmRlciwgaXNJbnRlcm5hbCkge1xuICAgICAgICB0bXBNYXQ0LmZyb21RdWF0ZXJuaW9uKHEpO1xuICAgICAgICB0aGlzLl90YXJnZXQuZnJvbVJvdGF0aW9uTWF0cml4KHRtcE1hdDQsIG9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gYVtvXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXMuX3RhcmdldFsyXSA9IGFbbyArIDJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGEgPSBbXSwgbyA9IDApIHtcbiAgICAgICAgYVtvXSA9IHRoaXNbMF07XG4gICAgICAgIGFbbyArIDFdID0gdGhpc1sxXTtcbiAgICAgICAgYVtvICsgMl0gPSB0aGlzWzJdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBNYXQzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDNGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuc2NhbGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDNGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDQobSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUJhc2lzKHZlYzNhLCB2ZWMzYiwgdmVjM2MpIHtcbiAgICAgICAgdGhpcy5zZXQodmVjM2FbMF0sIHZlYzNhWzFdLCB2ZWMzYVsyXSwgdmVjM2JbMF0sIHZlYzNiWzFdLCB2ZWMzYlsyXSwgdmVjM2NbMF0sIHZlYzNjWzFdLCB2ZWMzY1syXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UobSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuaW52ZXJ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXROb3JtYWxNYXRyaXgobSkge1xuICAgICAgICBNYXQzRnVuYy5ub3JtYWxGcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgTWF0NEZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvTWF0NEZ1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgTWF0NCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgbTAwID0gMSxcbiAgICAgICAgbTAxID0gMCxcbiAgICAgICAgbTAyID0gMCxcbiAgICAgICAgbTAzID0gMCxcbiAgICAgICAgbTEwID0gMCxcbiAgICAgICAgbTExID0gMSxcbiAgICAgICAgbTEyID0gMCxcbiAgICAgICAgbTEzID0gMCxcbiAgICAgICAgbTIwID0gMCxcbiAgICAgICAgbTIxID0gMCxcbiAgICAgICAgbTIyID0gMSxcbiAgICAgICAgbTIzID0gMCxcbiAgICAgICAgbTMwID0gMCxcbiAgICAgICAgbTMxID0gMCxcbiAgICAgICAgbTMyID0gMCxcbiAgICAgICAgbTMzID0gMVxuICAgICkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTJdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxM107XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzE0XTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTVdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1sxMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxM10gPSB2O1xuICAgIH1cblxuICAgIHNldCB6KHYpIHtcbiAgICAgICAgdGhpc1sxNF0gPSB2O1xuICAgIH1cblxuICAgIHNldCB3KHYpIHtcbiAgICAgICAgdGhpc1sxNV0gPSB2O1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0NEZ1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy50cmFuc2xhdGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZSh2LCBheGlzLCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy5yb3RhdGUodGhpcywgbSwgdiwgYXhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLnNjYWxlKHRoaXMsIG0sIHR5cGVvZiB2ID09PSAnbnVtYmVyJyA/IFt2LCB2LCB2XSA6IHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikgTWF0NEZ1bmMuYWRkKHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuYWRkKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIE1hdDRGdW5jLnN1YnRyYWN0KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIGVsc2UgTWF0NEZ1bmMuc3VidHJhY3QodGhpcywgdGhpcywgbWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShtYSwgbWIpIHtcbiAgICAgICAgaWYgKCFtYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5U2NhbGFyKHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYikge1xuICAgICAgICAgICAgTWF0NEZ1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0NEZ1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQ0RnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUGVyc3BlY3RpdmUoeyBmb3YsIGFzcGVjdCwgbmVhciwgZmFyIH0gPSB7fSkge1xuICAgICAgICBNYXQ0RnVuYy5wZXJzcGVjdGl2ZSh0aGlzLCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KSB7XG4gICAgICAgIE1hdDRGdW5jLm9ydGhvKHRoaXMsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24odikge1xuICAgICAgICB0aGlzLnggPSB2WzBdO1xuICAgICAgICB0aGlzLnkgPSB2WzFdO1xuICAgICAgICB0aGlzLnogPSB2WzJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLmludmVydCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmNvbXBvc2UodGhpcywgcSwgcG9zLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRlY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmRlY29tcG9zZSh0aGlzLCBxLCBwb3MsIHNjYWxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Um90YXRpb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5nZXRSb3RhdGlvbihxLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0VHJhbnNsYXRpb24ocG9zKSB7XG4gICAgICAgIE1hdDRGdW5jLmdldFRyYW5zbGF0aW9uKHBvcywgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFNjYWxpbmcoc2NhbGUpIHtcbiAgICAgICAgTWF0NEZ1bmMuZ2V0U2NhbGluZyhzY2FsZSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldE1heFNjYWxlT25BeGlzKCkge1xuICAgICAgICByZXR1cm4gTWF0NEZ1bmMuZ2V0TWF4U2NhbGVPbkF4aXModGhpcyk7XG4gICAgfVxuXG4gICAgbG9va0F0KGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgICAgICBNYXQ0RnVuYy50YXJnZXRUbyh0aGlzLCBleWUsIHRhcmdldCwgdXApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkZXRlcm1pbmFudCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdDRGdW5jLmRldGVybWluYW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHRoaXNbM10gPSBhW28gKyAzXTtcbiAgICAgICAgdGhpc1s0XSA9IGFbbyArIDRdO1xuICAgICAgICB0aGlzWzVdID0gYVtvICsgNV07XG4gICAgICAgIHRoaXNbNl0gPSBhW28gKyA2XTtcbiAgICAgICAgdGhpc1s3XSA9IGFbbyArIDddO1xuICAgICAgICB0aGlzWzhdID0gYVtvICsgOF07XG4gICAgICAgIHRoaXNbOV0gPSBhW28gKyA5XTtcbiAgICAgICAgdGhpc1sxMF0gPSBhW28gKyAxMF07XG4gICAgICAgIHRoaXNbMTFdID0gYVtvICsgMTFdO1xuICAgICAgICB0aGlzWzEyXSA9IGFbbyArIDEyXTtcbiAgICAgICAgdGhpc1sxM10gPSBhW28gKyAxM107XG4gICAgICAgIHRoaXNbMTRdID0gYVtvICsgMTRdO1xuICAgICAgICB0aGlzWzE1XSA9IGFbbyArIDE1XTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICBhW28gKyA0XSA9IHRoaXNbNF07XG4gICAgICAgIGFbbyArIDVdID0gdGhpc1s1XTtcbiAgICAgICAgYVtvICsgNl0gPSB0aGlzWzZdO1xuICAgICAgICBhW28gKyA3XSA9IHRoaXNbN107XG4gICAgICAgIGFbbyArIDhdID0gdGhpc1s4XTtcbiAgICAgICAgYVtvICsgOV0gPSB0aGlzWzldO1xuICAgICAgICBhW28gKyAxMF0gPSB0aGlzWzEwXTtcbiAgICAgICAgYVtvICsgMTFdID0gdGhpc1sxMV07XG4gICAgICAgIGFbbyArIDEyXSA9IHRoaXNbMTJdO1xuICAgICAgICBhW28gKyAxM10gPSB0aGlzWzEzXTtcbiAgICAgICAgYVtvICsgMTRdID0gdGhpc1sxNF07XG4gICAgICAgIGFbbyArIDE1XSA9IHRoaXNbMTVdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBRdWF0RnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9RdWF0RnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBRdWF0IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHosIHcpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gKCkgPT4ge307XG5cbiAgICAgICAgLy8gS2VlcCByZWZlcmVuY2UgdG8gcHJveHkgdGFyZ2V0IHRvIGF2b2lkIHRyaWdnZXJpbmcgb25DaGFuZ2UgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLl90YXJnZXQgPSB0aGlzO1xuXG4gICAgICAgIC8vIFJldHVybiBhIHByb3h5IHRvIHRyaWdnZXIgb25DaGFuZ2Ugd2hlbiBhcnJheSBlbGVtZW50cyBhcmUgZWRpdGVkIGRpcmVjdGx5XG4gICAgICAgIGNvbnN0IHRyaWdnZXJQcm9wcyA9IFsnMCcsICcxJywgJzInLCAnMyddO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgdHJpZ2dlclByb3BzLmluY2x1ZGVzKHByb3BlcnR5KSkgdGFyZ2V0Lm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbM107XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMF0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMV0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHoodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHcodikge1xuICAgICAgICB0aGlzLl90YXJnZXRbM10gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIFF1YXRGdW5jLmlkZW50aXR5KHRoaXMuX3RhcmdldCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KHgsIHksIHosIHcpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBRdWF0RnVuYy5zZXQodGhpcy5fdGFyZ2V0LCB4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVYKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWCh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlWShhKSB7XG4gICAgICAgIFF1YXRGdW5jLnJvdGF0ZVkodGhpcy5fdGFyZ2V0LCB0aGlzLl90YXJnZXQsIGEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZVooYSkge1xuICAgICAgICBRdWF0RnVuYy5yb3RhdGVaKHRoaXMuX3RhcmdldCwgdGhpcy5fdGFyZ2V0LCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKHEgPSB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgUXVhdEZ1bmMuaW52ZXJ0KHRoaXMuX3RhcmdldCwgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uanVnYXRlKHEgPSB0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgUXVhdEZ1bmMuY29uanVnYXRlKHRoaXMuX3RhcmdldCwgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29weShxKSB7XG4gICAgICAgIFF1YXRGdW5jLmNvcHkodGhpcy5fdGFyZ2V0LCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBub3JtYWxpemUocSA9IHRoaXMuX3RhcmdldCkge1xuICAgICAgICBRdWF0RnVuYy5ub3JtYWxpemUodGhpcy5fdGFyZ2V0LCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShxQSwgcUIpIHtcbiAgICAgICAgaWYgKHFCKSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLl90YXJnZXQsIHFBLCBxQik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBRdWF0RnVuYy5tdWx0aXBseSh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgcUEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZG90KHYpIHtcbiAgICAgICAgcmV0dXJuIFF1YXRGdW5jLmRvdCh0aGlzLl90YXJnZXQsIHYpO1xuICAgIH1cblxuICAgIGZyb21NYXRyaXgzKG1hdHJpeDMpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbU1hdDModGhpcy5fdGFyZ2V0LCBtYXRyaXgzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tRXVsZXIoZXVsZXIsIGlzSW50ZXJuYWwpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbUV1bGVyKHRoaXMuX3RhcmdldCwgZXVsZXIsIGV1bGVyLm9yZGVyKTtcbiAgICAgICAgLy8gQXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgIGlmICghaXNJbnRlcm5hbCkgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQXhpc0FuZ2xlKGF4aXMsIGEpIHtcbiAgICAgICAgUXVhdEZ1bmMuc2V0QXhpc0FuZ2xlKHRoaXMuX3RhcmdldCwgYXhpcywgYSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2xlcnAocSwgdCkge1xuICAgICAgICBRdWF0RnVuYy5zbGVycCh0aGlzLl90YXJnZXQsIHRoaXMuX3RhcmdldCwgcSwgdCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IGFbb107XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzNdID0gYVtvICsgM107XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBWZWMzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9WZWMzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBWZWMzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzWzFdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBWZWMzRnVuYy5zZXQodGhpcywgeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICBWZWMzRnVuYy5jb3B5KHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQodmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuYWRkKHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuYWRkKHRoaXMsIHRoaXMsIHZhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLnN1YnRyYWN0KHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc3VidHJhY3QodGhpcywgdGhpcywgdmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMubXVsdGlwbHkodGhpcywgdGhpcywgdik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpdmlkZSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMuZGl2aWRlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIDEgLyB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZSh2ID0gdGhpcykge1xuICAgICAgICBWZWMzRnVuYy5pbnZlcnNlKHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBDYW4ndCB1c2UgJ2xlbmd0aCcgYXMgQXJyYXkucHJvdG90eXBlIHVzZXMgaXRcbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgZGlzdGFuY2Uodikge1xuICAgICAgICBpZiAodikgcmV0dXJuIFZlYzNGdW5jLmRpc3RhbmNlKHRoaXMsIHYpO1xuICAgICAgICBlbHNlIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZExlbigpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZERpc3RhbmNlKHYpIHtcbiAgICAgICAgaWYgKHYpIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkRGlzdGFuY2UodGhpcywgdik7XG4gICAgICAgIGVsc2UgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgbmVnYXRlKHYgPSB0aGlzKSB7XG4gICAgICAgIFZlYzNGdW5jLm5lZ2F0ZSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3Jvc3ModmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuY3Jvc3ModGhpcywgdmEsIHZiKTtcbiAgICAgICAgZWxzZSBWZWMzRnVuYy5jcm9zcyh0aGlzLCB0aGlzLCB2YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYpIHtcbiAgICAgICAgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgVmVjM0Z1bmMubm9ybWFsaXplKHRoaXMsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkb3Qodikge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGVxdWFscyh2KSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5leGFjdEVxdWFscyh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDMobWF0Mykge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQzKHRoaXMsIHRoaXMsIG1hdDMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQ0KHRoaXMsIHRoaXMsIG1hdDQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZVJvdGF0ZU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy5zY2FsZVJvdGF0ZU1hdDQodGhpcywgdGhpcywgbWF0NCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFwcGx5UXVhdGVybmlvbihxKSB7XG4gICAgICAgIFZlYzNGdW5jLnRyYW5zZm9ybVF1YXQodGhpcywgdGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZ2xlKHYpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLmFuZ2xlKHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGxlcnAodiwgdCkge1xuICAgICAgICBWZWMzRnVuYy5sZXJwKHRoaXMsIHRoaXMsIHYsIHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzbW9vdGhMZXJwKHYsIGRlY2F5LCBkdCkge1xuICAgICAgICBWZWMzRnVuYy5zbW9vdGhMZXJwKHRoaXMsIHRoaXMsIHYsIGRlY2F5LCBkdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlYzModGhpc1swXSwgdGhpc1sxXSwgdGhpc1syXSk7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXNbMF0gPSBhW29dO1xuICAgICAgICB0aGlzWzFdID0gYVtvICsgMV07XG4gICAgICAgIHRoaXNbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtRGlyZWN0aW9uKG1hdDQpIHtcbiAgICAgICAgY29uc3QgeCA9IHRoaXNbMF07XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzWzFdO1xuICAgICAgICBjb25zdCB6ID0gdGhpc1syXTtcblxuICAgICAgICB0aGlzWzBdID0gbWF0NFswXSAqIHggKyBtYXQ0WzRdICogeSArIG1hdDRbOF0gKiB6O1xuICAgICAgICB0aGlzWzFdID0gbWF0NFsxXSAqIHggKyBtYXQ0WzVdICogeSArIG1hdDRbOV0gKiB6O1xuICAgICAgICB0aGlzWzJdID0gbWF0NFsyXSAqIHggKyBtYXQ0WzZdICogeSArIG1hdDRbMTBdICogejtcblxuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcbiAgICB9XG59XG4iLCIvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbk1hdHJpeChvdXQsIG0sIG9yZGVyID0gJ1lYWicpIHtcbiAgICBpZiAob3JkZXIgPT09ICdYWVonKSB7XG4gICAgICAgIG91dFsxXSA9IE1hdGguYXNpbihNYXRoLm1pbihNYXRoLm1heChtWzhdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bOF0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMigtbVs5XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzJdID0gMDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdZWFonKSB7XG4gICAgICAgIG91dFswXSA9IE1hdGguYXNpbigtTWF0aC5taW4oTWF0aC5tYXgobVs5XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzldKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIobVs4XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMihtWzFdLCBtWzVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gMDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICAgIG91dFswXSA9IE1hdGguYXNpbihNYXRoLm1pbihNYXRoLm1heChtWzZdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bNl0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMihtWzFdLCBtWzBdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWVgnKSB7XG4gICAgICAgIG91dFsxXSA9IE1hdGguYXNpbigtTWF0aC5taW4oTWF0aC5tYXgobVsyXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzJdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIobVs2XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMihtWzFdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IDA7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKC1tWzRdLCBtWzVdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdZWlgnKSB7XG4gICAgICAgIG91dFsyXSA9IE1hdGguYXNpbihNYXRoLm1pbihNYXRoLm1heChtWzFdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bMV0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMigtbVs5XSwgbVs1XSk7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IDA7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICAgIG91dFsyXSA9IE1hdGguYXNpbigtTWF0aC5taW4oTWF0aC5tYXgobVs0XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzRdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIobVs2XSwgbVs1XSk7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMigtbVs5XSwgbVsxMF0pO1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29waWVzIHRoZSB1cHBlci1sZWZ0IDN4MyB2YWx1ZXMgaW50byB0aGUgZ2l2ZW4gbWF0My5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIDN4MyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSAgIHRoZSBzb3VyY2UgNHg0IG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDQob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVs0XTtcbiAgICBvdXRbNF0gPSBhWzVdO1xuICAgIG91dFs1XSA9IGFbNl07XG4gICAgb3V0WzZdID0gYVs4XTtcbiAgICBvdXRbN10gPSBhWzldO1xuICAgIG91dFs4XSA9IGFbMTBdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gICAgb3V0WzNdID0geXggLSB3ejtcbiAgICBvdXRbNl0gPSB6eCArIHd5O1xuXG4gICAgb3V0WzFdID0geXggKyB3ejtcbiAgICBvdXRbNF0gPSAxIC0geHggLSB6ejtcbiAgICBvdXRbN10gPSB6eSAtIHd4O1xuXG4gICAgb3V0WzJdID0genggLSB3eTtcbiAgICBvdXRbNV0gPSB6eSArIHd4O1xuICAgIG91dFs4XSA9IDEgLSB4eCAtIHl5O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDMgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgb3V0WzBdID0gbTAwO1xuICAgIG91dFsxXSA9IG0wMTtcbiAgICBvdXRbMl0gPSBtMDI7XG4gICAgb3V0WzNdID0gbTEwO1xuICAgIG91dFs0XSA9IG0xMTtcbiAgICBvdXRbNV0gPSBtMTI7XG4gICAgb3V0WzZdID0gbTIwO1xuICAgIG91dFs3XSA9IG0yMTtcbiAgICBvdXRbOF0gPSBtMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgYSBtYXQzIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gICAgb3V0WzBdID0gMTtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAxO1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgIGlmIChvdXQgPT09IGEpIHtcbiAgICAgICAgbGV0IGEwMSA9IGFbMV0sXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICAgICAgYTEyID0gYVs1XTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYTAxO1xuICAgICAgICBvdXRbNV0gPSBhWzddO1xuICAgICAgICBvdXRbNl0gPSBhMDI7XG4gICAgICAgIG91dFs3XSA9IGExMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRbMF0gPSBhWzBdO1xuICAgICAgICBvdXRbMV0gPSBhWzNdO1xuICAgICAgICBvdXRbMl0gPSBhWzZdO1xuICAgICAgICBvdXRbM10gPSBhWzFdO1xuICAgICAgICBvdXRbNF0gPSBhWzRdO1xuICAgICAgICBvdXRbNV0gPSBhWzddO1xuICAgICAgICBvdXRbNl0gPSBhWzJdO1xuICAgICAgICBvdXRbN10gPSBhWzVdO1xuICAgICAgICBvdXRbOF0gPSBhWzhdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgbGV0IGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV07XG4gICAgbGV0IGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF07XG5cbiAgICBsZXQgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxO1xuICAgIGxldCBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwO1xuICAgIGxldCBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMTtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSBiMDEgKiBkZXQ7XG4gICAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICAgIG91dFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogZGV0O1xuICAgIG91dFszXSA9IGIxMSAqIGRldDtcbiAgICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgICBvdXRbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBkZXQ7XG4gICAgb3V0WzZdID0gYjIxICogZGV0O1xuICAgIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGRldDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgbGV0IGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV07XG4gICAgbGV0IGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF07XG5cbiAgICBsZXQgYjAwID0gYlswXSxcbiAgICAgICAgYjAxID0gYlsxXSxcbiAgICAgICAgYjAyID0gYlsyXTtcbiAgICBsZXQgYjEwID0gYlszXSxcbiAgICAgICAgYjExID0gYls0XSxcbiAgICAgICAgYjEyID0gYls1XTtcbiAgICBsZXQgYjIwID0gYls2XSxcbiAgICAgICAgYjIxID0gYls3XSxcbiAgICAgICAgYjIyID0gYls4XTtcblxuICAgIG91dFswXSA9IGIwMCAqIGEwMCArIGIwMSAqIGExMCArIGIwMiAqIGEyMDtcbiAgICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gICAgb3V0WzJdID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyICogYTIyO1xuXG4gICAgb3V0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICAgIG91dFs0XSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMTtcbiAgICBvdXRbNV0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjI7XG5cbiAgICBvdXRbNl0gPSBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjA7XG4gICAgb3V0WzddID0gYjIwICogYTAxICsgYjIxICogYTExICsgYjIyICogYTIxO1xuICAgIG91dFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIG1hdDMgYnkgdGhlIGdpdmVuIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF0sXG4gICAgICAgIHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IGEwMDtcbiAgICBvdXRbMV0gPSBhMDE7XG4gICAgb3V0WzJdID0gYTAyO1xuXG4gICAgb3V0WzNdID0gYTEwO1xuICAgIG91dFs0XSA9IGExMTtcbiAgICBvdXRbNV0gPSBhMTI7XG5cbiAgICBvdXRbNl0gPSB4ICogYTAwICsgeSAqIGExMCArIGEyMDtcbiAgICBvdXRbN10gPSB4ICogYTAxICsgeSAqIGExMSArIGEyMTtcbiAgICBvdXRbOF0gPSB4ICogYTAyICsgeSAqIGExMiArIGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQzIGJ5IHRoZSBnaXZlbiBhbmdsZVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XSxcbiAgICAgICAgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XSxcbiAgICAgICAgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYyAqIGEwMCArIHMgKiBhMTA7XG4gICAgb3V0WzFdID0gYyAqIGEwMSArIHMgKiBhMTE7XG4gICAgb3V0WzJdID0gYyAqIGEwMiArIHMgKiBhMTI7XG5cbiAgICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcbiAgICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcbiAgICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcblxuICAgIG91dFs2XSA9IGEyMDtcbiAgICBvdXRbN10gPSBhMjE7XG4gICAgb3V0WzhdID0gYTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQzIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgICBsZXQgeCA9IHZbMF0sXG4gICAgICAgIHkgPSB2WzFdO1xuXG4gICAgb3V0WzBdID0geCAqIGFbMF07XG4gICAgb3V0WzFdID0geCAqIGFbMV07XG4gICAgb3V0WzJdID0geCAqIGFbMl07XG5cbiAgICBvdXRbM10gPSB5ICogYVszXTtcbiAgICBvdXRbNF0gPSB5ICogYVs0XTtcbiAgICBvdXRbNV0gPSB5ICogYVs1XTtcblxuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBub3JtYWwgbWF0cml4ICh0cmFuc3Bvc2UgaW52ZXJzZSkgZnJvbSB0aGUgNHg0IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7bWF0NH0gYSBNYXQ0IHRvIGRlcml2ZSB0aGUgbm9ybWFsIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsRnJvbU1hdDQob3V0LCBhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICAgIGxldCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gICAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICAgIGxldCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gICAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICAgIGxldCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gICAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICAgIGxldCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gICAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICBsZXQgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gICAgaWYgKCFkZXQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGRldCA9IDEuMCAvIGRldDtcblxuICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICAgIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICAgIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzNdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG5cbiAgICBvdXRbNl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgICBvdXRbN10gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgMkQgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHlvdXIgZ2wgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZ2wgY29udGV4dFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbihvdXQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBvdXRbMF0gPSAyIC8gd2lkdGg7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gLTIgLyBoZWlnaHQ7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAtMTtcbiAgICBvdXRbN10gPSAxO1xuICAgIG91dFs4XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSArIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gLSBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICBvdXRbM10gPSBhWzNdICogYjtcbiAgICBvdXRbNF0gPSBhWzRdICogYjtcbiAgICBvdXRbNV0gPSBhWzVdICogYjtcbiAgICBvdXRbNl0gPSBhWzZdICogYjtcbiAgICBvdXRbN10gPSBhWzddICogYjtcbiAgICBvdXRbOF0gPSBhWzhdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuIiwiaW1wb3J0ICogYXMgdmVjMyBmcm9tICcuL1ZlYzNGdW5jLmpzJztcblxuY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQ0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbM107XG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIG91dFs5XSA9IGFbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gICAgb3V0WzBdID0gbTAwO1xuICAgIG91dFsxXSA9IG0wMTtcbiAgICBvdXRbMl0gPSBtMDI7XG4gICAgb3V0WzNdID0gbTAzO1xuICAgIG91dFs0XSA9IG0xMDtcbiAgICBvdXRbNV0gPSBtMTE7XG4gICAgb3V0WzZdID0gbTEyO1xuICAgIG91dFs3XSA9IG0xMztcbiAgICBvdXRbOF0gPSBtMjA7XG4gICAgb3V0WzldID0gbTIxO1xuICAgIG91dFsxMF0gPSBtMjI7XG4gICAgb3V0WzExXSA9IG0yMztcbiAgICBvdXRbMTJdID0gbTMwO1xuICAgIG91dFsxM10gPSBtMzE7XG4gICAgb3V0WzE0XSA9IG0zMjtcbiAgICBvdXRbMTVdID0gbTMzO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAxO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDE7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgIGlmIChvdXQgPT09IGEpIHtcbiAgICAgICAgbGV0IGEwMSA9IGFbMV0sXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICAgICAgYTAzID0gYVszXTtcbiAgICAgICAgbGV0IGExMiA9IGFbNl0sXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xuICAgICAgICBsZXQgYTIzID0gYVsxMV07XG5cbiAgICAgICAgb3V0WzFdID0gYVs0XTtcbiAgICAgICAgb3V0WzJdID0gYVs4XTtcbiAgICAgICAgb3V0WzNdID0gYVsxMl07XG4gICAgICAgIG91dFs0XSA9IGEwMTtcbiAgICAgICAgb3V0WzZdID0gYVs5XTtcbiAgICAgICAgb3V0WzddID0gYVsxM107XG4gICAgICAgIG91dFs4XSA9IGEwMjtcbiAgICAgICAgb3V0WzldID0gYTEyO1xuICAgICAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgICAgIG91dFsxMl0gPSBhMDM7XG4gICAgICAgIG91dFsxM10gPSBhMTM7XG4gICAgICAgIG91dFsxNF0gPSBhMjM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVs0XTtcbiAgICAgICAgb3V0WzJdID0gYVs4XTtcbiAgICAgICAgb3V0WzNdID0gYVsxMl07XG4gICAgICAgIG91dFs0XSA9IGFbMV07XG4gICAgICAgIG91dFs1XSA9IGFbNV07XG4gICAgICAgIG91dFs2XSA9IGFbOV07XG4gICAgICAgIG91dFs3XSA9IGFbMTNdO1xuICAgICAgICBvdXRbOF0gPSBhWzJdO1xuICAgICAgICBvdXRbOV0gPSBhWzZdO1xuICAgICAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzEyXSA9IGFbM107XG4gICAgICAgIG91dFsxM10gPSBhWzddO1xuICAgICAgICBvdXRbMTRdID0gYVsxMV07XG4gICAgICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgICBvdXRbM10gPSAoYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzKSAqIGRldDtcbiAgICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgICBvdXRbNl0gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcbiAgICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgICBvdXRbOV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcbiAgICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gICAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMl0gPSAoYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2KSAqIGRldDtcbiAgICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0O1xuICAgIG91dFsxNV0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGRldDtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICBsZXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICAgIGxldCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gICAgbGV0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgICBsZXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICAgIGxldCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gICAgbGV0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgICBsZXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICAgIGxldCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gICAgbGV0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgICBsZXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICAgIGxldCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gICAgbGV0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICByZXR1cm4gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgbGV0IGExMCA9IGFbNF0sXG4gICAgICAgIGExMSA9IGFbNV0sXG4gICAgICAgIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgbGV0IGEyMCA9IGFbOF0sXG4gICAgICAgIGEyMSA9IGFbOV0sXG4gICAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgICBhMjMgPSBhWzExXTtcbiAgICBsZXQgYTMwID0gYVsxMl0sXG4gICAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgICBhMzIgPSBhWzE0XSxcbiAgICAgICAgYTMzID0gYVsxNV07XG5cbiAgICAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcbiAgICBsZXQgYjAgPSBiWzBdLFxuICAgICAgICBiMSA9IGJbMV0sXG4gICAgICAgIGIyID0gYlsyXSxcbiAgICAgICAgYjMgPSBiWzNdO1xuICAgIG91dFswXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFsxXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFszXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuXG4gICAgYjAgPSBiWzRdO1xuICAgIGIxID0gYls1XTtcbiAgICBiMiA9IGJbNl07XG4gICAgYjMgPSBiWzddO1xuICAgIG91dFs0XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFs1XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFs3XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuXG4gICAgYjAgPSBiWzhdO1xuICAgIGIxID0gYls5XTtcbiAgICBiMiA9IGJbMTBdO1xuICAgIGIzID0gYlsxMV07XG4gICAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gICAgb3V0WzldID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYlsxMl07XG4gICAgYjEgPSBiWzEzXTtcbiAgICBiMiA9IGJbMTRdO1xuICAgIGIzID0gYlsxNV07XG4gICAgb3V0WzEyXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFsxM10gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gICAgb3V0WzE1XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgICBsZXQgeCA9IHZbMF0sXG4gICAgICAgIHkgPSB2WzFdLFxuICAgICAgICB6ID0gdlsyXTtcbiAgICBsZXQgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICAgIGxldCBhMTAsIGExMSwgYTEyLCBhMTM7XG4gICAgbGV0IGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICAgIGlmIChhID09PSBvdXQpIHtcbiAgICAgICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhWzJdICogeCArIGFbNl0gKiB5ICsgYVsxMF0gKiB6ICsgYVsxNF07XG4gICAgICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYTAwID0gYVswXTtcbiAgICAgICAgYTAxID0gYVsxXTtcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICAgICAgYTEwID0gYVs0XTtcbiAgICAgICAgYTExID0gYVs1XTtcbiAgICAgICAgYTEyID0gYVs2XTtcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICAgICAgYTIwID0gYVs4XTtcbiAgICAgICAgYTIxID0gYVs5XTtcbiAgICAgICAgYTIyID0gYVsxMF07XG4gICAgICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgICAgIG91dFswXSA9IGEwMDtcbiAgICAgICAgb3V0WzFdID0gYTAxO1xuICAgICAgICBvdXRbMl0gPSBhMDI7XG4gICAgICAgIG91dFszXSA9IGEwMztcbiAgICAgICAgb3V0WzRdID0gYTEwO1xuICAgICAgICBvdXRbNV0gPSBhMTE7XG4gICAgICAgIG91dFs2XSA9IGExMjtcbiAgICAgICAgb3V0WzddID0gYTEzO1xuICAgICAgICBvdXRbOF0gPSBhMjA7XG4gICAgICAgIG91dFs5XSA9IGEyMTtcbiAgICAgICAgb3V0WzEwXSA9IGEyMjtcbiAgICAgICAgb3V0WzExXSA9IGEyMztcblxuICAgICAgICBvdXRbMTJdID0gYTAwICogeCArIGExMCAqIHkgKyBhMjAgKiB6ICsgYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhMDEgKiB4ICsgYTExICogeSArIGEyMSAqIHogKyBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYTAzICogeCArIGExMyAqIHkgKyBhMjMgKiB6ICsgYVsxNV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzMgbm90IHVzaW5nIHZlY3Rvcml6YXRpb25cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7dmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXSxcbiAgICAgICAgeiA9IHZbMl07XG5cbiAgICBvdXRbMF0gPSBhWzBdICogeDtcbiAgICBvdXRbMV0gPSBhWzFdICogeDtcbiAgICBvdXRbMl0gPSBhWzJdICogeDtcbiAgICBvdXRbM10gPSBhWzNdICogeDtcbiAgICBvdXRbNF0gPSBhWzRdICogeTtcbiAgICBvdXRbNV0gPSBhWzVdICogeTtcbiAgICBvdXRbNl0gPSBhWzZdICogeTtcbiAgICBvdXRbN10gPSBhWzddICogeTtcbiAgICBvdXRbOF0gPSBhWzhdICogejtcbiAgICBvdXRbOV0gPSBhWzldICogejtcbiAgICBvdXRbMTBdID0gYVsxMF0gKiB6O1xuICAgIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkLCBheGlzKSB7XG4gICAgbGV0IHggPSBheGlzWzBdLFxuICAgICAgICB5ID0gYXhpc1sxXSxcbiAgICAgICAgeiA9IGF4aXNbMl07XG4gICAgbGV0IGxlbiA9IE1hdGguaHlwb3QoeCwgeSwgeik7XG4gICAgbGV0IHMsIGMsIHQ7XG4gICAgbGV0IGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgICBsZXQgYTEwLCBhMTEsIGExMiwgYTEzO1xuICAgIGxldCBhMjAsIGEyMSwgYTIyLCBhMjM7XG4gICAgbGV0IGIwMCwgYjAxLCBiMDI7XG4gICAgbGV0IGIxMCwgYjExLCBiMTI7XG4gICAgbGV0IGIyMCwgYjIxLCBiMjI7XG5cbiAgICBpZiAoTWF0aC5hYnMobGVuKSA8IEVQU0lMT04pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGVuID0gMSAvIGxlbjtcbiAgICB4ICo9IGxlbjtcbiAgICB5ICo9IGxlbjtcbiAgICB6ICo9IGxlbjtcblxuICAgIHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgIHQgPSAxIC0gYztcblxuICAgIGEwMCA9IGFbMF07XG4gICAgYTAxID0gYVsxXTtcbiAgICBhMDIgPSBhWzJdO1xuICAgIGEwMyA9IGFbM107XG4gICAgYTEwID0gYVs0XTtcbiAgICBhMTEgPSBhWzVdO1xuICAgIGExMiA9IGFbNl07XG4gICAgYTEzID0gYVs3XTtcbiAgICBhMjAgPSBhWzhdO1xuICAgIGEyMSA9IGFbOV07XG4gICAgYTIyID0gYVsxMF07XG4gICAgYTIzID0gYVsxMV07XG5cbiAgICAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcbiAgICBiMDAgPSB4ICogeCAqIHQgKyBjO1xuICAgIGIwMSA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgIGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xuICAgIGIxMCA9IHggKiB5ICogdCAtIHogKiBzO1xuICAgIGIxMSA9IHkgKiB5ICogdCArIGM7XG4gICAgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gICAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7XG4gICAgYjIxID0geSAqIHogKiB0IC0geCAqIHM7XG4gICAgYjIyID0geiAqIHogKiB0ICsgYztcblxuICAgIC8vIFBlcmZvcm0gcm90YXRpb24tc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAgb3V0WzBdID0gYTAwICogYjAwICsgYTEwICogYjAxICsgYTIwICogYjAyO1xuICAgIG91dFsxXSA9IGEwMSAqIGIwMCArIGExMSAqIGIwMSArIGEyMSAqIGIwMjtcbiAgICBvdXRbMl0gPSBhMDIgKiBiMDAgKyBhMTIgKiBiMDEgKyBhMjIgKiBiMDI7XG4gICAgb3V0WzNdID0gYTAzICogYjAwICsgYTEzICogYjAxICsgYTIzICogYjAyO1xuICAgIG91dFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgICBvdXRbNV0gPSBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gICAgb3V0WzZdID0gYTAyICogYjEwICsgYTEyICogYjExICsgYTIyICogYjEyO1xuICAgIG91dFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcbiAgICBvdXRbOF0gPSBhMDAgKiBiMjAgKyBhMTAgKiBiMjEgKyBhMjAgKiBiMjI7XG4gICAgb3V0WzldID0gYTAxICogYjIwICsgYTExICogYjIxICsgYTIxICogYjIyO1xuICAgIG91dFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gICAgb3V0WzExXSA9IGEwMyAqIGIyMCArIGExMyAqIGIyMSArIGEyMyAqIGIyMjtcblxuICAgIGlmIChhICE9PSBvdXQpIHtcbiAgICAgICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvbixcbiAqICB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgdHJhbnNsYXRpb24gY29tcG9uZW50XG4gKiBAcGFyYW0gIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xuICAgIG91dFswXSA9IG1hdFsxMl07XG4gICAgb3V0WzFdID0gbWF0WzEzXTtcbiAgICBvdXRbMl0gPSBtYXRbMTRdO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXG4gKiAgdGhlIHNhbWUgYXMgdGhlIHNjYWxpbmcgdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcbiAqIEBwYXJhbSAge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxpbmcob3V0LCBtYXQpIHtcbiAgICBsZXQgbTExID0gbWF0WzBdO1xuICAgIGxldCBtMTIgPSBtYXRbMV07XG4gICAgbGV0IG0xMyA9IG1hdFsyXTtcbiAgICBsZXQgbTIxID0gbWF0WzRdO1xuICAgIGxldCBtMjIgPSBtYXRbNV07XG4gICAgbGV0IG0yMyA9IG1hdFs2XTtcbiAgICBsZXQgbTMxID0gbWF0WzhdO1xuICAgIGxldCBtMzIgPSBtYXRbOV07XG4gICAgbGV0IG0zMyA9IG1hdFsxMF07XG5cbiAgICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xuICAgIG91dFsxXSA9IE1hdGguaHlwb3QobTIxLCBtMjIsIG0yMyk7XG4gICAgb3V0WzJdID0gTWF0aC5oeXBvdChtMzEsIG0zMiwgbTMzKTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXhTY2FsZU9uQXhpcyhtYXQpIHtcbiAgICBsZXQgbTExID0gbWF0WzBdO1xuICAgIGxldCBtMTIgPSBtYXRbMV07XG4gICAgbGV0IG0xMyA9IG1hdFsyXTtcbiAgICBsZXQgbTIxID0gbWF0WzRdO1xuICAgIGxldCBtMjIgPSBtYXRbNV07XG4gICAgbGV0IG0yMyA9IG1hdFs2XTtcbiAgICBsZXQgbTMxID0gbWF0WzhdO1xuICAgIGxldCBtMzIgPSBtYXRbOV07XG4gICAgbGV0IG0zMyA9IG1hdFsxMF07XG5cbiAgICBjb25zdCB4ID0gbTExICogbTExICsgbTEyICogbTEyICsgbTEzICogbTEzO1xuICAgIGNvbnN0IHkgPSBtMjEgKiBtMjEgKyBtMjIgKiBtMjIgKyBtMjMgKiBtMjM7XG4gICAgY29uc3QgeiA9IG0zMSAqIG0zMSArIG0zMiAqIG0zMiArIG0zMyAqIG0zMztcblxuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoeCwgeSwgeikpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb25hbCBjb21wb25lbnRcbiAqICBvZiBhIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aFxuICogIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLCB0aGUgcmV0dXJuZWQgcXVhdGVybmlvbiB3aWxsIGJlIHRoZVxuICogIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSB7cXVhdH0gb3V0IFF1YXRlcm5pb24gdG8gcmVjZWl2ZSB0aGUgcm90YXRpb24gY29tcG9uZW50XG4gKiBAcGFyYW0ge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFJvdGF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0ZW1wID0gWzEsIDEsIDFdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIG1hdCkge1xuICAgICAgICBsZXQgc2NhbGluZyA9IHRlbXA7XG4gICAgICAgIGdldFNjYWxpbmcoc2NhbGluZywgbWF0KTtcblxuICAgICAgICBsZXQgaXMxID0gMSAvIHNjYWxpbmdbMF07XG4gICAgICAgIGxldCBpczIgPSAxIC8gc2NhbGluZ1sxXTtcbiAgICAgICAgbGV0IGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xuXG4gICAgICAgIGxldCBzbTExID0gbWF0WzBdICogaXMxO1xuICAgICAgICBsZXQgc20xMiA9IG1hdFsxXSAqIGlzMjtcbiAgICAgICAgbGV0IHNtMTMgPSBtYXRbMl0gKiBpczM7XG4gICAgICAgIGxldCBzbTIxID0gbWF0WzRdICogaXMxO1xuICAgICAgICBsZXQgc20yMiA9IG1hdFs1XSAqIGlzMjtcbiAgICAgICAgbGV0IHNtMjMgPSBtYXRbNl0gKiBpczM7XG4gICAgICAgIGxldCBzbTMxID0gbWF0WzhdICogaXMxO1xuICAgICAgICBsZXQgc20zMiA9IG1hdFs5XSAqIGlzMjtcbiAgICAgICAgbGV0IHNtMzMgPSBtYXRbMTBdICogaXMzO1xuXG4gICAgICAgIGxldCB0cmFjZSA9IHNtMTEgKyBzbTIyICsgc20zMztcbiAgICAgICAgbGV0IFMgPSAwO1xuXG4gICAgICAgIGlmICh0cmFjZSA+IDApIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IDAuMjUgKiBTO1xuICAgICAgICAgICAgb3V0WzBdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTEyIC0gc20yMSkgLyBTO1xuICAgICAgICB9IGVsc2UgaWYgKHNtMTEgPiBzbTIyICYmIHNtMTEgPiBzbTMzKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMTEgLSBzbTIyIC0gc20zMykgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAwLjI1ICogUztcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgICAgICAgICAgb3V0WzJdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgICAgIH0gZWxzZSBpZiAoc20yMiA+IHNtMzMpIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20yMiAtIHNtMTEgLSBzbTMzKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gMC4yNSAqIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAoc20yMyArIHNtMzIpIC8gUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTMxICsgc20xMykgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAwLjI1ICogUztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogRnJvbSBnbFRGLVRyYW5zZm9ybVxuICogaHR0cHM6Ly9naXRodWIuY29tL2Rvbm1jY3VyZHkvZ2xURi1UcmFuc2Zvcm0vYmxvYi9tYWluL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWxzL21hdGgtdXRpbHMudHNcbiAqXG4gKiBEZWNvbXBvc2UgYSBtYXQ0IHRvIFRSUyBwcm9wZXJ0aWVzLlxuICpcbiAqIEVxdWl2YWxlbnQgdG8gdGhlIE1hdHJpeDQgZGVjb21wb3NlKCkgbWV0aG9kIGluIHRocmVlLmpzLCBhbmQgaW50ZW50aW9uYWxseSBub3QgdXNpbmcgdGhlXG4gKiBnbC1tYXRyaXggdmVyc2lvbi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdG9qaS9nbC1tYXRyaXgvaXNzdWVzLzQwOFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gc3JjTWF0IE1hdHJpeCBlbGVtZW50LCB0byBiZSBkZWNvbXBvc2VkIHRvIFRSUyBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtxdWF0NH0gZHN0Um90YXRpb24gUm90YXRpb24gZWxlbWVudCwgdG8gYmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3ZlYzN9IGRzdFRyYW5zbGF0aW9uIFRyYW5zbGF0aW9uIGVsZW1lbnQsIHRvIGJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHt2ZWMzfSBkc3RTY2FsZSBTY2FsZSBlbGVtZW50LCB0byBiZSBvdmVyd3JpdHRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlKHNyY01hdCwgZHN0Um90YXRpb24sIGRzdFRyYW5zbGF0aW9uLCBkc3RTY2FsZSkge1xuICAgIGxldCBzeCA9IHZlYzMubGVuZ3RoKFtzcmNNYXRbMF0sIHNyY01hdFsxXSwgc3JjTWF0WzJdXSk7XG4gICAgY29uc3Qgc3kgPSB2ZWMzLmxlbmd0aChbc3JjTWF0WzRdLCBzcmNNYXRbNV0sIHNyY01hdFs2XV0pO1xuICAgIGNvbnN0IHN6ID0gdmVjMy5sZW5ndGgoW3NyY01hdFs4XSwgc3JjTWF0WzldLCBzcmNNYXRbMTBdXSk7XG5cbiAgICAvLyBpZiBkZXRlcm1pbmUgaXMgbmVnYXRpdmUsIHdlIG5lZWQgdG8gaW52ZXJ0IG9uZSBzY2FsZVxuICAgIGNvbnN0IGRldCA9IGRldGVybWluYW50KHNyY01hdCk7XG4gICAgaWYgKGRldCA8IDApIHN4ID0gLXN4O1xuXG4gICAgZHN0VHJhbnNsYXRpb25bMF0gPSBzcmNNYXRbMTJdO1xuICAgIGRzdFRyYW5zbGF0aW9uWzFdID0gc3JjTWF0WzEzXTtcbiAgICBkc3RUcmFuc2xhdGlvblsyXSA9IHNyY01hdFsxNF07XG5cbiAgICAvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxuICAgIGNvbnN0IF9tMSA9IHNyY01hdC5zbGljZSgpO1xuXG4gICAgY29uc3QgaW52U1ggPSAxIC8gc3g7XG4gICAgY29uc3QgaW52U1kgPSAxIC8gc3k7XG4gICAgY29uc3QgaW52U1ogPSAxIC8gc3o7XG5cbiAgICBfbTFbMF0gKj0gaW52U1g7XG4gICAgX20xWzFdICo9IGludlNYO1xuICAgIF9tMVsyXSAqPSBpbnZTWDtcblxuICAgIF9tMVs0XSAqPSBpbnZTWTtcbiAgICBfbTFbNV0gKj0gaW52U1k7XG4gICAgX20xWzZdICo9IGludlNZO1xuXG4gICAgX20xWzhdICo9IGludlNaO1xuICAgIF9tMVs5XSAqPSBpbnZTWjtcbiAgICBfbTFbMTBdICo9IGludlNaO1xuXG4gICAgZ2V0Um90YXRpb24oZHN0Um90YXRpb24sIF9tMSk7XG5cbiAgICBkc3RTY2FsZVswXSA9IHN4O1xuICAgIGRzdFNjYWxlWzFdID0gc3k7XG4gICAgZHN0U2NhbGVbMl0gPSBzejtcbn1cblxuLyoqXG4gKiBGcm9tIGdsVEYtVHJhbnNmb3JtXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZG9ubWNjdXJkeS9nbFRGLVRyYW5zZm9ybS9ibG9iL21haW4vcGFja2FnZXMvY29yZS9zcmMvdXRpbHMvbWF0aC11dGlscy50c1xuICpcbiAqIENvbXBvc2UgVFJTIHByb3BlcnRpZXMgdG8gYSBtYXQ0LlxuICpcbiAqIEVxdWl2YWxlbnQgdG8gdGhlIE1hdHJpeDQgY29tcG9zZSgpIG1ldGhvZCBpbiB0aHJlZS5qcywgYW5kIGludGVudGlvbmFsbHkgbm90IHVzaW5nIHRoZVxuICogZ2wtbWF0cml4IHZlcnNpb24uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RvamkvZ2wtbWF0cml4L2lzc3Vlcy80MDhcbiAqXG4gKiBAcGFyYW0ge21hdDR9IGRzdE1hdCBNYXRyaXggZWxlbWVudCwgdG8gYmUgbW9kaWZpZWQgYW5kIHJldHVybmVkLlxuICogQHBhcmFtIHtxdWF0NH0gc3JjUm90YXRpb24gUm90YXRpb24gZWxlbWVudCBvZiBtYXRyaXguXG4gKiBAcGFyYW0ge3ZlYzN9IHNyY1RyYW5zbGF0aW9uIFRyYW5zbGF0aW9uIGVsZW1lbnQgb2YgbWF0cml4LlxuICogQHBhcmFtIHt2ZWMzfSBzcmNTY2FsZSBTY2FsZSBlbGVtZW50IG9mIG1hdHJpeC5cbiAqIEByZXR1cm5zIHttYXQ0fSBkc3RNYXQsIG92ZXJ3cml0dGVuIHRvIG1hdDQgZXF1aXZhbGVudCBvZiBnaXZlbiBUUlMgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvc2UoZHN0TWF0LCBzcmNSb3RhdGlvbiwgc3JjVHJhbnNsYXRpb24sIHNyY1NjYWxlKSB7XG4gICAgY29uc3QgdGUgPSBkc3RNYXQ7XG5cbiAgICBjb25zdCB4ID0gc3JjUm90YXRpb25bMF0sXG4gICAgICAgIHkgPSBzcmNSb3RhdGlvblsxXSxcbiAgICAgICAgeiA9IHNyY1JvdGF0aW9uWzJdLFxuICAgICAgICB3ID0gc3JjUm90YXRpb25bM107XG4gICAgY29uc3QgeDIgPSB4ICsgeCxcbiAgICAgICAgeTIgPSB5ICsgeSxcbiAgICAgICAgejIgPSB6ICsgejtcbiAgICBjb25zdCB4eCA9IHggKiB4MixcbiAgICAgICAgeHkgPSB4ICogeTIsXG4gICAgICAgIHh6ID0geCAqIHoyO1xuICAgIGNvbnN0IHl5ID0geSAqIHkyLFxuICAgICAgICB5eiA9IHkgKiB6MixcbiAgICAgICAgenogPSB6ICogejI7XG4gICAgY29uc3Qgd3ggPSB3ICogeDIsXG4gICAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgICB3eiA9IHcgKiB6MjtcblxuICAgIGNvbnN0IHN4ID0gc3JjU2NhbGVbMF0sXG4gICAgICAgIHN5ID0gc3JjU2NhbGVbMV0sXG4gICAgICAgIHN6ID0gc3JjU2NhbGVbMl07XG5cbiAgICB0ZVswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICAgIHRlWzFdID0gKHh5ICsgd3opICogc3g7XG4gICAgdGVbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICB0ZVszXSA9IDA7XG5cbiAgICB0ZVs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICAgIHRlWzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gICAgdGVbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICB0ZVs3XSA9IDA7XG5cbiAgICB0ZVs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgIHRlWzldID0gKHl6IC0gd3gpICogc3o7XG4gICAgdGVbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gICAgdGVbMTFdID0gMDtcblxuICAgIHRlWzEyXSA9IHNyY1RyYW5zbGF0aW9uWzBdO1xuICAgIHRlWzEzXSA9IHNyY1RyYW5zbGF0aW9uWzFdO1xuICAgIHRlWzE0XSA9IHNyY1RyYW5zbGF0aW9uWzJdO1xuICAgIHRlWzE1XSA9IDE7XG5cbiAgICByZXR1cm4gdGU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUob3V0LCBxLCB2LCBzKSB7XG4gICAgLy8gUXVhdGVybmlvbiBtYXRoXG4gICAgbGV0IHggPSBxWzBdLFxuICAgICAgICB5ID0gcVsxXSxcbiAgICAgICAgeiA9IHFbMl0sXG4gICAgICAgIHcgPSBxWzNdO1xuICAgIGxldCB4MiA9IHggKyB4O1xuICAgIGxldCB5MiA9IHkgKyB5O1xuICAgIGxldCB6MiA9IHogKyB6O1xuXG4gICAgbGV0IHh4ID0geCAqIHgyO1xuICAgIGxldCB4eSA9IHggKiB5MjtcbiAgICBsZXQgeHogPSB4ICogejI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB5eiA9IHkgKiB6MjtcbiAgICBsZXQgenogPSB6ICogejI7XG4gICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgIGxldCB3eSA9IHcgKiB5MjtcbiAgICBsZXQgd3ogPSB3ICogejI7XG4gICAgbGV0IHN4ID0gc1swXTtcbiAgICBsZXQgc3kgPSBzWzFdO1xuICAgIGxldCBzeiA9IHNbMl07XG5cbiAgICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgICBvdXRbMV0gPSAoeHkgKyB3eikgKiBzeDtcbiAgICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9ICh4eSAtIHd6KSAqIHN5O1xuICAgIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICAgIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gICAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XG4gICAgb3V0WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSB2WzBdO1xuICAgIG91dFsxM10gPSB2WzFdO1xuICAgIG91dFsxNF0gPSB2WzJdO1xuICAgIG91dFsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgNHg0IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gICAgbGV0IHggPSBxWzBdLFxuICAgICAgICB5ID0gcVsxXSxcbiAgICAgICAgeiA9IHFbMl0sXG4gICAgICAgIHcgPSBxWzNdO1xuICAgIGxldCB4MiA9IHggKyB4O1xuICAgIGxldCB5MiA9IHkgKyB5O1xuICAgIGxldCB6MiA9IHogKyB6O1xuXG4gICAgbGV0IHh4ID0geCAqIHgyO1xuICAgIGxldCB5eCA9IHkgKiB4MjtcbiAgICBsZXQgeXkgPSB5ICogeTI7XG4gICAgbGV0IHp4ID0geiAqIHgyO1xuICAgIGxldCB6eSA9IHogKiB5MjtcbiAgICBsZXQgenogPSB6ICogejI7XG4gICAgbGV0IHd4ID0gdyAqIHgyO1xuICAgIGxldCB3eSA9IHcgKiB5MjtcbiAgICBsZXQgd3ogPSB3ICogejI7XG5cbiAgICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgICBvdXRbMV0gPSB5eCArIHd6O1xuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzNdID0gMDtcblxuICAgIG91dFs0XSA9IHl4IC0gd3o7XG4gICAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzZdID0genkgKyB3eDtcbiAgICBvdXRbN10gPSAwO1xuXG4gICAgb3V0WzhdID0genggKyB3eTtcbiAgICBvdXRbOV0gPSB6eSAtIHd4O1xuICAgIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgICBvdXRbMTFdID0gMDtcblxuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gZm92eSBWZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIHJhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmUob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICAgIGxldCBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpO1xuICAgIGxldCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzBdID0gZiAvIGFzcGVjdDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IGY7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzExXSA9IC0xO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xuICAgIG91dFsxNV0gPSAwO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgICBsZXQgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gICAgbGV0IGJ0ID0gMSAvIChib3R0b20gLSB0b3ApO1xuICAgIGxldCBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzBdID0gLTIgKiBscjtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs1XSA9IC0yICogYnQ7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTBdID0gMiAqIG5mO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICAgIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICAgIG91dFsxNF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgICBvdXRbMTVdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG1hdHJpeCB0aGF0IG1ha2VzIHNvbWV0aGluZyBsb29rIGF0IHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7dmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7dmVjM30gdGFyZ2V0IFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YXJnZXRUbyhvdXQsIGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgIGxldCBleWV4ID0gZXllWzBdLFxuICAgICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgICBleWV6ID0gZXllWzJdLFxuICAgICAgICB1cHggPSB1cFswXSxcbiAgICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICAgIHVweiA9IHVwWzJdO1xuXG4gICAgbGV0IHowID0gZXlleCAtIHRhcmdldFswXSxcbiAgICAgICAgejEgPSBleWV5IC0gdGFyZ2V0WzFdLFxuICAgICAgICB6MiA9IGV5ZXogLSB0YXJnZXRbMl07XG5cbiAgICBsZXQgbGVuID0gejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgLy8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXG4gICAgICAgIHoyID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgICAgIHowICo9IGxlbjtcbiAgICAgICAgejEgKj0gbGVuO1xuICAgICAgICB6MiAqPSBsZW47XG4gICAgfVxuXG4gICAgbGV0IHgwID0gdXB5ICogejIgLSB1cHogKiB6MSxcbiAgICAgICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyLFxuICAgICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG5cbiAgICBsZW4gPSB4MCAqIHgwICsgeDEgKiB4MSArIHgyICogeDI7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcbiAgICAgICAgaWYgKHVweikge1xuICAgICAgICAgICAgdXB4ICs9IDFlLTY7XG4gICAgICAgIH0gZWxzZSBpZiAodXB5KSB7XG4gICAgICAgICAgICB1cHogKz0gMWUtNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVweSArPSAxZS02O1xuICAgICAgICB9XG4gICAgICAgICh4MCA9IHVweSAqIHoyIC0gdXB6ICogejEpLCAoeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyKSwgKHgyID0gdXB4ICogejEgLSB1cHkgKiB6MCk7XG5cbiAgICAgICAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuICAgIH1cblxuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcblxuICAgIG91dFswXSA9IHgwO1xuICAgIG91dFsxXSA9IHgxO1xuICAgIG91dFsyXSA9IHgyO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gejEgKiB4MiAtIHoyICogeDE7XG4gICAgb3V0WzVdID0gejIgKiB4MCAtIHowICogeDI7XG4gICAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSB6MDtcbiAgICBvdXRbOV0gPSB6MTtcbiAgICBvdXRbMTBdID0gejI7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IGV5ZXg7XG4gICAgb3V0WzEzXSA9IGV5ZXk7XG4gICAgb3V0WzE0XSA9IGV5ZXo7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3NcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gICAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gICAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gICAgb3V0WzddID0gYVs3XSArIGJbN107XG4gICAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gICAgb3V0WzldID0gYVs5XSArIGJbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdICsgYlsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdICsgYlsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gLSBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICAgIG91dFs5XSA9IGFbOV0gLSBiWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXSAtIGJbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXSAtIGJbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXSAtIGJbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXSAtIGJbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XSAtIGJbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XSAtIGJbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICBvdXRbM10gPSBhWzNdICogYjtcbiAgICBvdXRbNF0gPSBhWzRdICogYjtcbiAgICBvdXRbNV0gPSBhWzVdICogYjtcbiAgICBvdXRbNl0gPSBhWzZdICogYjtcbiAgICBvdXRbN10gPSBhWzddICogYjtcbiAgICBvdXRbOF0gPSBhWzhdICogYjtcbiAgICBvdXRbOV0gPSBhWzldICogYjtcbiAgICBvdXRbMTBdID0gYVsxMF0gKiBiO1xuICAgIG91dFsxMV0gPSBhWzExXSAqIGI7XG4gICAgb3V0WzEyXSA9IGFbMTJdICogYjtcbiAgICBvdXRbMTNdID0gYVsxM10gKiBiO1xuICAgIG91dFsxNF0gPSBhWzE0XSAqIGI7XG4gICAgb3V0WzE1XSA9IGFbMTVdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuIiwiaW1wb3J0ICogYXMgdmVjNCBmcm9tICcuL1ZlYzRGdW5jLmpzJztcblxuLyoqXG4gKiBTZXQgYSBxdWF0IHRvIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0cyBhIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYW5kIHJvdGF0aW9uIGF4aXMsXG4gKiB0aGVuIHJldHVybnMgaXQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEF4aXNBbmdsZShvdXQsIGF4aXMsIHJhZCkge1xuICAgIHJhZCA9IHJhZCAqIDAuNTtcbiAgICBsZXQgcyA9IE1hdGguc2luKHJhZCk7XG4gICAgb3V0WzBdID0gcyAqIGF4aXNbMF07XG4gICAgb3V0WzFdID0gcyAqIGF4aXNbMV07XG4gICAgb3V0WzJdID0gcyAqIGF4aXNbMl07XG4gICAgb3V0WzNdID0gTWF0aC5jb3MocmFkKTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHF1YXRzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl0sXG4gICAgICAgIGJ3ID0gYlszXTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFggYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ4ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYng7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XG4gICAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYng7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ5ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF5ICogYnk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFogYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gICAgcmFkICo9IDAuNTtcblxuICAgIGxldCBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYXogPSBhWzJdLFxuICAgICAgICBhdyA9IGFbM107XG4gICAgbGV0IGJ6ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuXG4gICAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gICAgb3V0WzFdID0gYXkgKiBidyAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYno7XG4gICAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIC8vIGJlbmNobWFya3M6XG4gICAgLy8gICAgaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi1zbGVycC1pbXBsZW1lbnRhdGlvbnNcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdLFxuICAgICAgICBidyA9IGJbM107XG5cbiAgICBsZXQgb21lZ2EsIGNvc29tLCBzaW5vbSwgc2NhbGUwLCBzY2FsZTE7XG5cbiAgICAvLyBjYWxjIGNvc2luZVxuICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcbiAgICAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcbiAgICBpZiAoY29zb20gPCAwLjApIHtcbiAgICAgICAgY29zb20gPSAtY29zb207XG4gICAgICAgIGJ4ID0gLWJ4O1xuICAgICAgICBieSA9IC1ieTtcbiAgICAgICAgYnogPSAtYno7XG4gICAgICAgIGJ3ID0gLWJ3O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgY29lZmZpY2llbnRzXG4gICAgaWYgKDEuMCAtIGNvc29tID4gMC4wMDAwMDEpIHtcbiAgICAgICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICAgICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XG4gICAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgICAgICAvLyAgLi4uIHNvIHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgICAgIHNjYWxlMSA9IHQ7XG4gICAgfVxuICAgIC8vIGNhbGN1bGF0ZSBmaW5hbCB2YWx1ZXNcbiAgICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICAgIG91dFsxXSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XG4gICAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAgPSBhWzBdLFxuICAgICAgICBhMSA9IGFbMV0sXG4gICAgICAgIGEyID0gYVsyXSxcbiAgICAgICAgYTMgPSBhWzNdO1xuICAgIGxldCBkb3QgPSBhMCAqIGEwICsgYTEgKiBhMSArIGEyICogYTIgKyBhMyAqIGEzO1xuICAgIGxldCBpbnZEb3QgPSBkb3QgPyAxLjAgLyBkb3QgOiAwO1xuXG4gICAgLy8gVE9ETzogV291bGQgYmUgZmFzdGVyIHRvIHJldHVybiBbMCwwLDAsMF0gaW1tZWRpYXRlbHkgaWYgZG90ID09IDBcblxuICAgIG91dFswXSA9IC1hMCAqIGludkRvdDtcbiAgICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XG4gICAgb3V0WzJdID0gLWEyICogaW52RG90O1xuICAgIG91dFszXSA9IGEzICogaW52RG90O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29uanVnYXRlIG9mIGEgcXVhdFxuICogSWYgdGhlIHF1YXRlcm5pb24gaXMgbm9ybWFsaXplZCwgdGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBxdWF0LmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmp1Z2F0ZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gM3gzIHJvdGF0aW9uIG1hdHJpeC5cbiAqXG4gKiBOT1RFOiBUaGUgcmVzdWx0YW50IHF1YXRlcm5pb24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIHlvdSBzaG91bGQgYmUgc3VyZVxuICogdG8gcmVub3JtYWxpemUgdGhlIHF1YXRlcm5pb24geW91cnNlbGYgd2hlcmUgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHttYXQzfSBtIHJvdGF0aW9uIG1hdHJpeFxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MyhvdXQsIG0pIHtcbiAgICAvLyBBbGdvcml0aG0gaW4gS2VuIFNob2VtYWtlJ3MgYXJ0aWNsZSBpbiAxOTg3IFNJR0dSQVBIIGNvdXJzZSBub3Rlc1xuICAgIC8vIGFydGljbGUgXCJRdWF0ZXJuaW9uIENhbGN1bHVzIGFuZCBGYXN0IEFuaW1hdGlvblwiLlxuICAgIGxldCBmVHJhY2UgPSBtWzBdICsgbVs0XSArIG1bOF07XG4gICAgbGV0IGZSb290O1xuXG4gICAgaWYgKGZUcmFjZSA+IDAuMCkge1xuICAgICAgICAvLyB8d3wgPiAxLzIsIG1heSBhcyB3ZWxsIGNob29zZSB3ID4gMS8yXG4gICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7IC8vIDJ3XG4gICAgICAgIG91dFszXSA9IDAuNSAqIGZSb290O1xuICAgICAgICBmUm9vdCA9IDAuNSAvIGZSb290OyAvLyAxLyg0dylcbiAgICAgICAgb3V0WzBdID0gKG1bNV0gLSBtWzddKSAqIGZSb290O1xuICAgICAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XG4gICAgICAgIG91dFsyXSA9IChtWzFdIC0gbVszXSkgKiBmUm9vdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB8d3wgPD0gMS8yXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKG1bNF0gPiBtWzBdKSBpID0gMTtcbiAgICAgICAgaWYgKG1bOF0gPiBtW2kgKiAzICsgaV0pIGkgPSAyO1xuICAgICAgICBsZXQgaiA9IChpICsgMSkgJSAzO1xuICAgICAgICBsZXQgayA9IChpICsgMikgJSAzO1xuXG4gICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KG1baSAqIDMgKyBpXSAtIG1baiAqIDMgKyBqXSAtIG1bayAqIDMgKyBrXSArIDEuMCk7XG4gICAgICAgIG91dFtpXSA9IDAuNSAqIGZSb290O1xuICAgICAgICBmUm9vdCA9IDAuNSAvIGZSb290O1xuICAgICAgICBvdXRbM10gPSAobVtqICogMyArIGtdIC0gbVtrICogMyArIGpdKSAqIGZSb290O1xuICAgICAgICBvdXRbal0gPSAobVtqICogMyArIGldICsgbVtpICogMyArIGpdKSAqIGZSb290O1xuICAgICAgICBvdXRba10gPSAobVtrICogMyArIGldICsgbVtpICogMyArIGtdKSAqIGZSb290O1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gZXVsZXIgYW5nbGUgeCwgeSwgei5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7dmVjM30gZXVsZXIgQW5nbGVzIHRvIHJvdGF0ZSBhcm91bmQgZWFjaCBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge1N0cmluZ30gb3JkZXIgZGV0YWlsaW5nIG9yZGVyIG9mIG9wZXJhdGlvbnMuIERlZmF1bHQgJ1hZWicuXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIGV1bGVyLCBvcmRlciA9ICdZWFonKSB7XG4gICAgbGV0IHN4ID0gTWF0aC5zaW4oZXVsZXJbMF0gKiAwLjUpO1xuICAgIGxldCBjeCA9IE1hdGguY29zKGV1bGVyWzBdICogMC41KTtcbiAgICBsZXQgc3kgPSBNYXRoLnNpbihldWxlclsxXSAqIDAuNSk7XG4gICAgbGV0IGN5ID0gTWF0aC5jb3MoZXVsZXJbMV0gKiAwLjUpO1xuICAgIGxldCBzeiA9IE1hdGguc2luKGV1bGVyWzJdICogMC41KTtcbiAgICBsZXQgY3ogPSBNYXRoLmNvcyhldWxlclsyXSAqIDAuNSk7XG5cbiAgICBpZiAob3JkZXIgPT09ICdYWVonKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiArIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pYWScpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWVgnKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1haWScpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiArIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHF1YXQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5ID0gdmVjNC5jb3B5O1xuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gdmVjNC5zZXQ7XG5cbi8qKlxuICogQWRkcyB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYWRkID0gdmVjNC5hZGQ7XG5cbi8qKlxuICogU2NhbGVzIGEgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNjYWxlID0gdmVjNC5zY2FsZTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGRvdCA9IHZlYzQuZG90O1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgbGVycCA9IHZlYzQubGVycDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBxdWF0XG4gKlxuICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gdmVjNC5sZW5ndGg7XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZSA9IHZlYzQubm9ybWFsaXplO1xuIiwiY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbn1cblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMzIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgbGV0IHggPSBiWzBdIC0gYVswXTtcbiAgICBsZXQgeSA9IGJbMV0gLSBhWzFdO1xuICAgIGxldCB6ID0gYlsyXSAtIGFbMl07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XG4gICAgbGV0IHggPSBiWzBdIC0gYVswXTtcbiAgICBsZXQgeSA9IGJbMV0gLSBhWzFdO1xuICAgIGxldCB6ID0gYlsyXSAtIGFbMl07XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cblxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICAgIG91dFswXSA9IC1hWzBdO1xuICAgIG91dFsxXSA9IC1hWzFdO1xuICAgIG91dFsyXSA9IC1hWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICAgIG91dFsyXSA9IDEuMCAvIGFbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgfVxuICAgIG91dFswXSA9IGFbMF0gKiBsZW47XG4gICAgb3V0WzFdID0gYVsxXSAqIGxlbjtcbiAgICBvdXRbMl0gPSBhWzJdICogbGVuO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXTtcbiAgICBsZXQgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIGJ6ID0gYlsyXTtcblxuICAgIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF6ICogYnggLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBmcmFtZSByYXRlIGluZGVwZW5kYW50LCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gZGVjYXkgZGVjYXkgY29uc3RhbnQgZm9yIGludGVycG9sYXRpb24uIHVzZWZ1bCByYW5nZSBiZXR3ZWVuIDEgYW5kIDI1LCBmcm9tIHNsb3cgdG8gZmFzdC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdCBkZWx0YSB0aW1lXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhMZXJwKG91dCwgYSwgYiwgZGVjYXksIGR0KSB7XG4gICAgY29uc3QgZXhwID0gTWF0aC5leHAoLWRlY2F5ICogZHQpO1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuXG4gICAgb3V0WzBdID0gYlswXSArIChheCAtIGJbMF0pICogZXhwO1xuICAgIG91dFsxXSA9IGJbMV0gKyAoYXkgLSBiWzFdKSAqIGV4cDtcbiAgICBvdXRbMl0gPSBiWzJdICsgKGF6IC0gYlsyXSkgKiBleHA7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICAgIHcgPSB3IHx8IDEuMDtcbiAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0pIC8gdztcbiAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcbiAgICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGFib3ZlIGJ1dCBkb2Vzbid0IGFwcGx5IHRyYW5zbGF0aW9uLlxuICogVXNlZnVsIGZvciByYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVSb3RhdGVNYXQ0KG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICAgIHcgPSB3IHx8IDEuMDtcbiAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6KSAvIHc7XG4gICAgb3V0WzFdID0gKG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzldICogeikgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6KSAvIHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQzLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0M30gbSB0aGUgM3gzIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcbiAgICBsZXQgeCA9IGFbMF0sXG4gICAgICAgIHkgPSBhWzFdLFxuICAgICAgICB6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gICAgb3V0WzFdID0geCAqIG1bMV0gKyB5ICogbVs0XSArIHogKiBtWzddO1xuICAgIG91dFsyXSA9IHggKiBtWzJdICsgeSAqIG1bNV0gKyB6ICogbVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcblxuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIGxldCBxeCA9IHFbMF0sXG4gICAgICAgIHF5ID0gcVsxXSxcbiAgICAgICAgcXogPSBxWzJdLFxuICAgICAgICBxdyA9IHFbM107XG5cbiAgICBsZXQgdXZ4ID0gcXkgKiB6IC0gcXogKiB5O1xuICAgIGxldCB1dnkgPSBxeiAqIHggLSBxeCAqIHo7XG4gICAgbGV0IHV2eiA9IHF4ICogeSAtIHF5ICogeDtcblxuICAgIGxldCB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eTtcbiAgICBsZXQgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dno7XG4gICAgbGV0IHV1dnogPSBxeCAqIHV2eSAtIHF5ICogdXZ4O1xuXG4gICAgbGV0IHcyID0gcXcgKiAyO1xuICAgIHV2eCAqPSB3MjtcbiAgICB1dnkgKj0gdzI7XG4gICAgdXZ6ICo9IHcyO1xuXG4gICAgdXV2eCAqPSAyO1xuICAgIHV1dnkgKj0gMjtcbiAgICB1dXZ6ICo9IDI7XG5cbiAgICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcbiAgICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcbiAgICBvdXRbMl0gPSB6ICsgdXZ6ICsgdXV2ejtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xuICovXG5leHBvcnQgY29uc3QgYW5nbGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRlbXBBID0gWzAsIDAsIDBdO1xuICAgIGNvbnN0IHRlbXBCID0gWzAsIDAsIDBdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGNvcHkodGVtcEEsIGEpO1xuICAgICAgICBjb3B5KHRlbXBCLCBiKTtcblxuICAgICAgICBub3JtYWxpemUodGVtcEEsIHRlbXBBKTtcbiAgICAgICAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XG5cbiAgICAgICAgbGV0IGNvc2luZSA9IGRvdCh0ZW1wQSwgdGVtcEIpO1xuXG4gICAgICAgIGlmIChjb3NpbmUgPiAxLjApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKGNvc2luZSA8IC0xLjApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLlBJO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhjb3NpbmUpO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl07XG59XG4iLCJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIG91dFszXSA9IHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWM0IGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBhWzNdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB9XG4gICAgb3V0WzBdID0geCAqIGxlbjtcbiAgICBvdXRbMV0gPSB5ICogbGVuO1xuICAgIG91dFsyXSA9IHogKiBsZW47XG4gICAgb3V0WzNdID0gdyAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBsZXQgYXcgPSBhWzNdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIG91dFszXSA9IGF3ICsgdCAqIChiWzNdIC0gYXcpO1xuICAgIHJldHVybiBvdXQ7XG59XG4iLCIvLyBjaGVjayBkb2N1bWVudCBmaXJzdCBzbyBpdCBkb2Vzbid0IGVycm9yIGluIG5vZGUuanNcbnZhciBzdHlsZSA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZVxuICA6IHt9XG5cbnZhciBwcmVmaXhlcyA9IFsnTycsICdtcycsICdNb3onLCAnV2Via2l0J11cbnZhciB1cHBlciA9IC8oW0EtWl0pL2dcbnZhciBtZW1vID0ge31cblxuLyoqXG4gKiBwcmVmaXggYGtleWBcbiAqXG4gKiAgIHByZWZpeCgndHJhbnNmb3JtJykgLy8gPT4gV2Via2l0VHJhbnNmb3JtXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4KGtleSl7XG4gIC8vIENhbWVsIGNhc2VcbiAga2V5ID0ga2V5LnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uKF8sIGNoYXIpe1xuICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKClcbiAgfSlcblxuICAvLyBXaXRob3V0IHByZWZpeFxuICBpZiAoc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSByZXR1cm4ga2V5XG5cbiAgLy8gV2l0aCBwcmVmaXhcbiAgdmFyIEtleSA9IGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKVxuICB2YXIgaSA9IHByZWZpeGVzLmxlbmd0aFxuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXhlc1tpXSArIEtleVxuICAgIGlmIChzdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbmFtZVxuICB9XG5cbiAgcmV0dXJuIGtleVxufVxuXG4vKipcbiAqIE1lbW9pemVkIHZlcnNpb24gb2YgYHByZWZpeGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcmVmaXhNZW1vemllZChrZXkpe1xuICByZXR1cm4ga2V5IGluIG1lbW9cbiAgICA/IG1lbW9ba2V5XVxuICAgIDogbWVtb1trZXldID0gcHJlZml4KGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkYXNoZWQgcHJlZml4XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4RGFzaGVkKGtleSl7XG4gIGtleSA9IHByZWZpeChrZXkpXG4gIGlmICh1cHBlci50ZXN0KGtleSkpIHtcbiAgICBrZXkgPSAnLScgKyBrZXkucmVwbGFjZSh1cHBlciwgJy0kMScpXG4gICAgdXBwZXIubGFzdEluZGV4ID0gMFxuICB9XG4gIHJldHVybiBrZXkudG9Mb3dlckNhc2UoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByZWZpeE1lbW96aWVkXG5tb2R1bGUuZXhwb3J0cy5kYXNoID0gcHJlZml4RGFzaGVkXG4iLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikgeyBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHsgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7IHZhciBvID0gclt0XTsgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIF90b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHsgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG52YXIgV2ViU29ja2V0Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIGZ1bmN0aW9uIFdlYlNvY2tldENsaWVudCh1cmwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViU29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2ViU29ja2V0Q2xpZW50LCBbe1xuICAgIGtleTogXCJvbk9wZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9ub3BlbiA9IGY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25jbG9zZSA9IGY7XG4gICAgfVxuXG4gICAgLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwib25NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xufSgpO1xuZXhwb3J0IHsgV2ViU29ja2V0Q2xpZW50IGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7IHJldHVybiAociA9IF90b1Byb3BlcnR5S2V5KHIpKSBpbiBlID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIHsgdmFsdWU6IHQsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSkgOiBlW3JdID0gdCwgZTsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gdHlwZW9mIGkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiB0IHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnksIF9fd2VicGFja19oYXNoX18gKi9cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwid2VicGFjay9tb2R1bGVcIiAvPlxuaW1wb3J0IHdlYnBhY2tIb3RMb2cgZnJvbSBcIndlYnBhY2svaG90L2xvZy5qc1wiO1xuaW1wb3J0IGhvdEVtaXR0ZXIgZnJvbSBcIndlYnBhY2svaG90L2VtaXR0ZXIuanNcIjtcbmltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0LmpzXCI7XG5pbXBvcnQgeyBmb3JtYXRQcm9ibGVtLCBjcmVhdGVPdmVybGF5IH0gZnJvbSBcIi4vb3ZlcmxheS5qc1wiO1xuaW1wb3J0IHsgbG9nLCBzZXRMb2dMZXZlbCB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuaW1wb3J0IHNlbmRNZXNzYWdlIGZyb20gXCIuL3V0aWxzL3NlbmRNZXNzYWdlLmpzXCI7XG5pbXBvcnQgeyBpc1Byb2dyZXNzU3VwcG9ydGVkLCBkZWZpbmVQcm9ncmVzc0VsZW1lbnQgfSBmcm9tIFwiLi9wcm9ncmVzcy5qc1wiO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE92ZXJsYXlPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCAoZXJyb3I6IEVycm9yKSA9PiBib29sZWFufSBbd2FybmluZ3NdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCAoZXJyb3I6IEVycm9yKSA9PiBib29sZWFufSBbZXJyb3JzXVxuICogQHByb3BlcnR5IHtib29sZWFuIHwgKGVycm9yOiBFcnJvcikgPT4gYm9vbGVhbn0gW3J1bnRpbWVFcnJvcnNdXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3RydXN0ZWRUeXBlc1BvbGljeU5hbWVdXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGhvdFxuICogQHByb3BlcnR5IHtib29sZWFufSBsaXZlUmVsb2FkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHByb2dyZXNzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCBPdmVybGF5T3B0aW9uc30gb3ZlcmxheVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtsb2dnaW5nXVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyZWNvbm5lY3RdXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0dXNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNVbmxvYWRpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW50SGFzaFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcmV2aW91c0hhc2hdXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCB7IHdhcm5pbmdzPzogYm9vbGVhbiB8IHN0cmluZzsgZXJyb3JzPzogYm9vbGVhbiB8IHN0cmluZzsgcnVudGltZUVycm9ycz86IGJvb2xlYW4gfCBzdHJpbmc7IH19IG92ZXJsYXlPcHRpb25zXG4gKi9cbnZhciBkZWNvZGVPdmVybGF5T3B0aW9ucyA9IGZ1bmN0aW9uIGRlY29kZU92ZXJsYXlPcHRpb25zKG92ZXJsYXlPcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3ZlcmxheU9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBbXCJ3YXJuaW5nc1wiLCBcImVycm9yc1wiLCBcInJ1bnRpbWVFcnJvcnNcIl0uZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3ZlcmxheU9wdGlvbnNbcHJvcGVydHldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBvdmVybGF5RmlsdGVyRnVuY3Rpb25TdHJpbmcgPSBkZWNvZGVVUklDb21wb25lbnQob3ZlcmxheU9wdGlvbnNbcHJvcGVydHldKTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICAgb3ZlcmxheU9wdGlvbnNbcHJvcGVydHldID0gbmV3IEZ1bmN0aW9uKFwibWVzc2FnZVwiLCBcInZhciBjYWxsYmFjayA9IFwiLmNvbmNhdChvdmVybGF5RmlsdGVyRnVuY3Rpb25TdHJpbmcsIFwiXFxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSlcIikpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlIHtTdGF0dXN9XG4gKi9cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICBjdXJyZW50SGFzaDogX193ZWJwYWNrX2hhc2hfX1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSA9IGZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWxsYmFjayB0byBnZXR0aW5nIGFsbCBzY3JpcHRzIHJ1bm5pbmcgaW4gdGhlIGRvY3VtZW50LlxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjcmlwdEVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSk7XG4gIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH1cblxuICAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVF1ZXJ5XG4gKiBAcmV0dXJucyB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBib29sZWFuIH19XG4gKi9cbnZhciBwYXJzZVVSTCA9IGZ1bmN0aW9uIHBhcnNlVVJMKHJlc291cmNlUXVlcnkpIHtcbiAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9fSAqL1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmICh0eXBlb2YgcmVzb3VyY2VRdWVyeSA9PT0gXCJzdHJpbmdcIiAmJiByZXNvdXJjZVF1ZXJ5ICE9PSBcIlwiKSB7XG4gICAgdmFyIHNlYXJjaFBhcmFtcyA9IHJlc291cmNlUXVlcnkuc2xpY2UoMSkuc3BsaXQoXCImXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFpciA9IHNlYXJjaFBhcmFtc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICByZXN1bHRbcGFpclswXV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdFNvdXJjZSA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKTtcbiAgICB2YXIgc2NyaXB0U291cmNlVVJMO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuXG4gICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVVJMIHBhcnNpbmcgZmFpbGVkLCBkbyBub3RoaW5nLlxuICAgICAgLy8gV2Ugd2lsbCBzdGlsbCBwcm9jZWVkIHRvIHNlZSBpZiB3ZSBjYW4gcmVjb3ZlciB1c2luZyBgcmVzb3VyY2VRdWVyeWBcbiAgICB9XG4gICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgcmVzdWx0ID0gc2NyaXB0U291cmNlVVJMO1xuICAgICAgcmVzdWx0LmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgcGFyc2VkUmVzb3VyY2VRdWVyeSA9IHBhcnNlVVJMKF9fcmVzb3VyY2VRdWVyeSk7XG52YXIgZW5hYmxlZEZlYXR1cmVzID0ge1xuICBcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcIjogZmFsc2UsXG4gIFwiTGl2ZSBSZWxvYWRpbmdcIjogZmFsc2UsXG4gIFByb2dyZXNzOiBmYWxzZSxcbiAgT3ZlcmxheTogZmFsc2Vcbn07XG5cbi8qKiBAdHlwZSB7T3B0aW9uc30gKi9cbnZhciBvcHRpb25zID0ge1xuICBob3Q6IGZhbHNlLFxuICBsaXZlUmVsb2FkOiBmYWxzZSxcbiAgcHJvZ3Jlc3M6IGZhbHNlLFxuICBvdmVybGF5OiBmYWxzZVxufTtcbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICBlbmFibGVkRmVhdHVyZXNbXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50XCJdID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gIGVuYWJsZWRGZWF0dXJlc1tcIkxpdmUgUmVsb2FkaW5nXCJdID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LnByb2dyZXNzID09PSBcInRydWVcIikge1xuICBvcHRpb25zLnByb2dyZXNzID0gdHJ1ZTtcbiAgZW5hYmxlZEZlYXR1cmVzLlByb2dyZXNzID0gdHJ1ZTtcbn1cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5Lm92ZXJsYXkpIHtcbiAgdHJ5IHtcbiAgICBvcHRpb25zLm92ZXJsYXkgPSBKU09OLnBhcnNlKHBhcnNlZFJlc291cmNlUXVlcnkub3ZlcmxheSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3IoXCJFcnJvciBwYXJzaW5nIG92ZXJsYXkgb3B0aW9ucyBmcm9tIHJlc291cmNlIHF1ZXJ5OlwiLCBlKTtcbiAgfVxuXG4gIC8vIEZpbGwgaW4gZGVmYXVsdCBcInRydWVcIiBwYXJhbXMgZm9yIHBhcnRpYWxseS1zcGVjaWZpZWQgb2JqZWN0cy5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRpb25zLm92ZXJsYXkgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGVycm9yczogdHJ1ZSxcbiAgICAgIHdhcm5pbmdzOiB0cnVlLFxuICAgICAgcnVudGltZUVycm9yczogdHJ1ZVxuICAgIH0sIG9wdGlvbnMub3ZlcmxheSk7XG4gICAgZGVjb2RlT3ZlcmxheU9wdGlvbnMob3B0aW9ucy5vdmVybGF5KTtcbiAgfVxuICBlbmFibGVkRmVhdHVyZXMuT3ZlcmxheSA9IHRydWU7XG59XG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nKSB7XG4gIG9wdGlvbnMubG9nZ2luZyA9IHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZztcbn1cbmlmICh0eXBlb2YgcGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgb3B0aW9ucy5yZWNvbm5lY3QgPSBOdW1iZXIocGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFxuICovXG52YXIgc2V0QWxsTG9nTGV2ZWwgPSBmdW5jdGlvbiBzZXRBbGxMb2dMZXZlbChsZXZlbCkge1xuICAvLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBITVIgbG9nZ2VyIG9wZXJhdGUgc2VwYXJhdGVseSBmcm9tIGRldiBzZXJ2ZXIgbG9nZ2VyXG4gIHdlYnBhY2tIb3RMb2cuc2V0TG9nTGV2ZWwobGV2ZWwgPT09IFwidmVyYm9zZVwiIHx8IGxldmVsID09PSBcImxvZ1wiID8gXCJpbmZvXCIgOiBsZXZlbCk7XG4gIHNldExvZ0xldmVsKGxldmVsKTtcbn07XG5pZiAob3B0aW9ucy5sb2dnaW5nKSB7XG4gIHNldEFsbExvZ0xldmVsKG9wdGlvbnMubG9nZ2luZyk7XG59XG52YXIgbG9nRW5hYmxlZEZlYXR1cmVzID0gZnVuY3Rpb24gbG9nRW5hYmxlZEZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gIHZhciBsaXN0RW5hYmxlZEZlYXR1cmVzID0gT2JqZWN0LmtleXMoZmVhdHVyZXMpO1xuICBpZiAoIWZlYXR1cmVzIHx8IGxpc3RFbmFibGVkRmVhdHVyZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsb2dTdHJpbmcgPSBcIlNlcnZlciBzdGFydGVkOlwiO1xuXG4gIC8vIFNlcnZlciBzdGFydGVkOiBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQsIExpdmUgUmVsb2FkaW5nIGVuYWJsZWQsIE92ZXJsYXkgZGlzYWJsZWQuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdEVuYWJsZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBsaXN0RW5hYmxlZEZlYXR1cmVzW2ldO1xuICAgIGxvZ1N0cmluZyArPSBcIiBcIi5jb25jYXQoa2V5LCBcIiBcIikuY29uY2F0KGZlYXR1cmVzW2tleV0gPyBcImVuYWJsZWRcIiA6IFwiZGlzYWJsZWRcIiwgXCIsXCIpO1xuICB9XG4gIC8vIHJlcGxhY2UgbGFzdCBjb21tYSB3aXRoIGEgcGVyaW9kXG4gIGxvZ1N0cmluZyA9IGxvZ1N0cmluZy5zbGljZSgwLCAtMSkuY29uY2F0KFwiLlwiKTtcbiAgbG9nLmluZm8obG9nU3RyaW5nKTtcbn07XG5sb2dFbmFibGVkRmVhdHVyZXMoZW5hYmxlZEZlYXR1cmVzKTtcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7XG59KTtcbnZhciBvdmVybGF5ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IGNyZWF0ZU92ZXJsYXkodHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJvYmplY3RcIiA/IHtcbiAgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZTogb3B0aW9ucy5vdmVybGF5LnRydXN0ZWRUeXBlc1BvbGljeU5hbWUsXG4gIGNhdGNoUnVudGltZUVycm9yOiBvcHRpb25zLm92ZXJsYXkucnVudGltZUVycm9yc1xufSA6IHtcbiAgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZTogZmFsc2UsXG4gIGNhdGNoUnVudGltZUVycm9yOiBvcHRpb25zLm92ZXJsYXlcbn0pIDoge1xuICBzZW5kOiBmdW5jdGlvbiBzZW5kKCkge31cbn07XG5cbi8qKlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0YXR1c30gY3VycmVudFN0YXR1c1xuICovXG52YXIgcmVsb2FkQXBwID0gZnVuY3Rpb24gcmVsb2FkQXBwKF9yZWYsIGN1cnJlbnRTdGF0dXMpIHtcbiAgdmFyIGhvdCA9IF9yZWYuaG90LFxuICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG4gIGlmIChjdXJyZW50U3RhdHVzLmlzVW5sb2FkaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjdXJyZW50SGFzaCA9IGN1cnJlbnRTdGF0dXMuY3VycmVudEhhc2gsXG4gICAgcHJldmlvdXNIYXNoID0gY3VycmVudFN0YXR1cy5wcmV2aW91c0hhc2g7XG4gIHZhciBpc0luaXRpYWwgPSBjdXJyZW50SGFzaC5pbmRleE9mKC8qKiBAdHlwZSB7c3RyaW5nfSAqL3ByZXZpb3VzSGFzaCkgPj0gMDtcbiAgaWYgKGlzSW5pdGlhbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1dpbmRvd30gcm9vdFdpbmRvd1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxJZFxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCkge1xuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgbG9nLmluZm8oXCJBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uXCIpO1xuICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cbiAgdmFyIHNlYXJjaCA9IHNlbGYubG9jYXRpb24uc2VhcmNoLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbGxvd1RvSG90ID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItaG90PWZhbHNlXCIpID09PSAtMTtcbiAgdmFyIGFsbG93VG9MaXZlUmVsb2FkID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItbGl2ZS1yZWxvYWQ9ZmFsc2VcIikgPT09IC0xO1xuICBpZiAoaG90ICYmIGFsbG93VG9Ib3QpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCBob3QgdXBkYXRlLi4uXCIpO1xuICAgIGhvdEVtaXR0ZXIuZW1pdChcIndlYnBhY2tIb3RVcGRhdGVcIiwgY3VycmVudFN0YXR1cy5jdXJyZW50SGFzaCk7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoY3VycmVudFN0YXR1cy5jdXJyZW50SGFzaCksIFwiKlwiKTtcbiAgICB9XG4gIH1cbiAgLy8gYWxsb3cgcmVmcmVzaGluZyB0aGUgcGFnZSBvbmx5IGlmIGxpdmVSZWxvYWQgaXNuJ3QgZGlzYWJsZWRcbiAgZWxzZSBpZiAobGl2ZVJlbG9hZCAmJiBhbGxvd1RvTGl2ZVJlbG9hZCkge1xuICAgIHZhciByb290V2luZG93ID0gc2VsZjtcblxuICAgIC8vIHVzZSBwYXJlbnQgd2luZG93IGZvciByZWxvYWQgKGluIGNhc2Ugd2UncmUgaW4gYW4gaWZyYW1lIHdpdGggbm8gdmFsaWQgc3JjKVxuICAgIHZhciBpbnRlcnZhbElkID0gc2VsZi5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gXCJhYm91dDpcIikge1xuICAgICAgICAvLyByZWxvYWQgaW1tZWRpYXRlbHkgaWYgcHJvdG9jb2wgaXMgdmFsaWRcbiAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290V2luZG93ID0gcm9vdFdpbmRvdy5wYXJlbnQ7XG4gICAgICAgIGlmIChyb290V2luZG93LnBhcmVudCA9PT0gcm9vdFdpbmRvdykge1xuICAgICAgICAgIC8vIGlmIHBhcmVudCBlcXVhbHMgY3VycmVudCB3aW5kb3cgd2UndmUgcmVhY2hlZCB0aGUgcm9vdCB3aGljaCB3b3VsZCBjb250aW51ZSBmb3JldmVyLCBzbyB0cmlnZ2VyIGEgcmVsb2FkIGFueXdheXNcbiAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xudmFyIGFuc2lSZWdleCA9IG5ldyBSZWdFeHAoW1wiW1xcXFx1MDAxQlxcXFx1MDA5Ql1bW1xcXFxdKCkjOz9dKig/Oig/Oig/Oig/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSspKnxbYS16QS1aXFxcXGRdKyg/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSopKik/XFxcXHUwMDA3KVwiLCBcIig/Oig/OlxcXFxkezEsNH0oPzo7XFxcXGR7MCw0fSkqKT9bXFxcXGRBLVBSLVRaY2YtbnEtdXk9Pjx+XSkpXCJdLmpvaW4oXCJ8XCIpLCBcImdcIik7XG5cbi8qKlxuICpcbiAqIFN0cmlwIFtBTlNJIGVzY2FwZSBjb2Rlc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSkgZnJvbSBhIHN0cmluZy5cbiAqIEFkYXB0ZWQgZnJvbSBjb2RlIG9yaWdpbmFsbHkgcmVsZWFzZWQgYnkgU2luZHJlIFNvcmh1c1xuICogTGljZW5zZWQgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgc3RyaXBBbnNpID0gZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIGBzdHJpbmdgLCBnb3QgYFwiLmNvbmNhdCh0eXBlb2Ygc3RyaW5nLCBcImBcIikpO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShhbnNpUmVnZXgsIFwiXCIpO1xufTtcbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgfSxcbiAgbGl2ZVJlbG9hZDogZnVuY3Rpb24gbGl2ZVJlbG9hZCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLlwiKTtcblxuICAgIC8vIEZpeGVzICMxMDQyLiBvdmVybGF5IGRvZXNuJ3QgY2xlYXIgaWYgZXJyb3JzIGFyZSBmaXhlZCBidXQgd2FybmluZ3MgcmVtYWluLlxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJJbnZhbGlkXCIpO1xuICB9LFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGZ1bmN0aW9uIGhhc2goX2hhc2gpIHtcbiAgICBzdGF0dXMucHJldmlvdXNIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoO1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICBsb2dnaW5nOiBzZXRBbGxMb2dMZXZlbCxcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMub3ZlcmxheSA9IHZhbHVlO1xuICAgIGRlY29kZU92ZXJsYXlPcHRpb25zKG9wdGlvbnMub3ZlcmxheSk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICovXG4gIHJlY29ubmVjdDogZnVuY3Rpb24gcmVjb25uZWN0KHZhbHVlKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5yZWNvbm5lY3QgPSB2YWx1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSkge1xuICAgIG9wdGlvbnMucHJvZ3Jlc3MgPSB2YWx1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7eyBwbHVnaW5OYW1lPzogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIsIG1zZzogc3RyaW5nIH19IGRhdGFcbiAgICovXG4gIFwicHJvZ3Jlc3MtdXBkYXRlXCI6IGZ1bmN0aW9uIHByb2dyZXNzVXBkYXRlKGRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lID8gXCJbXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgXCJdIFwiKSA6IFwiXCIpLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuICAgIGlmIChpc1Byb2dyZXNzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm9ncmVzcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwid2RzLXByb2dyZXNzXCIpO1xuICAgICAgICBpZiAoIXByb2dyZXNzKSB7XG4gICAgICAgICAgZGVmaW5lUHJvZ3Jlc3NFbGVtZW50KCk7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwid2RzLXByb2dyZXNzXCIpO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHByb2dyZXNzLnNldEF0dHJpYnV0ZShcInByb2dyZXNzXCIsIGRhdGEucGVyY2VudCk7XG4gICAgICAgIHByb2dyZXNzLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgb3B0aW9ucy5wcm9ncmVzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKFwiUHJvZ3Jlc3NcIiwgZGF0YSk7XG4gIH0sXG4gIFwic3RpbGwtb2tcIjogZnVuY3Rpb24gc3RpbGxPaygpIHtcbiAgICBsb2cuaW5mbyhcIk5vdGhpbmcgY2hhbmdlZC5cIik7XG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgdHlwZTogXCJESVNNSVNTXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShcIlN0aWxsT2tcIik7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZShcIk9rXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJzdGF0aWMtY2hhbmdlZFwiOiBmdW5jdGlvbiBzdGF0aWNDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gd2FybmluZ3NcbiAgICogQHBhcmFtIHthbnl9IHBhcmFtc1xuICAgKi9cbiAgd2FybmluZ3M6IGZ1bmN0aW9uIHdhcm5pbmdzKF93YXJuaW5ncywgcGFyYW1zKSB7XG4gICAgbG9nLndhcm4oXCJXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuXCIpO1xuICAgIHZhciBwcmludGFibGVXYXJuaW5ncyA9IF93YXJuaW5ncy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKFwid2FybmluZ1wiLCBlcnJvciksXG4gICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcbiAgICBzZW5kTWVzc2FnZShcIldhcm5pbmdzXCIsIHByaW50YWJsZVdhcm5pbmdzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZVdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihwcmludGFibGVXYXJuaW5nc1tpXSk7XG4gICAgfVxuICAgIHZhciBvdmVybGF5V2FybmluZ3NTZXR0aW5nID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5Lndhcm5pbmdzO1xuICAgIGlmIChvdmVybGF5V2FybmluZ3NTZXR0aW5nKSB7XG4gICAgICB2YXIgd2FybmluZ3NUb0Rpc3BsYXkgPSB0eXBlb2Ygb3ZlcmxheVdhcm5pbmdzU2V0dGluZyA9PT0gXCJmdW5jdGlvblwiID8gX3dhcm5pbmdzLmZpbHRlcihvdmVybGF5V2FybmluZ3NTZXR0aW5nKSA6IF93YXJuaW5ncztcbiAgICAgIGlmICh3YXJuaW5nc1RvRGlzcGxheS5sZW5ndGgpIHtcbiAgICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkJVSUxEX0VSUk9SXCIsXG4gICAgICAgICAgbGV2ZWw6IFwid2FybmluZ1wiLFxuICAgICAgICAgIG1lc3NhZ2VzOiBfd2FybmluZ3NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnByZXZlbnRSZWxvYWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yW119IGVycm9yc1xuICAgKi9cbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcihcIkVycm9ycyB3aGlsZSBjb21waWxpbmcuIFJlbG9hZCBwcmV2ZW50ZWQuXCIpO1xuICAgIHZhciBwcmludGFibGVFcnJvcnMgPSBfZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbTIgPSBmb3JtYXRQcm9ibGVtKFwiZXJyb3JcIiwgZXJyb3IpLFxuICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbTIuaGVhZGVyLFxuICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0yLmJvZHk7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcbiAgICBzZW5kTWVzc2FnZShcIkVycm9yc1wiLCBwcmludGFibGVFcnJvcnMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cuZXJyb3IocHJpbnRhYmxlRXJyb3JzW2ldKTtcbiAgICB9XG4gICAgdmFyIG92ZXJsYXlFcnJvcnNTZXR0aW5ncyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS5lcnJvcnM7XG4gICAgaWYgKG92ZXJsYXlFcnJvcnNTZXR0aW5ncykge1xuICAgICAgdmFyIGVycm9yc1RvRGlzcGxheSA9IHR5cGVvZiBvdmVybGF5RXJyb3JzU2V0dGluZ3MgPT09IFwiZnVuY3Rpb25cIiA/IF9lcnJvcnMuZmlsdGVyKG92ZXJsYXlFcnJvcnNTZXR0aW5ncykgOiBfZXJyb3JzO1xuICAgICAgaWYgKGVycm9yc1RvRGlzcGxheS5sZW5ndGgpIHtcbiAgICAgICAgb3ZlcmxheS5zZW5kKHtcbiAgICAgICAgICB0eXBlOiBcIkJVSUxEX0VSUk9SXCIsXG4gICAgICAgICAgbGV2ZWw6IFwiZXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlczogX2Vycm9yc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKi9cbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgIGxvZy5lcnJvcihfZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgbG9nLmluZm8oXCJEaXNjb25uZWN0ZWQhXCIpO1xuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2VuZCh7XG4gICAgICAgIHR5cGU6IFwiRElTTUlTU1wiXG4gICAgICB9KTtcbiAgICB9XG4gICAgc2VuZE1lc3NhZ2UoXCJDbG9zZVwiKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3sgcHJvdG9jb2w/OiBzdHJpbmcsIGF1dGg/OiBzdHJpbmcsIGhvc3RuYW1lPzogc3RyaW5nLCBwb3J0Pzogc3RyaW5nLCBwYXRobmFtZT86IHN0cmluZywgc2VhcmNoPzogc3RyaW5nLCBoYXNoPzogc3RyaW5nLCBzbGFzaGVzPzogYm9vbGVhbiB9fSBvYmpVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBmb3JtYXRVUkwgPSBmdW5jdGlvbiBmb3JtYXRVUkwob2JqVVJMKSB7XG4gIHZhciBwcm90b2NvbCA9IG9ialVSTC5wcm90b2NvbCB8fCBcIlwiO1xuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gXCI6XCIpIHtcbiAgICBwcm90b2NvbCArPSBcIjpcIjtcbiAgfVxuICB2YXIgYXV0aCA9IG9ialVSTC5hdXRoIHx8IFwiXCI7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgXCI6XCIpO1xuICAgIGF1dGggKz0gXCJAXCI7XG4gIH1cbiAgdmFyIGhvc3QgPSBcIlwiO1xuICBpZiAob2JqVVJMLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAob2JqVVJMLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpID09PSAtMSA/IG9ialVSTC5ob3N0bmFtZSA6IFwiW1wiLmNvbmNhdChvYmpVUkwuaG9zdG5hbWUsIFwiXVwiKSk7XG4gICAgaWYgKG9ialVSTC5wb3J0KSB7XG4gICAgICBob3N0ICs9IFwiOlwiLmNvbmNhdChvYmpVUkwucG9ydCk7XG4gICAgfVxuICB9XG4gIHZhciBwYXRobmFtZSA9IG9ialVSTC5wYXRobmFtZSB8fCBcIlwiO1xuICBpZiAob2JqVVJMLnNsYXNoZXMpIHtcbiAgICBob3N0ID0gXCIvL1wiLmNvbmNhdChob3N0IHx8IFwiXCIpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09IFwiL1wiKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLmNvbmNhdChwYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9IFwiXCI7XG4gIH1cbiAgdmFyIHNlYXJjaCA9IG9ialVSTC5zZWFyY2ggfHwgXCJcIjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSBcIj9cIikge1xuICAgIHNlYXJjaCA9IFwiP1wiLmNvbmNhdChzZWFyY2gpO1xuICB9XG4gIHZhciBoYXNoID0gb2JqVVJMLmhhc2ggfHwgXCJcIjtcbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09IFwiI1wiKSB7XG4gICAgaGFzaCA9IFwiI1wiLmNvbmNhdChoYXNoKTtcbiAgfVxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZyxcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZShcIiNcIiwgXCIlMjNcIik7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm90b2NvbCkuY29uY2F0KGhvc3QpLmNvbmNhdChwYXRobmFtZSkuY29uY2F0KHNlYXJjaCkuY29uY2F0KGhhc2gpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudmFyIGNyZWF0ZVNvY2tldFVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVNvY2tldFVSTChwYXJzZWRVUkwpIHtcbiAgdmFyIGhvc3RuYW1lID0gcGFyc2VkVVJMLmhvc3RuYW1lO1xuXG4gIC8vIE5vZGUuanMgbW9kdWxlIHBhcnNlcyBpdCBhcyBgOjpgXG4gIC8vIGBuZXcgVVJMKHVybFN0cmluZywgW2Jhc2VVUkxTdHJpbmddKWAgcGFyc2VzIGl0IGFzICdbOjpdJ1xuICB2YXIgaXNJbkFkZHJBbnkgPSBob3N0bmFtZSA9PT0gXCIwLjAuMC4wXCIgfHwgaG9zdG5hbWUgPT09IFwiOjpcIiB8fCBob3N0bmFtZSA9PT0gXCJbOjpdXCI7XG5cbiAgLy8gd2h5IGRvIHdlIG5lZWQgdGhpcyBjaGVjaz9cbiAgLy8gaG9zdG5hbWUgbi9hIGZvciBmaWxlIHByb3RvY29sIChleGFtcGxlLCB3aGVuIHVzaW5nIGVsZWN0cm9uLCBpb25pYylcbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8zODRcbiAgaWYgKGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgIGhvc3RuYW1lID0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxuICB2YXIgc29ja2V0VVJMUHJvdG9jb2wgPSBwYXJzZWRVUkwucHJvdG9jb2wgfHwgc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcblxuICAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYiBzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWIgc29ja2V0cy5cbiAgaWYgKHNvY2tldFVSTFByb3RvY29sID09PSBcImF1dG86XCIgfHwgaG9zdG5hbWUgJiYgaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbCA9PT0gXCJodHRwczpcIikge1xuICAgIHNvY2tldFVSTFByb3RvY29sID0gc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbiAgfVxuICBzb2NrZXRVUkxQcm90b2NvbCA9IHNvY2tldFVSTFByb3RvY29sLnJlcGxhY2UoL14oPzpodHRwfC4rLWV4dGVuc2lvbnxmaWxlKS9pLCBcIndzXCIpO1xuICB2YXIgc29ja2V0VVJMQXV0aCA9IFwiXCI7XG5cbiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTHN0cmluZ10pYCBkb2Vzbid0IGhhdmUgYGF1dGhgIHByb3BlcnR5XG4gIC8vIFBhcnNlIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGluIGNhc2Ugd2UgbmVlZCB0aGVtXG4gIGlmIChwYXJzZWRVUkwudXNlcm5hbWUpIHtcbiAgICBzb2NrZXRVUkxBdXRoID0gcGFyc2VkVVJMLnVzZXJuYW1lO1xuXG4gICAgLy8gU2luY2UgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBlbXB0eSB1c2VybmFtZSxcbiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgcGFzc3dvcmQgaWYgdGhlIHVzZXJuYW1lIGlzIG5vdCBlbXB0eS5cbiAgICBpZiAocGFyc2VkVVJMLnBhc3N3b3JkKSB7XG4gICAgICAvLyBSZXN1bHQ6IDx1c2VybmFtZT46PHBhc3N3b3JkPlxuICAgICAgc29ja2V0VVJMQXV0aCA9IHNvY2tldFVSTEF1dGguY29uY2F0KFwiOlwiLCBwYXJzZWRVUkwucGFzc3dvcmQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEluIGNhc2UgdGhlIGhvc3QgaXMgYSByYXcgSVB2NiBhZGRyZXNzLCBpdCBjYW4gYmUgZW5jbG9zZWQgaW5cbiAgLy8gdGhlIGJyYWNrZXRzIGFzIHRoZSBicmFja2V0cyBhcmUgbmVlZGVkIGluIHRoZSBmaW5hbCBVUkwgc3RyaW5nLlxuICAvLyBOZWVkIHRvIHJlbW92ZSB0aG9zZSBhcyB1cmwuZm9ybWF0IGJsaW5kbHkgYWRkcyBpdHMgb3duIHNldCBvZiBicmFja2V0c1xuICAvLyBpZiB0aGUgaG9zdCBzdHJpbmcgY29udGFpbnMgY29sb25zLiBUaGF0IHdvdWxkIGxlYWQgdG8gbm9uLXdvcmtpbmdcbiAgLy8gZG91YmxlIGJyYWNrZXRzIChlLmcuIFtbOjpdXSkgaG9zdFxuICAvL1xuICAvLyBBbGwgb2YgdGhlc2Ugd2ViIHNvY2tldCB1cmwgcGFyYW1zIGFyZSBvcHRpb25hbGx5IHBhc3NlZCBpbiB0aHJvdWdoIHJlc291cmNlUXVlcnksXG4gIC8vIHNvIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZFxuICB2YXIgc29ja2V0VVJMSG9zdG5hbWUgPSAoaG9zdG5hbWUgfHwgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSB8fCBcImxvY2FsaG9zdFwiKS5yZXBsYWNlKC9eXFxbKC4qKVxcXSQvLCBcIiQxXCIpO1xuICB2YXIgc29ja2V0VVJMUG9ydCA9IHBhcnNlZFVSTC5wb3J0O1xuICBpZiAoIXNvY2tldFVSTFBvcnQgfHwgc29ja2V0VVJMUG9ydCA9PT0gXCIwXCIpIHtcbiAgICBzb2NrZXRVUkxQb3J0ID0gc2VsZi5sb2NhdGlvbi5wb3J0O1xuICB9XG5cbiAgLy8gSWYgcGF0aCBpcyBwcm92aWRlZCBpdCdsbCBiZSBwYXNzZWQgaW4gdmlhIHRoZSByZXNvdXJjZVF1ZXJ5IGFzIGFcbiAgLy8gcXVlcnkgcGFyYW0gc28gaXQgaGFzIHRvIGJlIHBhcnNlZCBvdXQgb2YgdGhlIHF1ZXJ5c3RyaW5nIGluIG9yZGVyIGZvciB0aGVcbiAgLy8gY2xpZW50IHRvIG9wZW4gdGhlIHNvY2tldCB0byB0aGUgY29ycmVjdCBsb2NhdGlvbi5cbiAgdmFyIHNvY2tldFVSTFBhdGhuYW1lID0gXCIvd3NcIjtcbiAgaWYgKHBhcnNlZFVSTC5wYXRobmFtZSAmJiAhcGFyc2VkVVJMLmZyb21DdXJyZW50U2NyaXB0KSB7XG4gICAgc29ja2V0VVJMUGF0aG5hbWUgPSBwYXJzZWRVUkwucGF0aG5hbWU7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFVSTCh7XG4gICAgcHJvdG9jb2w6IHNvY2tldFVSTFByb3RvY29sLFxuICAgIGF1dGg6IHNvY2tldFVSTEF1dGgsXG4gICAgaG9zdG5hbWU6IHNvY2tldFVSTEhvc3RuYW1lLFxuICAgIHBvcnQ6IHNvY2tldFVSTFBvcnQsXG4gICAgcGF0aG5hbWU6IHNvY2tldFVSTFBhdGhuYW1lLFxuICAgIHNsYXNoZXM6IHRydWVcbiAgfSk7XG59O1xudmFyIHNvY2tldFVSTCA9IGNyZWF0ZVNvY2tldFVSTChwYXJzZWRSZXNvdXJjZVF1ZXJ5KTtcbnNvY2tldChzb2NrZXRVUkwsIG9uU29ja2V0TWVzc2FnZSwgb3B0aW9ucy5yZWNvbm5lY3QpO1xuZXhwb3J0IHsgZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSwgcGFyc2VVUkwsIGNyZWF0ZVNvY2tldFVSTCB9OyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci90YXBhYmxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci90YXBhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFN5bmNCYWlsSG9vazogZnVuY3Rpb24oKSB7IHJldHVybiAvKiBiaW5kaW5nICovIFN5bmNCYWlsSG9vazsgfVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG5mdW5jdGlvbiBTeW5jQmFpbEhvb2soKSB7XG4gIHJldHVybiB7XG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbCgpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkocikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXkocikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7XG4gIGlmIChyKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTtcbiAgICB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpO1xuICAgIHJldHVybiBcIk9iamVjdFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSB0IHx8IFwiU2V0XCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogXCJBcmd1bWVudHNcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KHIpIHtcbiAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICYmIG51bGwgIT0gclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gfHwgbnVsbCAhPSByW1wiQEBpdGVyYXRvclwiXSkgcmV0dXJuIEFycmF5LmZyb20ocik7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIpO1xufVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkge1xuICAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7XG4gIGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdO1xuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7XG4gIGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkge1xuICByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlO1xufVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gdHlwZW9mIGkgPyBpIDogaSArIFwiXCI7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7XG59XG52YXIgTG9nVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICBlcnJvcjogKC8qKiBAdHlwZSB7XCJlcnJvclwifSAqL1wiZXJyb3JcIiksXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIHdhcm46ICgvKiogQHR5cGUge1wid2FyblwifSAqL1wid2FyblwiKSxcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgaW5mbzogKC8qKiBAdHlwZSB7XCJpbmZvXCJ9ICovXCJpbmZvXCIpLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBsb2c6ICgvKiogQHR5cGUge1wibG9nXCJ9ICovXCJsb2dcIiksXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIGRlYnVnOiAoLyoqIEB0eXBlIHtcImRlYnVnXCJ9ICovXCJkZWJ1Z1wiKSxcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcblxuICB0cmFjZTogKC8qKiBAdHlwZSB7XCJ0cmFjZVwifSAqL1widHJhY2VcIiksXG4gIC8vIG5vIGFyZ3VtZW50c1xuXG4gIGdyb3VwOiAoLyoqIEB0eXBlIHtcImdyb3VwXCJ9ICovXCJncm91cFwiKSxcbiAgLy8gW2xhYmVsXVxuICBncm91cENvbGxhcHNlZDogKC8qKiBAdHlwZSB7XCJncm91cENvbGxhcHNlZFwifSAqL1wiZ3JvdXBDb2xsYXBzZWRcIiksXG4gIC8vIFtsYWJlbF1cbiAgZ3JvdXBFbmQ6ICgvKiogQHR5cGUge1wiZ3JvdXBFbmRcIn0gKi9cImdyb3VwRW5kXCIpLFxuICAvLyBbbGFiZWxdXG5cbiAgcHJvZmlsZTogKC8qKiBAdHlwZSB7XCJwcm9maWxlXCJ9ICovXCJwcm9maWxlXCIpLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHByb2ZpbGVFbmQ6ICgvKiogQHR5cGUge1wicHJvZmlsZUVuZFwifSAqL1wicHJvZmlsZUVuZFwiKSxcbiAgLy8gW3Byb2ZpbGVOYW1lXVxuXG4gIHRpbWU6ICgvKiogQHR5cGUge1widGltZVwifSAqL1widGltZVwiKSxcbiAgLy8gbmFtZSwgdGltZSBhcyBbc2Vjb25kcywgbmFub3NlY29uZHNdXG5cbiAgY2xlYXI6ICgvKiogQHR5cGUge1wiY2xlYXJcIn0gKi9cImNsZWFyXCIpLFxuICAvLyBubyBhcmd1bWVudHNcbiAgc3RhdHVzOiAoLyoqIEB0eXBlIHtcInN0YXR1c1wifSAqL1wic3RhdHVzXCIpIC8vIG1lc3NhZ2UsIGFyZ3VtZW50c1xufSk7XG5tb2R1bGUuZXhwb3J0cy5Mb2dUeXBlID0gTG9nVHlwZTtcblxuLyoqIEB0eXBlZGVmIHt0eXBlb2YgTG9nVHlwZVtrZXlvZiB0eXBlb2YgTG9nVHlwZV19IExvZ1R5cGVFbnVtICovXG5cbnZhciBMT0dfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciByYXcgbG9nIG1ldGhvZFwiKTtcbnZhciBUSU1FUlNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciB0aW1lc1wiKTtcbnZhciBUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIGFnZ3JlZ2F0ZWQgdGltZXNcIik7XG52YXIgV2VicGFja0xvZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKExvZ1R5cGVFbnVtLCBFWFBFQ1RFRF9BTllbXT0pOiB2b2lkfSBsb2cgbG9nIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nIHwgZnVuY3Rpb24oKTogc3RyaW5nKTogV2VicGFja0xvZ2dlcn0gZ2V0Q2hpbGRMb2dnZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGNoaWxkIGxvZ2dlclxuICAgKi9cbiAgZnVuY3Rpb24gV2VicGFja0xvZ2dlcihsb2csIGdldENoaWxkTG9nZ2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYnBhY2tMb2dnZXIpO1xuICAgIHRoaXNbTE9HX1NZTUJPTF0gPSBsb2c7XG4gICAgdGhpcy5nZXRDaGlsZExvZ2dlciA9IGdldENoaWxkTG9nZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Li4uRVhQRUNURURfQU5ZfSBhcmdzIGFyZ3NcbiAgICovXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoV2VicGFja0xvZ2dlciwgW3tcbiAgICBrZXk6IFwiZXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcIndhcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2FybigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUud2FybiwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mbygpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuaW5mbywgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2coKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmxvZywgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImRlYnVnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5kZWJ1ZywgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFWFBFQ1RFRF9BTll9IGFzc2VydGlvbiBhc3NlcnRpb25cbiAgICAgKiBAcGFyYW0gey4uLkVYUEVDVEVEX0FOWX0gYXJncyBhcmdzXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwiYXNzZXJ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2VydChhc3NlcnRpb24pIHtcbiAgICAgIGlmICghYXNzZXJ0aW9uKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiA+IDEgPyBfbGVuNiAtIDEgOiAwKSwgX2tleTYgPSAxOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NiAtIDFdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjZSgpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50cmFjZSwgW1wiVHJhY2VcIl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5jbGVhcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0dXMoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICAgICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICAgICAgfVxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnN0YXR1cywgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdyb3VwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsuLi5FWFBFQ1RFRF9BTll9IGFyZ3MgYXJnc1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcImdyb3VwQ29sbGFwc2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwQ29sbGFwc2VkKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW45KSwgX2tleTkgPSAwOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgICAgIH1cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cENvbGxhcHNlZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwRW5kKCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwRW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIGxhYmVsXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZSwgW2xhYmVsXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYWJlbCBsYWJlbFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInByb2ZpbGVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZUVuZChsYWJlbCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGVFbmQsIFtsYWJlbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCBsYWJlbFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiBcInRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShsYWJlbCkge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBbbnVtYmVyLCBudW1iZXJdPn0gKi9cbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uc2V0KGxhYmVsLCBwcm9jZXNzLmhydGltZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIGxhYmVsXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lTG9nKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWwgJ1wiLmNvbmNhdChsYWJlbCwgXCInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVMb2coKVwiKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFiZWwgbGFiZWxcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUVuZCgpXCIpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcgfCB1bmRlZmluZWQsIFtudW1iZXIsIG51bWJlcl0+fSAqL1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFiZWwgbGFiZWxcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGUobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUFnZ3JlZ2F0ZSgpXCIpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcgfCB1bmRlZmluZWQsIFtudW1iZXIsIG51bWJlcl0+fSAqL1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nIHwgdW5kZWZpbmVkLCBbbnVtYmVyLCBudW1iZXJdPn0gKi9cbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGltZVsxXSArIGN1cnJlbnRbMV0gPiAxZTkpIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF0gKyAxO1xuICAgICAgICAgIHRpbWVbMV0gPSB0aW1lWzFdIC0gMWU5ICsgY3VycmVudFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF07XG4gICAgICAgICAgdGltZVsxXSArPSBjdXJyZW50WzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uc2V0KGxhYmVsLCB0aW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIGxhYmVsXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlRW5kKGxhYmVsKSB7XG4gICAgICBpZiAodGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHZhciB0aW1lID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcbn0oKTtcbm1vZHVsZS5leHBvcnRzLkxvZ2dlciA9IFdlYnBhY2tMb2dnZXI7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9jcmVhdGVDb25zb2xlTG9nZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG5cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBsKSB7XG4gIHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICYmIHJbKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdC5yZXR1cm4gJiYgKHUgPSB0LnJldHVybigpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMocikgfHwgX2l0ZXJhYmxlVG9BcnJheShyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkocikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHtcbiAgaWYgKHIpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpO1xuICAgIHZhciB0ID0ge30udG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LCAtMSk7XG4gICAgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkocikge1xuICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgJiYgbnVsbCAhPSByWyh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLml0ZXJhdG9yXSB8fCBudWxsICE9IHJbXCJAQGl0ZXJhdG9yXCJdKSByZXR1cm4gQXJyYXkuZnJvbShyKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkocik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7XG4gIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07XG4gIHJldHVybiBuO1xufVxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgTG9nVHlwZSA9IF9yZXF1aXJlLkxvZ1R5cGU7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zXCIpLkZpbHRlckl0ZW1UeXBlc30gRmlsdGVySXRlbVR5cGVzICovXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uLy4uL2RlY2xhcmF0aW9ucy9XZWJwYWNrT3B0aW9uc1wiKS5GaWx0ZXJUeXBlc30gRmlsdGVyVHlwZXMgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nLCBMb2dUeXBlRW51bSwgRVhQRUNURURfQU5ZW109KTogdm9pZH0gTG9nZ2luZ0Z1bmN0aW9uICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gTG9nZ2VyQ29uc29sZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSBjbGVhclxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSB0cmFjZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogRVhQRUNURURfQU5ZW10pID0+IHZvaWR9IGluZm9cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkfSBsb2dcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkfSB3YXJuXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZH0gZXJyb3JcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gZGVidWdcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gZ3JvdXBcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gZ3JvdXBDb2xsYXBzZWRcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gZ3JvdXBFbmRcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gc3RhdHVzXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBFWFBFQ1RFRF9BTllbXSkgPT4gdm9pZD19IHByb2ZpbGVcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IEVYUEVDVEVEX0FOWVtdKSA9PiB2b2lkPX0gcHJvZmlsZUVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogRVhQRUNURURfQU5ZW10pID0+IHZvaWQ9fSBsb2dUaW1lXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBMb2dnZXJPcHRpb25zXG4gKiBAcHJvcGVydHkge2ZhbHNlfHRydWV8XCJub25lXCJ8XCJlcnJvclwifFwid2FyblwifFwiaW5mb1wifFwibG9nXCJ8XCJ2ZXJib3NlXCJ9IGxldmVsIGxvZ2xldmVsXG4gKiBAcHJvcGVydHkge0ZpbHRlclR5cGVzfGJvb2xlYW59IGRlYnVnIGZpbHRlciBmb3IgZGVidWcgbG9nZ2luZ1xuICogQHByb3BlcnR5IHtMb2dnZXJDb25zb2xlfSBjb25zb2xlIHRoZSBjb25zb2xlIHRvIGxvZyB0b1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtGaWx0ZXJJdGVtVHlwZXN9IGl0ZW0gYW4gaW5wdXQgaXRlbVxuICogQHJldHVybnMge0ZpbHRlckZ1bmN0aW9uIHwgdW5kZWZpbmVkfSBmaWx0ZXIgZnVuY3Rpb25cbiAqL1xudmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFwvXVwiLmNvbmNhdChpdGVtLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uXFxcXF4kfF0vZywgXCJcXFxcJCZcIiksIFwiKFtcXFxcXFxcXC9dfCR8IXxcXFxcPylcIikpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoaWRlbnQpIHtcbiAgICAgIHJldHVybiByZWdFeHAudGVzdChpZGVudCk7XG4gICAgfTtcbiAgfVxuICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG5cbi8qKlxuICogQHBhcmFtIHtMb2dnZXJPcHRpb25zfSBvcHRpb25zIG9wdGlvbnMgb2JqZWN0XG4gKiBAcmV0dXJucyB7TG9nZ2luZ0Z1bmN0aW9ufSBsb2dnaW5nIGZ1bmN0aW9uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgIGxldmVsID0gX3JlZiRsZXZlbCA9PT0gdm9pZCAwID8gXCJpbmZvXCIgOiBfcmVmJGxldmVsLFxuICAgIF9yZWYkZGVidWcgPSBfcmVmLmRlYnVnLFxuICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgIGNvbnNvbGUgPSBfcmVmLmNvbnNvbGU7XG4gIHZhciBkZWJ1Z0ZpbHRlcnMgPSAvKiogQHR5cGUge0ZpbHRlckZ1bmN0aW9uW119ICovXG5cbiAgdHlwZW9mIGRlYnVnID09PSBcImJvb2xlYW5cIiA/IFtmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlYnVnO1xuICB9XSA6IC8qKiBAdHlwZSB7RmlsdGVySXRlbVR5cGVzW119ICovW10uY29uY2F0KGRlYnVnKS5tYXAoZmlsdGVyVG9GdW5jdGlvbik7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB2YXIgbG9nbGV2ZWwgPSBMb2dMZXZlbFtcIlwiLmNvbmNhdChsZXZlbCldIHx8IDA7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlclxuICAgKiBAcGFyYW0ge0xvZ1R5cGVFbnVtfSB0eXBlIHR5cGUgb2YgdGhlIGxvZyBlbnRyeVxuICAgKiBAcGFyYW0ge0VYUEVDVEVEX0FOWVtdPX0gYXJncyBhcmd1bWVudHMgb2YgdGhlIGxvZyBlbnRyeVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgdmFyIGRlYnVnID0gZGVidWdGaWx0ZXJzLnNvbWUoZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBmKG5hbWUpO1xuICAgIH0pO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5kZWJ1ZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1Zy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUubG9nOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLmluZm86XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5pbmZvKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nVHlwZS53YXJuOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwud2FybikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLnRyYWNlOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuZ3JvdXBDb2xsYXBzZWQ6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS5ncm91cC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUuZ3JvdXBFbmQ6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwRW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUudGltZTpcbiAgICAgICAge1xuICAgICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjtcbiAgICAgICAgICB2YXIgX2FyZ3MgPSBfc2xpY2VkVG9BcnJheSgvKiogQHR5cGUge1tzdHJpbmcsIG51bWJlciwgbnVtYmVyXX0gKi9cbiAgICAgICAgICAgIGFyZ3MsIDMpLFxuICAgICAgICAgICAgbGFiZWwgPSBfYXJnc1swXSxcbiAgICAgICAgICAgIHN0YXJ0ID0gX2FyZ3NbMV0sXG4gICAgICAgICAgICBlbmQgPSBfYXJnc1syXTtcbiAgICAgICAgICB2YXIgbXMgPSBzdGFydCAqIDEwMDAgKyBlbmQgLyAxMDAwMDAwO1xuICAgICAgICAgIHZhciBtc2cgPSBcIltcIi5jb25jYXQobmFtZSwgXCJdIFwiKS5jb25jYXQobGFiZWwsIFwiOiBcIikuY29uY2F0KG1zLCBcIiBtc1wiKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUubG9nVGltZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZ1RpbWUobXNnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOlxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUucHJvZmlsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIExvZ1R5cGUucHJvZmlsZUVuZDpcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnNvbGUucHJvZmlsZUVuZC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLmNsZWFyOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dUeXBlLnN0YXR1czpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnN0YXR1cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLnN0YXR1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLnN0YXR1cy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhcmdzICYmIGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIExvZ1R5cGUgXCIuY29uY2F0KHR5cGUpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICByZXR1cm4gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAobikge1xuICAgIGZvciAodmFyIGUgPSAxOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7XG4gICAgICB2YXIgdCA9IGFyZ3VtZW50c1tlXTtcbiAgICAgIGZvciAodmFyIHIgaW4gdCkgKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIHIpICYmIChuW3JdID0gdFtyXSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9LCBfZXh0ZW5kcy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZSAqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci90YXBhYmxlLmpzXCIpLFxuICBTeW5jQmFpbEhvb2sgPSBfcmVxdWlyZS5TeW5jQmFpbEhvb2s7XG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgTG9nZ2VyID0gX3JlcXVpcmUyLkxvZ2dlcjtcbnZhciBjcmVhdGVDb25zb2xlTG9nZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jcmVhdGVDb25zb2xlTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9jcmVhdGVDb25zb2xlTG9nZ2VyLmpzXCIpO1xuXG4vKiogQHR5cGUge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gKi9cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlclxuICogQHJldHVybnMge0xvZ2dlcn0gYSBsb2dnZXJcbiAqL1xubW9kdWxlLmV4cG9ydHMuZ2V0TG9nZ2VyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBMb2dnZXIoZnVuY3Rpb24gKHR5cGUsIGFyZ3MpIHtcbiAgICBpZiAobW9kdWxlLmV4cG9ydHMuaG9va3MubG9nLmNhbGwobmFtZSwgdHlwZSwgYXJncykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudERlZmF1bHRMb2dnZXIobmFtZSwgdHlwZSwgYXJncyk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XG4gICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtjcmVhdGVDb25zb2xlTG9nZ2VyLkxvZ2dlck9wdGlvbnN9IG9wdGlvbnMgbmV3IG9wdGlvbnMsIG1lcmdlIHdpdGggb2xkIG9wdGlvbnNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5tb2R1bGUuZXhwb3J0cy5jb25maWd1cmVEZWZhdWx0TG9nZ2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgX2V4dGVuZHMoY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zLCBvcHRpb25zKTtcbiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG59O1xubW9kdWxlLmV4cG9ydHMuaG9va3MgPSB7XG4gIGxvZzogbmV3IFN5bmNCYWlsSG9vayhbXCJvcmlnaW5cIiwgXCJ0eXBlXCIsIFwiYXJnc1wiXSlcbn07XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIFx0fSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH1cbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkcyB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkcyB0byBiZSBpc29sYXRlZCBhZ2FpbnN0IG90aGVyIG1vZHVsZXMgaW4gdGhlIGNodW5rLlxuIWZ1bmN0aW9uKCkge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIHJlZXhwb3J0IGRlZmF1bHQgZXhwb3J0IGZyb20gbmFtZWQgbW9kdWxlICovIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fOyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciB3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHdlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qc1wiKTtcblxufSgpO1xudmFyIF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18gPSBleHBvcnRzO1xuZm9yKHZhciBfX3dlYnBhY2tfaV9fIGluIF9fd2VicGFja19leHBvcnRzX18pIF9fd2VicGFja19leHBvcnRfdGFyZ2V0X19bX193ZWJwYWNrX2lfX10gPSBfX3dlYnBhY2tfZXhwb3J0c19fW19fd2VicGFja19pX19dO1xuaWYoX193ZWJwYWNrX2V4cG9ydHNfXy5fX2VzTW9kdWxlKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyB9KSgpXG47IiwiZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkgeyByZXR1cm4gKHIgPSBfdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7IHZhbHVlOiB0LCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVtyXSA9IHQsIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IGkgKyBcIlwiOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgaSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG4vLyBUaGUgZXJyb3Igb3ZlcmxheSBpcyBpbnNwaXJlZCAoYW5kIG1vc3RseSBjb3BpZWQpIGZyb20gQ3JlYXRlIFJlYWN0IEFwcCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHApXG4vLyBUaGV5LCBpbiB0dXJuLCBnb3QgaW5zcGlyZWQgYnkgd2VicGFjay1ob3QtbWlkZGxld2FyZSAoaHR0cHM6Ly9naXRodWIuY29tL2dsZW5qYW1pbi93ZWJwYWNrLWhvdC1taWRkbGV3YXJlKS5cblxuaW1wb3J0IGFuc2lIVE1MIGZyb20gXCJhbnNpLWh0bWwtY29tbXVuaXR5XCI7XG5cbi8qKlxuICogQHR5cGUgeyhpbnB1dDogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyKSA9PiBzdHJpbmd9XG4gKi9cbnZhciBnZXRDb2RlUG9pbnQgPSBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ID8gZnVuY3Rpb24gKGlucHV0LCBwb3NpdGlvbikge1xuICByZXR1cm4gaW5wdXQuY29kZVBvaW50QXQocG9zaXRpb24pO1xufSA6IGZ1bmN0aW9uIChpbnB1dCwgcG9zaXRpb24pIHtcbiAgcmV0dXJuIChpbnB1dC5jaGFyQ29kZUF0KHBvc2l0aW9uKSAtIDB4ZDgwMCkgKiAweDQwMCArIGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSAtIDB4ZGMwMCArIDB4MTAwMDA7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYWNyb1RleHRcbiAqIEBwYXJhbSB7UmVnRXhwfSBtYWNyb1JlZ0V4cFxuICogQHBhcmFtIHsoaW5wdXQ6IHN0cmluZykgPT4gc3RyaW5nfSBtYWNyb1JlcGxhY2VyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgcmVwbGFjZVVzaW5nUmVnRXhwID0gZnVuY3Rpb24gcmVwbGFjZVVzaW5nUmVnRXhwKG1hY3JvVGV4dCwgbWFjcm9SZWdFeHAsIG1hY3JvUmVwbGFjZXIpIHtcbiAgbWFjcm9SZWdFeHAubGFzdEluZGV4ID0gMDtcbiAgdmFyIHJlcGxhY2VNYXRjaCA9IG1hY3JvUmVnRXhwLmV4ZWMobWFjcm9UZXh0KTtcbiAgdmFyIHJlcGxhY2VSZXN1bHQ7XG4gIGlmIChyZXBsYWNlTWF0Y2gpIHtcbiAgICByZXBsYWNlUmVzdWx0ID0gXCJcIjtcbiAgICB2YXIgcmVwbGFjZUxhc3RJbmRleCA9IDA7XG4gICAgZG8ge1xuICAgICAgaWYgKHJlcGxhY2VMYXN0SW5kZXggIT09IHJlcGxhY2VNYXRjaC5pbmRleCkge1xuICAgICAgICByZXBsYWNlUmVzdWx0ICs9IG1hY3JvVGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleCwgcmVwbGFjZU1hdGNoLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXBsYWNlSW5wdXQgPSByZXBsYWNlTWF0Y2hbMF07XG4gICAgICByZXBsYWNlUmVzdWx0ICs9IG1hY3JvUmVwbGFjZXIocmVwbGFjZUlucHV0KTtcbiAgICAgIHJlcGxhY2VMYXN0SW5kZXggPSByZXBsYWNlTWF0Y2guaW5kZXggKyByZXBsYWNlSW5wdXQubGVuZ3RoO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbmQtYXNzaWduXG4gICAgfSB3aGlsZSAocmVwbGFjZU1hdGNoID0gbWFjcm9SZWdFeHAuZXhlYyhtYWNyb1RleHQpKTtcbiAgICBpZiAocmVwbGFjZUxhc3RJbmRleCAhPT0gbWFjcm9UZXh0Lmxlbmd0aCkge1xuICAgICAgcmVwbGFjZVJlc3VsdCArPSBtYWNyb1RleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXBsYWNlUmVzdWx0ID0gbWFjcm9UZXh0O1xuICB9XG4gIHJldHVybiByZXBsYWNlUmVzdWx0O1xufTtcbnZhciByZWZlcmVuY2VzID0ge1xuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiPlwiOiBcIiZndDtcIixcbiAgJ1wiJzogXCImcXVvdDtcIixcbiAgXCInXCI6IFwiJmFwb3M7XCIsXG4gIFwiJlwiOiBcIiZhbXA7XCJcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgdGV4dFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHRleHQpIHtcbiAgaWYgKCF0ZXh0KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2VVc2luZ1JlZ0V4cCh0ZXh0LCAvWzw+J1wiJl0vZywgZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlZmVyZW5jZXNbaW5wdXRdO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICB2YXIgY29kZSA9IGlucHV0Lmxlbmd0aCA+IDEgPyBnZXRDb2RlUG9pbnQoaW5wdXQsIDApIDogaW5wdXQuY2hhckNvZGVBdCgwKTtcbiAgICAgIHJlc3VsdCA9IFwiJiNcIi5jb25jYXQoY29kZSwgXCI7XCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0ZURlZmluaXRpb25zXG4gKiBAcHJvcGVydHkge3tbZXZlbnQ6IHN0cmluZ106IHsgdGFyZ2V0OiBzdHJpbmc7IGFjdGlvbnM/OiBBcnJheTxzdHJpbmc+IH19fSBbb25dXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge3tbc3RhdGU6IHN0cmluZ106IFN0YXRlRGVmaW5pdGlvbnN9fSBzdGF0ZXNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0O1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGluaXRpYWxcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEltcGxlbWVudGF0aW9uXG4gKiBAcHJvcGVydHkge3tbYWN0aW9uTmFtZTogc3RyaW5nXTogKGN0eDogb2JqZWN0LCBldmVudDogYW55KSA9PiBvYmplY3R9fSBhY3Rpb25zXG4gKi9cblxuLyoqXG4gKiBBIHNpbXBsaWZpZWQgYGNyZWF0ZU1hY2hpbmVgIGZyb20gYEB4c3RhdGUvZnNtYCB3aXRoIHRoZSBmb2xsb3dpbmcgZGlmZmVyZW5jZXM6XG4gKlxuICogIC0gdGhlIHJldHVybmVkIG1hY2hpbmUgaXMgdGVjaG5pY2FsbHkgYSBcInNlcnZpY2VcIi4gTm8gYGludGVycHJldChtYWNoaW5lKS5zdGFydCgpYCBpcyBuZWVkZWQuXG4gKiAgLSB0aGUgc3RhdGUgZGVmaW5pdGlvbiBvbmx5IHN1cHBvcnQgYG9uYCBhbmQgdGFyZ2V0IG11c3QgYmUgZGVjbGFyZWQgd2l0aCB7IHRhcmdldDogJ25leHRTdGF0ZScsIGFjdGlvbnM6IFtdIH0gZXhwbGljaXRseS5cbiAqICAtIGV2ZW50IHBhc3NlZCB0byBgc2VuZGAgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBgdHlwZWAgcHJvcGVydHkuXG4gKiAgLSBhY3Rpb25zIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgW2Fzc2lnbiBhY3Rpb25dKGh0dHBzOi8veHN0YXRlLmpzLm9yZy9kb2NzL2d1aWRlcy9jb250ZXh0Lmh0bWwjYXNzaWduLWFjdGlvbikgaWYgeW91IHJldHVybiBhbnkgdmFsdWUuXG4gKiAgRG8gbm90IHJldHVybiBhbnl0aGluZyBpZiB5b3UganVzdCB3YW50IHRvIGludm9rZSBzaWRlIGVmZmVjdC5cbiAqXG4gKiBUaGUgZ29hbCBvZiB0aGlzIGN1c3RvbSBmdW5jdGlvbiBpcyB0byBhdm9pZCBpbnN0YWxsaW5nIHRoZSBlbnRpcmUgYCd4c3RhdGUvZnNtJ2AgcGFja2FnZSwgd2hpbGUgZW5hYmxpbmcgbW9kZWxpbmcgdXNpbmdcbiAqIHN0YXRlIG1hY2hpbmUuIFlvdSBjYW4gY29weSB0aGUgZmlyc3QgcGFyYW1ldGVyIGludG8gdGhlIGVkaXRvciBhdCBodHRwczovL3N0YXRlbHkuYWkvdml6IHRvIHZpc3VhbGl6ZSB0aGUgc3RhdGUgbWFjaGluZS5cbiAqXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7SW1wbGVtZW50YXRpb259IGltcGxlbWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1hY2hpbmUoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgaW5pdGlhbCA9IF9yZWYuaW5pdGlhbDtcbiAgdmFyIGFjdGlvbnMgPSBfcmVmMi5hY3Rpb25zO1xuICB2YXIgY3VycmVudFN0YXRlID0gaW5pdGlhbDtcbiAgdmFyIGN1cnJlbnRDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIHtcbiAgICBzZW5kOiBmdW5jdGlvbiBzZW5kKGV2ZW50KSB7XG4gICAgICB2YXIgY3VycmVudFN0YXRlT24gPSBzdGF0ZXNbY3VycmVudFN0YXRlXS5vbjtcbiAgICAgIHZhciB0cmFuc2l0aW9uQ29uZmlnID0gY3VycmVudFN0YXRlT24gJiYgY3VycmVudFN0YXRlT25bZXZlbnQudHlwZV07XG4gICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZykge1xuICAgICAgICBjdXJyZW50U3RhdGUgPSB0cmFuc2l0aW9uQ29uZmlnLnRhcmdldDtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25Db25maWcuYWN0aW9ucykge1xuICAgICAgICAgIHRyYW5zaXRpb25Db25maWcuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3ROYW1lKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uSW1wbCA9IGFjdGlvbnNbYWN0TmFtZV07XG4gICAgICAgICAgICB2YXIgbmV4dENvbnRleHRWYWx1ZSA9IGFjdGlvbkltcGwgJiYgYWN0aW9uSW1wbChjdXJyZW50Q29udGV4dCwgZXZlbnQpO1xuICAgICAgICAgICAgaWYgKG5leHRDb250ZXh0VmFsdWUpIHtcbiAgICAgICAgICAgICAgY3VycmVudENvbnRleHQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRDb250ZXh0KSwgbmV4dENvbnRleHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2hvd092ZXJsYXlEYXRhXG4gKiBAcHJvcGVydHkgeyd3YXJuaW5nJyB8ICdlcnJvcid9IGxldmVsXG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZyAgfCB7IG1vZHVsZUlkZW50aWZpZXI/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZyB9Pn0gbWVzc2FnZXNcbiAqIEBwcm9wZXJ0eSB7J2J1aWxkJyB8ICdydW50aW1lJ30gbWVzc2FnZVNvdXJjZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zXG4gKiBAcHJvcGVydHkgeyhkYXRhOiBTaG93T3ZlcmxheURhdGEpID0+IHZvaWR9IHNob3dPdmVybGF5XG4gKiBAcHJvcGVydHkgeygpID0+IHZvaWR9IGhpZGVPdmVybGF5XG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlNYWNoaW5lT3B0aW9uc30gb3B0aW9uc1xuICovXG52YXIgY3JlYXRlT3ZlcmxheU1hY2hpbmUgPSBmdW5jdGlvbiBjcmVhdGVPdmVybGF5TWFjaGluZShvcHRpb25zKSB7XG4gIHZhciBoaWRlT3ZlcmxheSA9IG9wdGlvbnMuaGlkZU92ZXJsYXksXG4gICAgc2hvd092ZXJsYXkgPSBvcHRpb25zLnNob3dPdmVybGF5O1xuICByZXR1cm4gY3JlYXRlTWFjaGluZSh7XG4gICAgaW5pdGlhbDogXCJoaWRkZW5cIixcbiAgICBjb250ZXh0OiB7XG4gICAgICBsZXZlbDogXCJlcnJvclwiLFxuICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgbWVzc2FnZVNvdXJjZTogXCJidWlsZFwiXG4gICAgfSxcbiAgICBzdGF0ZXM6IHtcbiAgICAgIGhpZGRlbjoge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIEJVSUxEX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheUJ1aWxkRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcInNldE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJVTlRJTUVfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5UnVudGltZUVycm9yXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJzZXRNZXNzYWdlc1wiLCBcInNob3dPdmVybGF5XCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGlzcGxheUJ1aWxkRXJyb3I6IHtcbiAgICAgICAgb246IHtcbiAgICAgICAgICBESVNNSVNTOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJkaXNtaXNzTWVzc2FnZXNcIiwgXCJoaWRlT3ZlcmxheVwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgQlVJTERfRVJST1I6IHtcbiAgICAgICAgICAgIHRhcmdldDogXCJkaXNwbGF5QnVpbGRFcnJvclwiLFxuICAgICAgICAgICAgYWN0aW9uczogW1wiYXBwZW5kTWVzc2FnZXNcIiwgXCJzaG93T3ZlcmxheVwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc3BsYXlSdW50aW1lRXJyb3I6IHtcbiAgICAgICAgb246IHtcbiAgICAgICAgICBESVNNSVNTOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgICBhY3Rpb25zOiBbXCJkaXNtaXNzTWVzc2FnZXNcIiwgXCJoaWRlT3ZlcmxheVwiXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgUlVOVElNRV9FUlJPUjoge1xuICAgICAgICAgICAgdGFyZ2V0OiBcImRpc3BsYXlSdW50aW1lRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcImFwcGVuZE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9LFxuICAgICAgICAgIEJVSUxEX0VSUk9SOiB7XG4gICAgICAgICAgICB0YXJnZXQ6IFwiZGlzcGxheUJ1aWxkRXJyb3JcIixcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcInNldE1lc3NhZ2VzXCIsIFwic2hvd092ZXJsYXlcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBhY3Rpb25zOiB7XG4gICAgICBkaXNtaXNzTWVzc2FnZXM6IGZ1bmN0aW9uIGRpc21pc3NNZXNzYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgbGV2ZWw6IFwiZXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlU291cmNlOiBcImJ1aWxkXCJcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBhcHBlbmRNZXNzYWdlczogZnVuY3Rpb24gYXBwZW5kTWVzc2FnZXMoY29udGV4dCwgZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZXNzYWdlczogY29udGV4dC5tZXNzYWdlcy5jb25jYXQoZXZlbnQubWVzc2FnZXMpLFxuICAgICAgICAgIGxldmVsOiBldmVudC5sZXZlbCB8fCBjb250ZXh0LmxldmVsLFxuICAgICAgICAgIG1lc3NhZ2VTb3VyY2U6IGV2ZW50LnR5cGUgPT09IFwiUlVOVElNRV9FUlJPUlwiID8gXCJydW50aW1lXCIgOiBcImJ1aWxkXCJcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBzZXRNZXNzYWdlczogZnVuY3Rpb24gc2V0TWVzc2FnZXMoY29udGV4dCwgZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZXNzYWdlczogZXZlbnQubWVzc2FnZXMsXG4gICAgICAgICAgbGV2ZWw6IGV2ZW50LmxldmVsIHx8IGNvbnRleHQubGV2ZWwsXG4gICAgICAgICAgbWVzc2FnZVNvdXJjZTogZXZlbnQudHlwZSA9PT0gXCJSVU5USU1FX0VSUk9SXCIgPyBcInJ1bnRpbWVcIiA6IFwiYnVpbGRcIlxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGhpZGVPdmVybGF5OiBoaWRlT3ZlcmxheSxcbiAgICAgIHNob3dPdmVybGF5OiBzaG93T3ZlcmxheVxuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICovXG52YXIgcGFyc2VFcnJvclRvU3RhY2tzID0gZnVuY3Rpb24gcGFyc2VFcnJvclRvU3RhY2tzKGVycm9yKSB7XG4gIGlmICghZXJyb3IgfHwgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlRXJyb3JUb1N0YWNrcyBleHBlY3RzIEVycm9yIG9iamVjdFwiKTtcbiAgfVxuICBpZiAodHlwZW9mIGVycm9yLnN0YWNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGVycm9yLnN0YWNrLnNwbGl0KFwiXFxuXCIpLmZpbHRlcihmdW5jdGlvbiAoc3RhY2spIHtcbiAgICAgIHJldHVybiBzdGFjayAhPT0gXCJFcnJvcjogXCIuY29uY2F0KGVycm9yLm1lc3NhZ2UpO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBFcnJvckNhbGxiYWNrXG4gKiBAcGFyYW0ge0Vycm9yRXZlbnR9IGVycm9yXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3JDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xudmFyIGxpc3RlblRvUnVudGltZUVycm9yID0gZnVuY3Rpb24gbGlzdGVuVG9SdW50aW1lRXJyb3IoY2FsbGJhY2spIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgY2FsbGJhY2spO1xuICB9O1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgVW5oYW5kbGVkUmVqZWN0aW9uQ2FsbGJhY2tcbiAqIEBwYXJhbSB7UHJvbWlzZVJlamVjdGlvbkV2ZW50fSByZWplY3Rpb25FdmVudFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1VuaGFuZGxlZFJlamVjdGlvbkNhbGxiYWNrfSBjYWxsYmFja1xuICovXG52YXIgbGlzdGVuVG9VbmhhbmRsZWRSZWplY3Rpb24gPSBmdW5jdGlvbiBsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbihjYWxsYmFjaykge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInVuaGFuZGxlZHJlamVjdGlvblwiLCBjYWxsYmFjayk7XG4gIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidW5oYW5kbGVkcmVqZWN0aW9uXCIsIGNhbGxiYWNrKTtcbiAgfTtcbn07XG5cbi8vIFN0eWxlcyBhcmUgaW5zcGlyZWQgYnkgYHJlYWN0LWVycm9yLW92ZXJsYXlgXG5cbnZhciBtc2dTdHlsZXMgPSB7XG4gIGVycm9yOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjA2LCAxNywgMzgsIDAuMSlcIixcbiAgICBjb2xvcjogXCIjZmNjZmNmXCJcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI1MSwgMjQ1LCAxODAsIDAuMSlcIixcbiAgICBjb2xvcjogXCIjZmJmNWI0XCJcbiAgfVxufTtcbnZhciBpZnJhbWVTdHlsZSA9IHtcbiAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogXCIxMDB2d1wiLFxuICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgYm9yZGVyOiBcIm5vbmVcIixcbiAgXCJ6LWluZGV4XCI6IDk5OTk5OTk5OTlcbn07XG52YXIgY29udGFpbmVyU3R5bGUgPSB7XG4gIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gIGxlZnQ6IDAsXG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgd2lkdGg6IFwiMTAwdndcIixcbiAgaGVpZ2h0OiBcIjEwMHZoXCIsXG4gIGZvbnRTaXplOiBcImxhcmdlXCIsXG4gIHBhZGRpbmc6IFwiMnJlbSAycmVtIDRyZW0gMnJlbVwiLFxuICBsaW5lSGVpZ2h0OiBcIjEuMlwiLFxuICB3aGl0ZVNwYWNlOiBcInByZS13cmFwXCIsXG4gIG92ZXJmbG93OiBcImF1dG9cIixcbiAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoMCwgMCwgMCwgMC45KVwiLFxuICBjb2xvcjogXCJ3aGl0ZVwiXG59O1xudmFyIGhlYWRlclN0eWxlID0ge1xuICBjb2xvcjogXCIjZTgzYjQ2XCIsXG4gIGZvbnRTaXplOiBcIjJlbVwiLFxuICB3aGl0ZVNwYWNlOiBcInByZS13cmFwXCIsXG4gIGZvbnRGYW1pbHk6IFwic2Fucy1zZXJpZlwiLFxuICBtYXJnaW46IFwiMCAycmVtIDJyZW0gMFwiLFxuICBmbGV4OiBcIjAgMCBhdXRvXCIsXG4gIG1heEhlaWdodDogXCI1MCVcIixcbiAgb3ZlcmZsb3c6IFwiYXV0b1wiXG59O1xudmFyIGRpc21pc3NCdXR0b25TdHlsZSA9IHtcbiAgY29sb3I6IFwiI2ZmZmZmZlwiLFxuICBsaW5lSGVpZ2h0OiBcIjFyZW1cIixcbiAgZm9udFNpemU6IFwiMS41cmVtXCIsXG4gIHBhZGRpbmc6IFwiMXJlbVwiLFxuICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICByaWdodDogMCxcbiAgdG9wOiAwLFxuICBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgYm9yZGVyOiBcIm5vbmVcIlxufTtcbnZhciBtc2dUeXBlU3R5bGUgPSB7XG4gIGNvbG9yOiBcIiNlODNiNDZcIixcbiAgZm9udFNpemU6IFwiMS4yZW1cIixcbiAgbWFyZ2luQm90dG9tOiBcIjFyZW1cIixcbiAgZm9udEZhbWlseTogXCJzYW5zLXNlcmlmXCJcbn07XG52YXIgbXNnVGV4dFN0eWxlID0ge1xuICBsaW5lSGVpZ2h0OiBcIjEuNVwiLFxuICBmb250U2l6ZTogXCIxcmVtXCIsXG4gIGZvbnRGYW1pbHk6IFwiTWVubG8sIENvbnNvbGFzLCBtb25vc3BhY2VcIlxufTtcblxuLy8gQU5TSSBIVE1MXG5cbnZhciBjb2xvcnMgPSB7XG4gIHJlc2V0OiBbXCJ0cmFuc3BhcmVudFwiLCBcInRyYW5zcGFyZW50XCJdLFxuICBibGFjazogXCIxODE4MThcIixcbiAgcmVkOiBcIkUzNjA0OVwiLFxuICBncmVlbjogXCJCM0NCNzRcIixcbiAgeWVsbG93OiBcIkZGRDA4MFwiLFxuICBibHVlOiBcIjdDQUZDMlwiLFxuICBtYWdlbnRhOiBcIjdGQUNDQVwiLFxuICBjeWFuOiBcIkMzQzJFRlwiLFxuICBsaWdodGdyZXk6IFwiRUJFN0UzXCIsXG4gIGRhcmtncmV5OiBcIjZENzg5MVwiXG59O1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nICB8IHsgZmlsZT86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nOyBzdGFjaz86IHN0cmluZ1tdIH19IGl0ZW1cbiAqIEByZXR1cm5zIHt7IGhlYWRlcjogc3RyaW5nLCBib2R5OiBzdHJpbmcgfX1cbiAqL1xudmFyIGZvcm1hdFByb2JsZW0gPSBmdW5jdGlvbiBmb3JtYXRQcm9ibGVtKHR5cGUsIGl0ZW0pIHtcbiAgdmFyIGhlYWRlciA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gXCJXQVJOSU5HXCIgOiBcIkVSUk9SXCI7XG4gIHZhciBib2R5ID0gXCJcIjtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgYm9keSArPSBpdGVtO1xuICB9IGVsc2Uge1xuICAgIHZhciBmaWxlID0gaXRlbS5maWxlIHx8IFwiXCI7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgdmFyIG1vZHVsZU5hbWUgPSBpdGVtLm1vZHVsZU5hbWUgPyBpdGVtLm1vZHVsZU5hbWUuaW5kZXhPZihcIiFcIikgIT09IC0xID8gXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLnJlcGxhY2UoL14oXFxzfFxcUykqIS8sIFwiXCIpLCBcIiAoXCIpLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUsIFwiKVwiKSA6IFwiXCIuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSkgOiBcIlwiO1xuICAgIHZhciBsb2MgPSBpdGVtLmxvYztcbiAgICBoZWFkZXIgKz0gXCJcIi5jb25jYXQobW9kdWxlTmFtZSB8fCBmaWxlID8gXCIgaW4gXCIuY29uY2F0KG1vZHVsZU5hbWUgPyBcIlwiLmNvbmNhdChtb2R1bGVOYW1lKS5jb25jYXQoZmlsZSA/IFwiIChcIi5jb25jYXQoZmlsZSwgXCIpXCIpIDogXCJcIikgOiBmaWxlKS5jb25jYXQobG9jID8gXCIgXCIuY29uY2F0KGxvYykgOiBcIlwiKSA6IFwiXCIpO1xuICAgIGJvZHkgKz0gaXRlbS5tZXNzYWdlIHx8IFwiXCI7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbS5zdGFjaykpIHtcbiAgICBpdGVtLnN0YWNrLmZvckVhY2goZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAgICBpZiAodHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGJvZHkgKz0gXCJcXHJcXG5cIi5jb25jYXQoc3RhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgYm9keTogYm9keVxuICB9O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDcmVhdGVPdmVybGF5T3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsfSB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCAoZXJyb3I6IEVycm9yKSA9PiB2b2lkfSBbY2F0Y2hSdW50aW1lRXJyb3JdXG4gKi9cblxuLyoqXG4gKlxuICogQHBhcmFtIHtDcmVhdGVPdmVybGF5T3B0aW9uc30gb3B0aW9uc1xuICovXG52YXIgY3JlYXRlT3ZlcmxheSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXkob3B0aW9ucykge1xuICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cbiAgdmFyIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQ7XG4gIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqL1xuICB2YXIgY29udGFpbmVyRWxlbWVudDtcbiAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG4gIHZhciBoZWFkZXJFbGVtZW50O1xuICAvKiogQHR5cGUge0FycmF5PChlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZD59ICovXG4gIHZhciBvbkxvYWRRdWV1ZSA9IFtdO1xuICAvKiogQHR5cGUge1RydXN0ZWRUeXBlUG9saWN5IHwgdW5kZWZpbmVkfSAqL1xuICB2YXIgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseVN0eWxlKGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZVtwcm9wXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcih0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7XG4gICAgLy8gRW5hYmxlIFRydXN0ZWQgVHlwZXMgaWYgdGhleSBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gICAgaWYgKHdpbmRvdy50cnVzdGVkVHlwZXMpIHtcbiAgICAgIG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSh0cnVzdGVkVHlwZXNQb2xpY3lOYW1lIHx8IFwid2VicGFjay1kZXYtc2VydmVyI292ZXJsYXlcIiwge1xuICAgICAgICBjcmVhdGVIVE1MOiBmdW5jdGlvbiBjcmVhdGVIVE1MKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5XCI7XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zcmMgPSBcImFib3V0OmJsYW5rXCI7XG4gICAgYXBwbHlTdHlsZShpZnJhbWVDb250YWluZXJFbGVtZW50LCBpZnJhbWVTdHlsZSk7XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGVudEVsZW1lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgKC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudCkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgKC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudCkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnRlbnRFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXktZGl2XCI7XG4gICAgICBhcHBseVN0eWxlKGNvbnRlbnRFbGVtZW50LCBjb250YWluZXJTdHlsZSk7XG4gICAgICBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGhlYWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJDb21waWxlZCB3aXRoIHByb2JsZW1zOlwiO1xuICAgICAgYXBwbHlTdHlsZShoZWFkZXJFbGVtZW50LCBoZWFkZXJTdHlsZSk7XG4gICAgICB2YXIgY2xvc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGFwcGx5U3R5bGUoY2xvc2VCdXR0b25FbGVtZW50LCBkaXNtaXNzQnV0dG9uU3R5bGUpO1xuICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmlubmVyVGV4dCA9IFwiw5dcIjtcbiAgICAgIGNsb3NlQnV0dG9uRWxlbWVudC5hcmlhTGFiZWwgPSBcIkRpc21pc3NcIjtcbiAgICAgIGNsb3NlQnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgb3ZlcmxheVNlcnZpY2Uuc2VuZCh7XG4gICAgICAgICAgdHlwZTogXCJESVNNSVNTXCJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGhlYWRlckVsZW1lbnQpO1xuICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b25FbGVtZW50KTtcbiAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpO1xuXG4gICAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuICAgICAgKC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudCkuYm9keS5hcHBlbmRDaGlsZChjb250ZW50RWxlbWVudCk7XG4gICAgICBvbkxvYWRRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChvbkxvYWQpIHtcbiAgICAgICAgb25Mb2FkKC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovY29udGVudEVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgICBvbkxvYWRRdWV1ZSA9IFtdO1xuXG4gICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsO1xuICAgIH07XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyhlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsfSB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lXG4gICAqL1xuICBmdW5jdGlvbiBlbnN1cmVPdmVybGF5RXhpc3RzKGNhbGxiYWNrLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7XG4gICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA/IG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTChcIlwiKSA6IFwiXCI7XG4gICAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgICAgY2FsbGJhY2soY29udGFpbmVyRWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9uTG9hZFF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgIGlmIChpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRhaW5lcih0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKTtcbiAgfVxuXG4gIC8vIFN1Y2Nlc3NmdWwgY29tcGlsYXRpb24uXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaWYgKCFpZnJhbWVDb250YWluZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLlxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IG51bGw7XG4gICAgY29udGFpbmVyRWxlbWVudCA9IG51bGw7XG4gIH1cblxuICAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWVcbiAgICogQHBhcmFtIHsnYnVpbGQnIHwgJ3J1bnRpbWUnfSBtZXNzYWdlU291cmNlXG4gICAqL1xuICBmdW5jdGlvbiBzaG93KHR5cGUsIG1lc3NhZ2VzLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lLCBtZXNzYWdlU291cmNlKSB7XG4gICAgZW5zdXJlT3ZlcmxheUV4aXN0cyhmdW5jdGlvbiAoKSB7XG4gICAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IG1lc3NhZ2VTb3VyY2UgPT09IFwicnVudGltZVwiID8gXCJVbmNhdWdodCBydW50aW1lIGVycm9yczpcIiA6IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICAgIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIGVudHJ5RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc2dTdHlsZSA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gbXNnU3R5bGVzLndhcm5pbmcgOiBtc2dTdHlsZXMuZXJyb3I7XG4gICAgICAgIGFwcGx5U3R5bGUoZW50cnlFbGVtZW50LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1zZ1N0eWxlKSwge30sIHtcbiAgICAgICAgICBwYWRkaW5nOiBcIjFyZW0gMXJlbSAxLjVyZW0gMXJlbVwiXG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIHR5cGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtID0gZm9ybWF0UHJvYmxlbSh0eXBlLCBtZXNzYWdlKSxcbiAgICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbS5oZWFkZXIsXG4gICAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7XG4gICAgICAgIHR5cGVFbGVtZW50LmlubmVyVGV4dCA9IGhlYWRlcjtcbiAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwgbXNnVHlwZVN0eWxlKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UubW9kdWxlSWRlbnRpZmllcikge1xuICAgICAgICAgIGFwcGx5U3R5bGUodHlwZUVsZW1lbnQsIHtcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBlbGVtZW50LmRhdGFzZXQgbm90IHN1cHBvcnRlZCBpbiBJRVxuICAgICAgICAgIHR5cGVFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY2FuLW9wZW5cIiwgdHJ1ZSk7XG4gICAgICAgICAgdHlwZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZldGNoKFwiL3dlYnBhY2stZGV2LXNlcnZlci9vcGVuLWVkaXRvcj9maWxlTmFtZT1cIi5jb25jYXQobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYWtlIGl0IGxvb2sgc2ltaWxhciB0byBvdXIgdGVybWluYWwuXG4gICAgICAgIHZhciB0ZXh0ID0gYW5zaUhUTUwoZW5jb2RlKGJvZHkpKTtcbiAgICAgICAgdmFyIG1lc3NhZ2VUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGFwcGx5U3R5bGUobWVzc2FnZVRleHROb2RlLCBtc2dUZXh0U3R5bGUpO1xuICAgICAgICBtZXNzYWdlVGV4dE5vZGUuaW5uZXJIVE1MID0gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA/IG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTCh0ZXh0KSA6IHRleHQ7XG4gICAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZCh0eXBlRWxlbWVudCk7XG4gICAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlVGV4dE5vZGUpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovXG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZW50cnlFbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0sIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpO1xuICB9XG4gIHZhciBvdmVybGF5U2VydmljZSA9IGNyZWF0ZU92ZXJsYXlNYWNoaW5lKHtcbiAgICBzaG93T3ZlcmxheTogZnVuY3Rpb24gc2hvd092ZXJsYXkoX3JlZjMpIHtcbiAgICAgIHZhciBfcmVmMyRsZXZlbCA9IF9yZWYzLmxldmVsLFxuICAgICAgICBsZXZlbCA9IF9yZWYzJGxldmVsID09PSB2b2lkIDAgPyBcImVycm9yXCIgOiBfcmVmMyRsZXZlbCxcbiAgICAgICAgbWVzc2FnZXMgPSBfcmVmMy5tZXNzYWdlcyxcbiAgICAgICAgbWVzc2FnZVNvdXJjZSA9IF9yZWYzLm1lc3NhZ2VTb3VyY2U7XG4gICAgICByZXR1cm4gc2hvdyhsZXZlbCwgbWVzc2FnZXMsIG9wdGlvbnMudHJ1c3RlZFR5cGVzUG9saWN5TmFtZSwgbWVzc2FnZVNvdXJjZSk7XG4gICAgfSxcbiAgICBoaWRlT3ZlcmxheTogaGlkZVxuICB9KTtcbiAgaWYgKG9wdGlvbnMuY2F0Y2hSdW50aW1lRXJyb3IpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Vycm9yIHwgdW5kZWZpbmVkfSBlcnJvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmYWxsYmFja01lc3NhZ2VcbiAgICAgKi9cbiAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvciwgZmFsbGJhY2tNZXNzYWdlKSB7XG4gICAgICB2YXIgZXJyb3JPYmplY3QgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoZXJyb3IgfHwgZmFsbGJhY2tNZXNzYWdlKTtcbiAgICAgIHZhciBzaG91bGREaXNwbGF5ID0gdHlwZW9mIG9wdGlvbnMuY2F0Y2hSdW50aW1lRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMuY2F0Y2hSdW50aW1lRXJyb3IoZXJyb3JPYmplY3QpIDogdHJ1ZTtcbiAgICAgIGlmIChzaG91bGREaXNwbGF5KSB7XG4gICAgICAgIG92ZXJsYXlTZXJ2aWNlLnNlbmQoe1xuICAgICAgICAgIHR5cGU6IFwiUlVOVElNRV9FUlJPUlwiLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbe1xuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JPYmplY3QubWVzc2FnZSxcbiAgICAgICAgICAgIHN0YWNrOiBwYXJzZUVycm9yVG9TdGFja3MoZXJyb3JPYmplY3QpXG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBsaXN0ZW5Ub1J1bnRpbWVFcnJvcihmdW5jdGlvbiAoZXJyb3JFdmVudCkge1xuICAgICAgLy8gZXJyb3IgcHJvcGVydHkgbWF5IGJlIGVtcHR5IGluIG9sZGVyIGJyb3dzZXIgbGlrZSBJRVxuICAgICAgdmFyIGVycm9yID0gZXJyb3JFdmVudC5lcnJvcixcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yRXZlbnQubWVzc2FnZTtcbiAgICAgIGlmICghZXJyb3IgJiYgIW1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1lc3NhZ2UpO1xuICAgIH0pO1xuICAgIGxpc3RlblRvVW5oYW5kbGVkUmVqZWN0aW9uKGZ1bmN0aW9uIChwcm9taXNlUmVqZWN0aW9uRXZlbnQpIHtcbiAgICAgIHZhciByZWFzb24gPSBwcm9taXNlUmVqZWN0aW9uRXZlbnQucmVhc29uO1xuICAgICAgaGFuZGxlRXJyb3IocmVhc29uLCBcIlVua25vd24gcHJvbWlzZSByZWplY3Rpb24gcmVhc29uXCIpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdmVybGF5U2VydmljZTtcbn07XG5leHBvcnQgeyBmb3JtYXRQcm9ibGVtLCBjcmVhdGVPdmVybGF5IH07IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHsgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7IGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykgeyB2YXIgbyA9IHJbdF07IG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBfdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7IHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6ICExIH0pLCBlOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSB0eXBlb2YgaSA/IGkgOiBpICsgXCJcIjsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHsgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7IGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkgeyBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHQsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogITEgfSksIGUgJiYgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKHQpIHsgdmFyIHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIE1hcCA/IG5ldyBNYXAoKSA6IHZvaWQgMDsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKHQpIHsgaWYgKG51bGwgPT09IHQgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKHQpKSByZXR1cm4gdDsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyBpZiAodm9pZCAwICE9PSByKSB7IGlmIChyLmhhcyh0KSkgcmV0dXJuIHIuZ2V0KHQpOyByLnNldCh0LCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdCh0LCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gcmV0dXJuIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogITEsIHdyaXRhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCB9IH0pLCBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgdCk7IH0sIF93cmFwTmF0aXZlU3VwZXIodCk7IH1cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QodCwgZSwgcikgeyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgdmFyIG8gPSBbbnVsbF07IG8ucHVzaC5hcHBseShvLCBlKTsgdmFyIHAgPSBuZXcgKHQuYmluZC5hcHBseSh0LCBvKSkoKTsgcmV0dXJuIHIgJiYgX3NldFByb3RvdHlwZU9mKHAsIHIucHJvdG90eXBlKSwgcDsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbih0KSB7IHRyeSB7IHJldHVybiAtMSAhPT0gRnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKTsgfSBjYXRjaCAobikgeyByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0OyB9IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7IHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHsgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDsgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkgeyByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7IH0sIF9nZXRQcm90b3R5cGVPZih0KTsgfVxuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZU1ldGhvZEluaXRTcGVjKGUsIGEpIHsgX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24oZSwgYSksIGEuYWRkKGUpOyB9XG5mdW5jdGlvbiBfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbihlLCB0KSB7IGlmICh0LmhhcyhlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBpbml0aWFsaXplIHRoZSBzYW1lIHByaXZhdGUgZWxlbWVudHMgdHdpY2Ugb24gYW4gb2JqZWN0XCIpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0Q2xhc3NCcmFuZChlLCB0LCBuKSB7IGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUgPyBlID09PSB0IDogZS5oYXModCkpIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHQgOiBuOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBlbGVtZW50IGlzIG5vdCBwcmVzZW50IG9uIHRoaXMgb2JqZWN0XCIpOyB9XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9ncmVzc1N1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIFwiY3VzdG9tRWxlbWVudHNcIiBpbiBzZWxmICYmICEhSFRNTEVsZW1lbnQucHJvdG90eXBlLmF0dGFjaFNoYWRvdztcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9ncmVzc0VsZW1lbnQoKSB7XG4gIHZhciBfV2VicGFja0RldlNlcnZlclByb2dyZXNzO1xuICBpZiAoY3VzdG9tRWxlbWVudHMuZ2V0KFwid2RzLXByb2dyZXNzXCIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kID0gLyojX19QVVJFX18qL25ldyBXZWFrU2V0KCk7XG4gIHZhciBXZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9IVE1MRWxlbWVudCkge1xuICAgIGZ1bmN0aW9uIFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcygpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MpO1xuICAgICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyk7XG4gICAgICBfY2xhc3NQcml2YXRlTWV0aG9kSW5pdFNwZWMoX3RoaXMsIF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3NfYnJhbmQpO1xuICAgICAgX3RoaXMuYXR0YWNoU2hhZG93KHtcbiAgICAgICAgbW9kZTogXCJvcGVuXCJcbiAgICAgIH0pO1xuICAgICAgX3RoaXMubWF4RGFzaE9mZnNldCA9IC0yMTkuOTkwNzgzNjkxNDA2MjU7XG4gICAgICBfdGhpcy5hbmltYXRpb25UaW1lciA9IG51bGw7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIF9pbmhlcml0cyhXZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MsIF9IVE1MRWxlbWVudCk7XG4gICAgcmV0dXJuIF9jcmVhdGVDbGFzcyhXZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MsIFt7XG4gICAgICBrZXk6IFwiY29ubmVjdGVkQ2FsbGJhY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgX2Fzc2VydENsYXNzQnJhbmQoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCwgdGhpcywgX3Jlc2V0KS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBcInByb2dyZXNzXCIpIHtcbiAgICAgICAgICBfYXNzZXJ0Q2xhc3NCcmFuZChfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kLCB0aGlzLCBfdXBkYXRlKS5jYWxsKHRoaXMsIE51bWJlcihuZXdWYWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwidHlwZVwiKSB7XG4gICAgICAgICAgX2Fzc2VydENsYXNzQnJhbmQoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCwgdGhpcywgX3Jlc2V0KS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFtcInByb2dyZXNzXCIsIFwidHlwZVwiXTtcbiAgICAgIH1cbiAgICB9XSk7XG4gIH0oLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoSFRNTEVsZW1lbnQpKTtcbiAgX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyA9IFdlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcztcbiAgZnVuY3Rpb24gX3Jlc2V0KCkge1xuICAgIHZhciBfdGhpcyRnZXRBdHRyaWJ1dGUsIF9OdW1iZXI7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbWF0aW9uVGltZXIpO1xuICAgIHRoaXMuYW5pbWF0aW9uVGltZXIgPSBudWxsO1xuICAgIHZhciB0eXBlQXR0ciA9IChfdGhpcyRnZXRBdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09PSBudWxsIHx8IF90aGlzJGdldEF0dHJpYnV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkZ2V0QXR0cmlidXRlLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy50eXBlID0gdHlwZUF0dHIgPT09IFwiY2lyY3VsYXJcIiA/IFwiY2lyY3VsYXJcIiA6IFwibGluZWFyXCI7XG4gICAgdmFyIGlubmVySFRNTCA9IHRoaXMudHlwZSA9PT0gXCJjaXJjdWxhclwiID8gX2NpcmN1bGFyVGVtcGxhdGUuY2FsbChfV2VicGFja0RldlNlcnZlclByb2dyZXNzKSA6IF9saW5lYXJUZW1wbGF0ZS5jYWxsKF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MpO1xuICAgIHRoaXMuc2hhZG93Um9vdC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgdGhpcy5pbml0aWFsUHJvZ3Jlc3MgPSAoX051bWJlciA9IE51bWJlcih0aGlzLmdldEF0dHJpYnV0ZShcInByb2dyZXNzXCIpKSkgIT09IG51bGwgJiYgX051bWJlciAhPT0gdm9pZCAwID8gX051bWJlciA6IDA7XG4gICAgX2Fzc2VydENsYXNzQnJhbmQoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCwgdGhpcywgX3VwZGF0ZSkuY2FsbCh0aGlzLCB0aGlzLmluaXRpYWxQcm9ncmVzcyk7XG4gIH1cbiAgZnVuY3Rpb24gX2NpcmN1bGFyVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgICA8c3R5bGU+XFxuICAgICAgICA6aG9zdCB7XFxuICAgICAgICAgICAgd2lkdGg6IDIwMHB4O1xcbiAgICAgICAgICAgIGhlaWdodDogMjAwcHg7XFxuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgICAgIHJpZ2h0OiA1JTtcXG4gICAgICAgICAgICB0b3A6IDUlO1xcbiAgICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjI1cyBlYXNlLWluLW91dDtcXG4gICAgICAgICAgICB6LWluZGV4OiAyMTQ3NDgzNjQ1O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgY2lyY2xlIHtcXG4gICAgICAgICAgICBmaWxsOiAjMjgyZDM1O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcGF0aCB7XFxuICAgICAgICAgICAgZmlsbDogcmdiYSgwLCAwLCAwLCAwKTtcXG4gICAgICAgICAgICBzdHJva2U6IHJnYigxODYsIDIyMywgMTcyKTtcXG4gICAgICAgICAgICBzdHJva2UtZGFzaGFycmF5OiAyMTkuOTkwNzgzNjkxNDA2MjU7XFxuICAgICAgICAgICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0yMTkuOTkwNzgzNjkxNDA2MjU7XFxuICAgICAgICAgICAgc3Ryb2tlLXdpZHRoOiAxMDtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZykgdHJhbnNsYXRlKDBweCwgLTgwcHgpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdGV4dCB7XFxuICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnLCBzYW5zLXNlcmlmO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcXG4gICAgICAgICAgICBmaWxsOiAjZmZmZmZmO1xcbiAgICAgICAgICAgIGRvbWluYW50LWJhc2VsaW5lOiBtaWRkbGU7XFxuICAgICAgICAgICAgdGV4dC1hbmNob3I6IG1pZGRsZTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHRzcGFuI3BlcmNlbnQtc3VwZXIge1xcbiAgICAgICAgICAgIGZpbGw6ICNiZGMzYzc7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAwLjQ1ZW07XFxuICAgICAgICAgICAgYmFzZWxpbmUtc2hpZnQ6IDEwJTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIEBrZXlmcmFtZXMgZmFkZSB7XFxuICAgICAgICAgICAgMCUgeyBvcGFjaXR5OiAxOyB0cmFuc2Zvcm06IHNjYWxlKDEpOyB9XFxuICAgICAgICAgICAgMTAwJSB7IG9wYWNpdHk6IDA7IHRyYW5zZm9ybTogc2NhbGUoMCk7IH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC5kaXNhcHBlYXIge1xcbiAgICAgICAgICAgIGFuaW1hdGlvbjogZmFkZSAwLjNzO1xcbiAgICAgICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xcbiAgICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogMC41cztcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC5oaWRkZW4ge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICAgICAgICA8L3N0eWxlPlxcbiAgICAgICAgPHN2ZyBpZD1cXFwicHJvZ3Jlc3NcXFwiIGNsYXNzPVxcXCJoaWRkZW4gbm9zZWxlY3RcXFwiIHZpZXdCb3g9XFxcIjAgMCA4MCA4MFxcXCI+XFxuICAgICAgICA8Y2lyY2xlIGN4PVxcXCI1MCVcXFwiIGN5PVxcXCI1MCVcXFwiIHI9XFxcIjM1XFxcIj48L2NpcmNsZT5cXG4gICAgICAgIDxwYXRoIGQ9XFxcIk01LDQwYTM1LDM1IDAgMSwwIDcwLDBhMzUsMzUgMCAxLDAgLTcwLDBcXFwiPjwvcGF0aD5cXG4gICAgICAgIDx0ZXh0IHg9XFxcIjUwJVxcXCIgeT1cXFwiNTElXFxcIj5cXG4gICAgICAgICAgICA8dHNwYW4gaWQ9XFxcInBlcmNlbnQtdmFsdWVcXFwiPjA8L3RzcGFuPlxcbiAgICAgICAgICAgIDx0c3BhbiBpZD1cXFwicGVyY2VudC1zdXBlclxcXCI+JTwvdHNwYW4+XFxuICAgICAgICA8L3RleHQ+XFxuICAgICAgICA8L3N2Zz5cXG4gICAgICBcIjtcbiAgfVxuICBmdW5jdGlvbiBfbGluZWFyVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgICA8c3R5bGU+XFxuICAgICAgICA6aG9zdCB7XFxuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgICAgIGhlaWdodDogNHB4O1xcbiAgICAgICAgICAgIHdpZHRoOiAxMDB2dztcXG4gICAgICAgICAgICB6LWluZGV4OiAyMTQ3NDgzNjQ1O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgI2JhciB7XFxuICAgICAgICAgICAgd2lkdGg6IDAlO1xcbiAgICAgICAgICAgIGhlaWdodDogNHB4O1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxODYsIDIyMywgMTcyKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIEBrZXlmcmFtZXMgZmFkZSB7XFxuICAgICAgICAgICAgMCUgeyBvcGFjaXR5OiAxOyB9XFxuICAgICAgICAgICAgMTAwJSB7IG9wYWNpdHk6IDA7IH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC5kaXNhcHBlYXIge1xcbiAgICAgICAgICAgIGFuaW1hdGlvbjogZmFkZSAwLjNzO1xcbiAgICAgICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xcbiAgICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogMC41cztcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC5oaWRkZW4ge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICAgICAgICA8L3N0eWxlPlxcbiAgICAgICAgPGRpdiBpZD1cXFwicHJvZ3Jlc3NcXFwiPjwvZGl2PlxcbiAgICAgICAgXCI7XG4gIH1cbiAgZnVuY3Rpb24gX3VwZGF0ZShwZXJjZW50KSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIiNwcm9ncmVzc1wiKTtcbiAgICBpZiAodGhpcy50eXBlID09PSBcImNpcmN1bGFyXCIpIHtcbiAgICAgIHZhciBwYXRoID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCJwYXRoXCIpO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIjcGVyY2VudC12YWx1ZVwiKTtcbiAgICAgIHZhciBvZmZzZXQgPSAoMTAwIC0gcGVyY2VudCkgLyAxMDAgKiB0aGlzLm1heERhc2hPZmZzZXQ7XG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBvZmZzZXQ7XG4gICAgICB2YWx1ZS50ZXh0Q29udGVudCA9IHBlcmNlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdChwZXJjZW50LCBcIiVcIik7XG4gICAgfVxuICAgIGlmIChwZXJjZW50ID49IDEwMCkge1xuICAgICAgX2Fzc2VydENsYXNzQnJhbmQoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCwgdGhpcywgX2hpZGUpLmNhbGwodGhpcyk7XG4gICAgfSBlbHNlIGlmIChwZXJjZW50ID4gMCkge1xuICAgICAgX2Fzc2VydENsYXNzQnJhbmQoX1dlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzc19icmFuZCwgdGhpcywgX3Nob3cpLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9zaG93KCkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZ3Jlc3NcIik7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9XG4gIGZ1bmN0aW9uIF9oaWRlKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZ3Jlc3NcIik7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gXCJjaXJjdWxhclwiKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNhcHBlYXJcIik7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgICAgIF9hc3NlcnRDbGFzc0JyYW5kKF9XZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3NfYnJhbmQsIF90aGlzMiwgX3VwZGF0ZSkuY2FsbChfdGhpczIsIDApO1xuICAgICAgfSwge1xuICAgICAgICBvbmNlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gXCJsaW5lYXJcIikge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGlzYXBwZWFyXCIpO1xuICAgICAgdGhpcy5hbmltYXRpb25UaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhcHBlYXJcIik7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMCVcIjtcbiAgICAgICAgX3RoaXMyLmFuaW1hdGlvblRpbWVyID0gbnVsbDtcbiAgICAgIH0sIDgwMCk7XG4gICAgfVxuICB9XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZShcIndkcy1wcm9ncmVzc1wiLCBXZWJwYWNrRGV2U2VydmVyUHJvZ3Jlc3MpO1xufSIsIi8qIGdsb2JhbCBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAqL1xuXG5pbXBvcnQgV2ViU29ja2V0Q2xpZW50IGZyb20gXCIuL2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjtcblxuLy8gdGhpcyBXZWJzb2NrZXRDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgdGhlIGNsaWVudCBpcyBub3QgaW5qZWN0ZWRcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xudmFyIENsaWVudCA9XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbnR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCA6IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIDogV2ViU29ja2V0Q2xpZW50O1xuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblxudmFyIHJldHJpZXMgPSAwO1xudmFyIG1heFJldHJpZXMgPSAxMDtcblxuLy8gSW5pdGlhbGl6ZWQgY2xpZW50IGlzIGV4cG9ydGVkIHNvIGV4dGVybmFsIGNvbnN1bWVycyBjYW4gdXRpbGl6ZSB0aGUgc2FtZSBpbnN0YW5jZVxuLy8gSXQgaXMgbXV0YWJsZSB0byBlbmZvcmNlIHNpbmdsZXRvblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcbmV4cG9ydCB2YXIgY2xpZW50ID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge3sgW2hhbmRsZXI6IHN0cmluZ106IChkYXRhPzogYW55LCBwYXJhbXM/OiBhbnkpID0+IGFueSB9fSBoYW5kbGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IFtyZWNvbm5lY3RdXG4gKi9cbnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMsIHJlY29ubmVjdCkge1xuICBjbGllbnQgPSBuZXcgQ2xpZW50KHVybCk7XG4gIGNsaWVudC5vbk9wZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHJpZXMgPSAwO1xuICAgIGlmICh0eXBlb2YgcmVjb25uZWN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBtYXhSZXRyaWVzID0gcmVjb25uZWN0O1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbkNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgaGFuZGxlcnMuY2xvc2UoKTtcbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gcmVjb25uZWN0LlxuICAgIGNsaWVudCA9IG51bGw7XG5cbiAgICAvLyBBZnRlciAxMCByZXRyaWVzIHN0b3AgdHJ5aW5nLCB0byBwcmV2ZW50IGxvZ3NwYW0uXG4gICAgaWYgKHJldHJpZXMgPCBtYXhSZXRyaWVzKSB7XG4gICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LlxuICAgICAgLy8gUmVzcGVjdGZ1bGx5IGNvcGllZCBmcm9tIHRoZSBwYWNrYWdlIGBnb3RgLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICAgICAgdmFyIHJldHJ5SW5NcyA9IDEwMDAgKiBNYXRoLnBvdygyLCByZXRyaWVzKSArIE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgICByZXRyaWVzICs9IDE7XG4gICAgICBsb2cuaW5mbyhcIlRyeWluZyB0byByZWNvbm5lY3QuLi5cIik7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc29ja2V0KHVybCwgaGFuZGxlcnMsIHJlY29ubmVjdCk7XG4gICAgICB9LCByZXRyeUluTXMpO1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbk1lc3NhZ2UoXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZGF0YVxuICAgKi9cbiAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgaWYgKGhhbmRsZXJzW21lc3NhZ2UudHlwZV0pIHtcbiAgICAgIGhhbmRsZXJzW21lc3NhZ2UudHlwZV0obWVzc2FnZS5kYXRhLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgfVxuICB9KTtcbn07XG5leHBvcnQgZGVmYXVsdCBzb2NrZXQ7IiwiaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vbW9kdWxlcy9sb2dnZXIvaW5kZXguanNcIjtcbnZhciBuYW1lID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXJcIjtcbi8vIGRlZmF1bHQgbGV2ZWwgaXMgc2V0IG9uIHRoZSBjbGllbnQgc2lkZSwgc28gaXQgZG9lcyBub3QgbmVlZFxuLy8gdG8gYmUgc2V0IGJ5IHRoZSBDTEkgb3IgQVBJXG52YXIgZGVmYXVsdExldmVsID0gXCJpbmZvXCI7XG5cbi8vIG9wdGlvbnMgbmV3IG9wdGlvbnMsIG1lcmdlIHdpdGggb2xkIG9wdGlvbnNcbi8qKlxuICogQHBhcmFtIHtmYWxzZSB8IHRydWUgfCBcIm5vbmVcIiB8IFwiZXJyb3JcIiB8IFwid2FyblwiIHwgXCJpbmZvXCIgfCBcImxvZ1wiIHwgXCJ2ZXJib3NlXCJ9IGxldmVsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgbG9nZ2VyLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIoe1xuICAgIGxldmVsOiBsZXZlbFxuICB9KTtcbn1cbnNldExvZ0xldmVsKGRlZmF1bHRMZXZlbCk7XG52YXIgbG9nID0gbG9nZ2VyLmdldExvZ2dlcihuYW1lKTtcbmV4cG9ydCB7IGxvZywgc2V0TG9nTGV2ZWwgfTsiLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5IFdvcmtlckdsb2JhbFNjb3BlICovXG5cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge2FueX0gW2RhdGFdXG4gKi9cbmZ1bmN0aW9uIHNlbmRNc2codHlwZSwgZGF0YSkge1xuICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIndlYnBhY2tcIi5jb25jYXQodHlwZSksXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgXCIqXCIpO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBzZW5kTXNnOyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vKiBnbG9iYWxzIF9fd2VicGFja19oYXNoX18gKi9cbmlmIChtb2R1bGUuaG90KSB7XG5cdC8qKiBAdHlwZSB7dW5kZWZpbmVkfHN0cmluZ30gKi9cblx0dmFyIGxhc3RIYXNoO1xuXHR2YXIgdXBUb0RhdGUgPSBmdW5jdGlvbiB1cFRvRGF0ZSgpIHtcblx0XHRyZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChsYXN0SGFzaCkuaW5kZXhPZihfX3dlYnBhY2tfaGFzaF9fKSA+PSAwO1xuXHR9O1xuXHR2YXIgbG9nID0gcmVxdWlyZShcIi4vbG9nXCIpO1xuXHR2YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcblx0XHRtb2R1bGUuaG90XG5cdFx0XHQuY2hlY2sodHJ1ZSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcykge1xuXHRcdFx0XHRpZiAoIXVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdFx0bG9nKFxuXHRcdFx0XHRcdFx0XCJ3YXJuaW5nXCIsXG5cdFx0XHRcdFx0XHRcIltITVJdIENhbm5vdCBmaW5kIHVwZGF0ZS4gXCIgK1xuXHRcdFx0XHRcdFx0XHQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwiUGxlYXNlIHJlbG9hZCBtYW51YWxseSFcIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxvZyhcblx0XHRcdFx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XHRcdFx0XCJbSE1SXSAoUHJvYmFibHkgYmVjYXVzZSBvZiByZXN0YXJ0aW5nIHRoZSB3ZWJwYWNrLWRldi1zZXJ2ZXIpXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGNoZWNrKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXF1aXJlKFwiLi9sb2ctYXBwbHktcmVzdWx0XCIpKHVwZGF0ZWRNb2R1bGVzLCB1cGRhdGVkTW9kdWxlcyk7XG5cblx0XHRcdFx0aWYgKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0dmFyIHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG5cdFx0XHRcdGlmIChbXCJhYm9ydFwiLCBcImZhaWxcIl0uaW5kZXhPZihzdGF0dXMpID49IDApIHtcblx0XHRcdFx0XHRsb2coXG5cdFx0XHRcdFx0XHRcIndhcm5pbmdcIixcblx0XHRcdFx0XHRcdFwiW0hNUl0gQ2Fubm90IGFwcGx5IHVwZGF0ZS4gXCIgK1xuXHRcdFx0XHRcdFx0XHQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuXHRcdFx0XHRcdFx0XHRcdD8gXCJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCJcblx0XHRcdFx0XHRcdFx0XHQ6IFwiUGxlYXNlIHJlbG9hZCBtYW51YWxseSFcIilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBcIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gVXBkYXRlIGZhaWxlZDogXCIgKyBsb2cuZm9ybWF0RXJyb3IoZXJyKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9O1xuXHR2YXIgaG90RW1pdHRlciA9IHJlcXVpcmUoXCIuL2VtaXR0ZXJcIik7XG5cdGhvdEVtaXR0ZXIub24oXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIGZ1bmN0aW9uIChjdXJyZW50SGFzaCkge1xuXHRcdGxhc3RIYXNoID0gY3VycmVudEhhc2g7XG5cdFx0aWYgKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLlwiKTtcblx0XHRcdGNoZWNrKCk7XG5cdFx0fVxuXHR9KTtcblx0bG9nKFwiaW5mb1wiLCBcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG59IGVsc2Uge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJbSE1SXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLlwiKTtcbn1cbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG4vKipcbiAqIEBwYXJhbSB7KHN0cmluZyB8IG51bWJlcilbXX0gdXBkYXRlZE1vZHVsZXMgdXBkYXRlZCBtb2R1bGVzXG4gKiBAcGFyYW0geyhzdHJpbmcgfCBudW1iZXIpW10gfCBudWxsfSByZW5ld2VkTW9kdWxlcyByZW5ld2VkIG1vZHVsZXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMsIHJlbmV3ZWRNb2R1bGVzKSB7XG5cdHZhciB1bmFjY2VwdGVkTW9kdWxlcyA9IHVwZGF0ZWRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRyZXR1cm4gcmVuZXdlZE1vZHVsZXMgJiYgcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwO1xuXHR9KTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblxuXHRpZiAodW5hY2NlcHRlZE1vZHVsZXMubGVuZ3RoID4gMCkge1xuXHRcdGxvZyhcblx0XHRcdFwid2FybmluZ1wiLFxuXHRcdFx0XCJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpXCJcblx0XHQpO1xuXHRcdHVuYWNjZXB0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBOb3RoaW5nIGhvdCB1cGRhdGVkLlwiKTtcblx0fSBlbHNlIHtcblx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gVXBkYXRlZCBtb2R1bGVzOlwiKTtcblx0XHRyZW5ld2VkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0aWYgKHR5cGVvZiBtb2R1bGVJZCA9PT0gXCJzdHJpbmdcIiAmJiBtb2R1bGVJZC5pbmRleE9mKFwiIVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gbW9kdWxlSWQuc3BsaXQoXCIhXCIpO1xuXHRcdFx0XHRsb2cuZ3JvdXBDb2xsYXBzZWQoXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBwYXJ0cy5wb3AoKSk7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdFx0bG9nLmdyb3VwRW5kKFwiaW5mb1wiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR2YXIgbnVtYmVySWRzID0gcmVuZXdlZE1vZHVsZXMuZXZlcnkoZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIG1vZHVsZUlkID09PSBcIm51bWJlclwiO1xuXHRcdH0pO1xuXHRcdGlmIChudW1iZXJJZHMpXG5cdFx0XHRsb2coXG5cdFx0XHRcdFwiaW5mb1wiLFxuXHRcdFx0XHQnW0hNUl0gQ29uc2lkZXIgdXNpbmcgdGhlIG9wdGltaXphdGlvbi5tb2R1bGVJZHM6IFwibmFtZWRcIiBmb3IgbW9kdWxlIG5hbWVzLidcblx0XHRcdCk7XG5cdH1cbn07XG4iLCIvKiogQHR5cGVkZWYge1wiaW5mb1wiIHwgXCJ3YXJuaW5nXCIgfCBcImVycm9yXCJ9IExvZ0xldmVsICovXG5cbi8qKiBAdHlwZSB7TG9nTGV2ZWx9ICovXG52YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUsIGlmIHNob3VsZCBsb2dcbiAqL1xuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KG1zZz86IHN0cmluZykgPT4gdm9pZH0gbG9nRm4gbG9nIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7KGxldmVsOiBMb2dMZXZlbCwgbXNnPzogc3RyaW5nKSA9PiB2b2lkfSBmdW5jdGlvbiB0aGF0IGxvZ3Mgd2hlbiBsb2cgbGV2ZWwgaXMgc3VmZmljaWVudFxuICovXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHtcblx0XHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdFx0bG9nRm4obXNnKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gbXNnIG1lc3NhZ2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGdyb3VwID0gY29uc29sZS5ncm91cCB8fCBkdW1teTtcbnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7XG52YXIgZ3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kIHx8IGR1bW15O1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICovXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgZXJyb3JcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCBlcnJvclxuICovXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fVxuXHRyZXR1cm4gc3RhY2s7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbG9jYWxzSnNvblN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gMTc0MTQ3NjQyOTU5MVxuICAgICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIlwifSk7XG4gICAgICAgIC8vIG9ubHkgaW52YWxpZGF0ZSB3aGVuIGxvY2FscyBjaGFuZ2VcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG1vZHVsZS5ob3QuZGF0YSAmJlxuICAgICAgICAgIG1vZHVsZS5ob3QuZGF0YS52YWx1ZSAmJlxuICAgICAgICAgIG1vZHVsZS5ob3QuZGF0YS52YWx1ZSAhPT0gbG9jYWxzSnNvblN0cmluZ1xuICAgICAgICApIHtcbiAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgpO1xuICAgICAgICB9XG4gICAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgZGF0YS52YWx1ZSA9IGxvY2Fsc0pzb25TdHJpbmc7XG4gICAgICAgICAgY3NzUmVsb2FkKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkoKTtcbiAgICB9XG4gICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiAoXCJtYWluLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiZTg4NjY3ZThmNjNjZWNkODU0ZjFcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzID0gMDtcbnZhciBibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkLCBmZXRjaFByaW9yaXR5KSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkLCBmZXRjaFByaW9yaXR5KSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgX21haW4gPSBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkO1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IF9tYWluLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBfbWFpbiA/IHVuZGVmaW5lZCA6IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaywgZXJyb3JIYW5kbGVyKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcFtpXV0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly8gaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuXHRcdGRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuXHR9O1xuXHRjdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBob3Q7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHtcblx0Y3VycmVudFN0YXR1cyA9IG5ld1N0YXR1cztcblx0dmFyIHJlc3VsdHMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cykudGhlbihmdW5jdGlvbiAoKSB7fSk7XG59XG5cbmZ1bmN0aW9uIHVuYmxvY2soKSB7XG5cdGlmICgtLWJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSB7XG5cdFx0XHRcdHZhciBsaXN0ID0gYmxvY2tpbmdQcm9taXNlc1dhaXRpbmc7XG5cdFx0XHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGxpc3RbaV0oKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdC8qIGZhbGx0aHJvdWdoICovXG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMrKztcblx0XHRcdHByb21pc2UudGhlbih1bmJsb2NrLCB1bmJsb2NrKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nLnB1c2goZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVzb2x2ZShmbigpKTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0cmV0dXJuIHNldFN0YXR1cyhcImNoZWNrXCIpXG5cdFx0LnRoZW4oX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKS50aGVuKFxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInByZXBhcmVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoXG5cdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdGtleVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5jLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUucixcblx0XHRcdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdFx0XHRcdFx0fSwgW10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcbn1cblxuZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1cyAoc3RhdGU6IFwiICtcblx0XHRcdFx0XHRjdXJyZW50U3RhdHVzICtcblx0XHRcdFx0XHRcIilcIlxuXHRcdFx0KTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJhYm9ydFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHR2YXIgZGlzcG9zZVByb21pc2UgPSBzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHZhciBhcHBseVByb21pc2UgPSBzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChbZGlzcG9zZVByb21pc2UsIGFwcGx5UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiZmFpbFwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiBsaXN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImlkbGVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NDUklQVCcpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvXmJsb2I6LywgXCJcIikucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbnZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCBvbGRUYWcsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRsaW5rVGFnLm5vbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uYztcblx0fVxuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIGV2ZW50LnR5cGU7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIGVycm9yVHlwZSArIFwiOiBcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLm5hbWUgPSBcIkNodW5rTG9hZEVycm9yXCI7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRpZiAobGlua1RhZy5wYXJlbnROb2RlKSBsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXG5cdGlmIChvbGRUYWcpIHtcblx0XHRvbGRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGlua1RhZywgb2xkVGFnLm5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpO1xuXHR9XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG51bGwsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdHZhciBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn1cblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkIiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbnZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0O1xudmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gbG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkge1xuXHRjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0ID0gdXBkYXRlZE1vZHVsZXNMaXN0O1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZWZsb2VtYVwiXSA9IChjaHVua0lkLCBtb3JlTW9kdWxlcywgcnVudGltZSkgPT4ge1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0aWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgY3VycmVudFVwZGF0ZVJ1bnRpbWUucHVzaChydW50aW1lKTtcblx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKCk7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHR9XG59O1xuXG52YXIgY3VycmVudFVwZGF0ZUNodW5rcztcbnZhciBjdXJyZW50VXBkYXRlO1xudmFyIGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lO1xuZnVuY3Rpb24gYXBwbHlIYW5kbGVyKG9wdGlvbnMpIHtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikgZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtcjtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKHVwZGF0ZU1vZHVsZUlkKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG5cdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cblx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW46IFtpZF0sXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuXHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuXHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFtb2R1bGUgfHxcblx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuXHRcdFx0KVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdO1xuXHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG5cdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcblx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRpZDogcGFyZW50SWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcblx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcblx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuXHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYltpXTtcblx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcblx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuXHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG5cdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUobW9kdWxlKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyBtb2R1bGUuaWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcblx0XHQpO1xuXHR9O1xuXG5cdGZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdFx0dmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTtcblx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cblx0XHRcdHZhciByZXN1bHQgPSBuZXdNb2R1bGVGYWN0b3J5XG5cdFx0XHRcdD8gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKVxuXHRcdFx0XHQ6IHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCB8fCBtb2R1bGUuaG90Ll9tYWluKSAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGVycm9ySGFuZGxlcnNba10gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyc1trXShlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMSkge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjEsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjEpO1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSBmYWxzZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdCFjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzP3Byb3RvY29sPXdzJTNBJmhvc3RuYW1lPTAuMC4wLjAmcG9ydD04MDgwJnBhdGhuYW1lPSUyRndzJmxvZ2dpbmc9aW5mbyZvdmVybGF5PXRydWUmcmVjb25uZWN0PTEwJmhvdD10cnVlJmxpdmUtcmVsb2FkPXRydWVcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZGV2LXNlcnZlci5qc1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18oXCIuL2FwcC9pbmRleC5qc1wiKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3R5bGVzL2luZGV4LnNjc3NcIik7XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiSGlnaGxpZ2h0IiwiQW5pbWF0aW9uIiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJzdXBlciIsImFuaW1hdGVJbiIsInRoaXMiLCJ0aW1lbGluZUluIiwiR1NBUCIsInRpbWVsaW5lIiwiZGVsYXkiLCJmcm9tVG8iLCJhdXRvQWxwaGEiLCJzY2FsZSIsImR1cmF0aW9uIiwiZWFzZSIsImFuaW1hdGVPdXQiLCJzZXQiLCJvblJlc2l6ZSIsIkxhYmVsIiwiZWxlbWVudExpbmVzU3BhbnMiLCJzcGxpdCIsImFwcGVuZCIsImVhY2giLCJlbGVtZW50c0xpbmVzIiwibGluZSIsImluZGV4IiwieSIsImNhbGN1bGF0ZSIsIlBhcmFncmFwaCIsIlRpdGxlIiwicXVlcnlTZWxlY3RvckFsbCIsIkNvbXBvbmVudCIsImNyZWF0ZU9ic2VydmVyIiwiT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsIm9ic2VydmUiLCJBc3luY2xvYWQiLCJzcmMiLCJnZXRBdHRyaWJ1dGUiLCJvbmxvYWQiLCJfIiwiY2xhc3NMaXN0IiwiYWRkIiwiQnV0dG9uIiwicGF0aCIsInF1ZXJ5U2VsZWN0b3IiLCJwYXRoTGVuZ3RoIiwiZ2V0VG90YWxMZW5ndGgiLCJjb25zb2xlIiwibG9nIiwicGF1c2VkIiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZURhc2hhcnJheSIsIm9uTW91c2VFbnRlciIsInBsYXkiLCJvbk1vdXNlTGVhdmUiLCJyZXZlcnNlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbk1vdXNlRW50ZXJFdmVudCIsImJpbmQiLCJvbk1vdXNlTGVhdmVFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJDb2xvcnNNYW5hZ2VyIiwiY2hhbmdlIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJ0byIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiRXZlbnRFbWl0dGVyIiwic2VsZWN0b3IiLCJzZWxlY3RvckNoaWxkcmVuIiwiY3JlYXRlIiwid2luZG93IiwiSFRNTEVsZW1lbnQiLCJrZXkiLCJOb2RlTGlzdCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIlBhZ2UiLCJpZCIsImFuaW1hdGlvbnNMYWJlbHMiLCJhbmltYXRpb25zVGl0bGVzIiwiYW5pbWF0aW9uc1BhcmFncmFwaHMiLCJhbmltYXRpb25zSGlnaGxpZ2h0cyIsInByZWxvYWRlcnMiLCJ0cmFuc2Zvcm1QcmVmaXgiLCJQcmVmaXgiLCJvbk1vdXNlV2hlZWxFdmVudCIsIm9uTW91c2VXaGVlbCIsInNjcm9sbCIsImN1cnJlbnQiLCJ0YXJnZXQiLCJsYXN0IiwibGltaXQiLCJjcmVhdGVBbmltYXRpb25zIiwiY3JlYXRlUHJlbG9hZGVyIiwiYW5pbWF0aW9ucyIsIm1hcCIsInB1c2giLCJzaG93IiwiUHJvbWlzZSIsInJlc29sdmUiLCJjYWxsIiwiaGlkZSIsImRlc3Ryb3kiLCJvbkNvbXBsZXRlIiwiZXZlbnQiLCJwaXhlbFkiLCJub3JtYWxpemVXaGVlbCIsIndyYXBwZXIiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImFuaW1hdGlvbiIsInVwZGF0ZSIsInV0aWxzIiwiY2xhbXAiLCJpbnRlcnBvbGF0ZSIsInN0eWxlIiwiQ2FudmFzIiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVTY2VuZSIsImNyZWF0ZUhvbWUiLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwiZ2wiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjYW52YXMiLCJjYW1lcmEiLCJDYW1lcmEiLCJwb3NpdGlvbiIsInoiLCJzY2VuZSIsIlRyYW5zZm9ybSIsImhvbWUiLCJIb21lIiwic2V0U2l6ZSIsImlubmVyV2lkdGgiLCJwZXJzcGVjdGl2ZSIsImFzcGVjdCIsInJlbmRlciIsImdyb3VwIiwibWVkaWEiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZUdhbGxlcnkiLCJzZXRQYXJlbnQiLCJnZW9tZXRyeSIsIlBsYW5lIiwiTWVkaWEiLCJjcmVhdGVUZXh0dXJlIiwiY3JlYXRlUHJvZ3JhbSIsImNyZWF0ZU1lc2giLCJ0ZXh0dXJlIiwiVGV4dHVyZSIsImltYWdlIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsInByb2dyYW0iLCJQcm9ncmFtIiwiZnJhZ21lbnQiLCJ2ZXJ0ZXgiLCJ1bmlmb3JtcyIsInRNYXAiLCJ2YWx1ZSIsIm1lc2giLCJNZXNoIiwieCIsIk5hdmlnYXRpb24iLCJ0ZW1wbGF0ZSIsImxpbmtzIiwiaXRlbXMiLCJvbkNoYW5nZSIsIkNPTE9SX0JSSUdIVF9HUkVZIiwiQ09MT1JfUVVBUlRFUl9TUEFOSVNIX1dISVRFIiwiUHJlbG9hZGVyIiwidGl0bGUiLCJudW1iZXIiLCJudW1iZXJUZXh0IiwiaW1hZ2VzIiwiZXhwcmVzc2lvbiIsInRpdGxlU3BhbnMiLCJjcmVhdGVMb2FkZXIiLCJpbWciLCJvbkFzc2V0TG9hZGVkIiwicGVyY2VudCIsImlubmVySFRNTCIsIk1hdGgiLCJyb3VuZCIsIm9uTG9hZGVkIiwic3RhZ2dlciIsInNjYWxlWSIsInRyYW5zZm9ybU9yaWdpbiIsImVtaXQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVDb250ZW50IiwiY3JlYXRlTmF2aWdhdGlvbiIsImNyZWF0ZUNhbnZhcyIsImNyZWF0ZVBhZ2VzIiwiYWRkTGlua0xpc3RlbmVycyIsIm5hdmlnYXRpb24iLCJwcmVsb2FkZXIiLCJvbmNlIiwib25QcmVsb2FkZWQiLCJjb250ZW50IiwicGFnZXMiLCJhYm91dCIsIkFib3V0IiwiY29sbGVjdGlvbnMiLCJDb2xsZWN0aW9ucyIsImRldGFpbCIsIkRldGFpbCIsInBhZ2UiLCJ1cmwiLCJyZXF1ZXN0IiwiZmV0Y2giLCJzdGF0dXMiLCJodG1sIiwidGV4dCIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJkaXZDb250ZW50Iiwic2V0QXR0cmlidXRlIiwiZnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJsaW5rIiwib25jbGljayIsInByZXZlbnREZWZhdWx0IiwiaHJlZiIsImJ1dHRvbiIsIndvcmRzIiwic3BsaXRzIiwiaXRlbSIsImNvbmNhdCIsImlzTGluayIsIndvcmQiLCJpbmNsdWRlcyIsInNwbGl0VGV4dCIsInRvU3RyaW5nIiwidHJpbSIsImluZGV4T2YiLCJsaW5lcyIsInBhcnNlTGluZSIsInNwYW5zIiwic3BhbiIsImlzU2luZ2xlTGV0dGVyIiwidGV4dENvbnRlbnQiLCJpc05vdEVtcHR5IiwiaXNOb3RBbmRDaGFyYWN0ZXIiLCJpc05vdERhc2hDaGFyYWN0ZXIiLCJvZmZzZXRUb3AiLCJtb2R1bGUiLCJleHBvcnRzIiwiYW5zaUhUTUwiLCJfcmVnQU5TSSIsIl9kZWZDb2xvcnMiLCJyZXNldCIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJsaWdodGdyZXkiLCJkYXJrZ3JleSIsIl9zdHlsZXMiLCJfb3BlblRhZ3MiLCJfY2xvc2VUYWdzIiwidGVzdCIsImFuc2lDb2RlcyIsInJldCIsInJlcGxhY2UiLCJtYXRjaCIsInNlcSIsIm90IiwicG9wIiwiY3QiLCJsIiwiam9pbiIsIl9zZXRUYWdzIiwiY29sb3JzIiwiY29kZSIsIm9yaUNvbG9yIiwicGFyc2VJbnQiLCJuIiwic2V0Q29sb3JzIiwiRXJyb3IiLCJfZmluYWxDb2xvcnMiLCJoZXgiLCJoYXNPd25Qcm9wZXJ0eSIsInNvbWUiLCJoIiwiZGVmSGV4Q29sb3IiLCJzbGljZSIsInRhZ3MiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIm9wZW4iLCJjbG9zZSIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJhcHBseSIsInJlY2VpdmVyIiwiYXJncyIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOdW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwiaW5pdCIsImVtaXR0ZXIiLCJuYW1lIiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsImVyciIsInJlbW92ZUxpc3RlbmVyIiwicmVzb2x2ZXIiLCJhcmd1bWVudHMiLCJldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIiLCJoYW5kbGVyIiwiZmxhZ3MiLCJvbiIsImFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsInVuZGVmaW5lZCIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiVHlwZUVycm9yIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwicHJlcGVuZCIsIm0iLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiU3RyaW5nIiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwiaSIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsIndyYXBMaXN0ZW5lciIsImFyZyIsImVudW1lcmFibGUiLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfcmVjZW50U2V0dGVyUGx1Z2luIiwiX3JldmVydGluZyIsIl9zdXBwb3J0czNEIiwiX3RyYW5zZm9ybVByb3BzIiwiX1JBRDJERUciLCJQSSIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiYXRhbjIiLCJfY2Fwc0V4cCIsIl9ob3Jpem9udGFsRXhwIiwiX2NvbXBsZXhFeHAiLCJfcHJvcGVydHlBbGlhc2VzIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsInJhdGlvIiwiZGF0YSIsInQiLCJwIiwicyIsImMiLCJ1IiwiX3JlbmRlclByb3BXaXRoRW5kIiwiZSIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsImIiLCJfcmVuZGVyUm91bmRlZENTU1Byb3AiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwicHJvcGVydHkiLCJfc2V0dGVyQ1NTUHJvcCIsInNldFByb3BlcnR5IiwiX3NldHRlclRyYW5zZm9ybSIsIl9nc2FwIiwiX3NldHRlclNjYWxlIiwic2NhbGVYIiwiX3NldHRlclNjYWxlV2l0aFJlbmRlciIsImNhY2hlIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3NhdmVTdHlsZSIsImlzTm90Q1NTIiwiX3RoaXMiLCJ0Zm0iLCJ0cmFuc2Zvcm0iLCJhIiwiX2dldCIsInpPcmlnaW4iLCJwcm9wcyIsInN2ZyIsInN2Z28iLCJfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zIiwidHJhbnNsYXRlIiwicmVtb3ZlUHJvcGVydHkiLCJfcmV2ZXJ0U3R5bGUiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImlzU3RhcnQiLCJ1bmNhY2hlIiwiX2dldFN0eWxlU2F2ZXIiLCJwcm9wZXJ0aWVzIiwic2F2ZXIiLCJyZXZlcnQiLCJzYXZlIiwiZ3NhcCIsImNvcmUiLCJnZXRDYWNoZSIsIm5vZGVUeXBlIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsImNyZWF0ZUVsZW1lbnROUyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJwcmVmZXJQcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIl9pbml0Q29yZSIsImNzc1RleHQiLCJyZXZlcnRpbmciLCJfZ2V0UmVwYXJlbnRlZENsb25lQkJveCIsImJib3giLCJvd25lciIsIm93bmVyU1ZHRWxlbWVudCIsImNsb25lIiwiY2xvbmVOb2RlIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ2V0QXR0cmlidXRlRmFsbGJhY2tzIiwiYXR0cmlidXRlc0FycmF5IiwiaGFzQXR0cmlidXRlIiwiX2dldEJCb3giLCJib3VuZHMiLCJjbG9uZWQiLCJ3aWR0aCIsImhlaWdodCIsIl9pc1NWRyIsImdldENUTSIsIl9yZW1vdmVQcm9wZXJ0eSIsImZpcnN0MkNoYXJzIiwicmVtb3ZlQXR0cmlidXRlIiwiX2FkZE5vblR3ZWVuaW5nUFQiLCJwbHVnaW4iLCJiZWdpbm5pbmciLCJlbmQiLCJvbmx5U2V0QXRFbmQiLCJwdCIsIlByb3BUd2VlbiIsIl9wdCIsIl9wcm9wcyIsIl9ub25Db252ZXJ0aWJsZVVuaXRzIiwiZGVnIiwicmFkIiwidHVybiIsIl9ub25TdGFuZGFyZExheW91dHMiLCJncmlkIiwiZmxleCIsIl9jb252ZXJ0VG9Vbml0IiwidW5pdCIsInB4IiwicGFyZW50IiwiaXNTVkciLCJjdXJWYWx1ZSIsInBhcnNlRmxvYXQiLCJjdXJVbml0IiwiaG9yaXpvbnRhbCIsImlzUm9vdFNWRyIsInRhZ05hbWUiLCJtZWFzdXJlUHJvcGVydHkiLCJhbW91bnQiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsIl9yb3VuZCIsInRpbWUiLCJfdGlja2VyIiwidiIsIl9nZXRDYWNoZSIsIl9wYXJzZVRyYW5zZm9ybSIsIm9yaWdpbiIsIl9maXJzdFR3b09ubHkiLCJfc3BlY2lhbFByb3BzIiwiX2dldFByb3BlcnR5IiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInByb3AiLCJzdGFydCIsInJlc3VsdCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIm1hdGNoSW5kZXgiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJfbnVtV2l0aFVuaXRFeHAiLCJleGVjIiwic3Vic3RyaW5nIiwiX3BhcnNlUmVsYXRpdmUiLCJsYXN0SW5kZXgiLCJfY29uZmlnIiwidW5pdHMiLCJfbmV4dCIsInIiLCJfcmVsRXhwIiwiX2tleXdvcmRUb1BlcmNlbnQiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJjZW50ZXIiLCJfcmVuZGVyQ2xlYXJQcm9wcyIsInR3ZWVuIiwiX3RpbWUiLCJfZHVyIiwiY2xlYXJUcmFuc2Zvcm1zIiwicm90YXRlIiwiY2xlYXJQcm9wcyIsInByIiwiX2lkZW50aXR5MkRNYXRyaXgiLCJfcm90YXRpb25hbFByb3BlcnRpZXMiLCJfaXNOdWxsVHJhbnNmb3JtIiwiX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSIsIm1hdHJpeFN0cmluZyIsIl9udW1FeHAiLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsIm5leHRTaWJsaW5nIiwidGVtcCIsImFkZGVkVG9ET00iLCJtYXRyaXgiLCJiYXNlVmFsIiwiY29uc29saWRhdGUiLCJkIiwiZiIsIm9mZnNldFBhcmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm5leHRFbGVtZW50U2libGluZyIsImluc2VydEJlZm9yZSIsIl9hcHBseVNWR09yaWdpbiIsIm9yaWdpbklzQWJzb2x1dGUiLCJzbW9vdGgiLCJtYXRyaXhBcnJheSIsInBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvIiwiZGV0ZXJtaW5hbnQiLCJ4T3JpZ2luT2xkIiwieE9yaWdpbiIsInlPcmlnaW5PbGQiLCJ5T3JpZ2luIiwieE9mZnNldE9sZCIsInhPZmZzZXQiLCJ5T2Zmc2V0T2xkIiwieU9mZnNldCIsInR4IiwidHkiLCJvcmlnaW5TcGxpdCIsIkdTQ2FjaGUiLCJyb3RhdGlvbiIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJhbmdsZSIsImNvcyIsInNpbiIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwic3FydCIsImFicyIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJvZmZzZXRXaWR0aCIsInlQZXJjZW50Iiwib2Zmc2V0SGVpZ2h0IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJmb3JjZTNEIiwiX3JlbmRlclNWR1RyYW5zZm9ybXMiLCJfcmVuZGVyQ1NTVHJhbnNmb3JtcyIsIl9yZW5kZXJOb24zRFRyYW5zZm9ybXMiLCJfYWRkUHhUcmFuc2xhdGUiLCJnZXRVbml0IiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsImExMSIsImEyMSIsIl9yZWYyIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJkaXJlY3Rpb24iLCJjYXAiLCJpc1N0cmluZyIsIl9pc1N0cmluZyIsImZpbmFsVmFsdWUiLCJfYXNzaWduIiwic291cmNlIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsImVuZENhY2hlIiwic3RhcnRDYWNoZSIsIl9mb3JFYWNoTmFtZSIsInNpZGUiLCJ2YXJzIiwicG9zaXRpb25BbmRTY2FsZSIsImFsbCIsIkNTU1BsdWdpbiIsInJlZ2lzdGVyIiwidGFyZ2V0VGVzdCIsInRhcmdldHMiLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJpbmxpbmVQcm9wcyIsInN0YXJ0QXQiLCJzdHlsZXMiLCJfcGx1Z2lucyIsIl9jaGVja1BsdWdpbiIsIl9yZXBsYWNlUmFuZG9tIiwiX2NvbG9yRXhwIiwidmlzaWJpbGl0eSIsInBhcnNlVHJhbnNmb3JtIiwic21vb3RoT3JpZ2luIiwiZGVwIiwiYXV0b1JvdW5kIiwiX21pc3NpbmdQbHVnaW4iLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiYWxpYXNlcyIsImdldFNldHRlciIsIl9pc1VuZGVmaW5lZCIsIl9nZXRTZXR0ZXIiLCJjaGVja1ByZWZpeCIsImdldFN0eWxlU2F2ZXIiLCJyZWdpc3RlclBsdWdpbiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9zdXBwcmVzc092ZXJ3cml0ZXMiLCJfY29udGV4dCIsIl9nbG9iYWxUaW1lbGluZSIsIl9jb3JlSW5pdHRlZCIsIl9jb3JlUmVhZHkiLCJfbGFzdFJlbmRlcmVkRnJhbWUiLCJfcXVpY2tUd2VlbiIsIl90aWNrZXJBY3RpdmUiLCJuMSIsIm4yIiwibjMiLCJlYXNlT3V0IiwiYXV0b1NsZWVwIiwibnVsbFRhcmdldFdhcm4iLCJsaW5lSGVpZ2h0IiwiX2RlZmF1bHRzIiwib3ZlcndyaXRlIiwiX2JpZ051bSIsIl90aW55TnVtIiwiXzJQSSIsIl9IQUxGX1BJIiwiX2dzSUQiLCJfc3FydCIsIl9jb3MiLCJfc2luIiwiX2lzRnVuY3Rpb24iLCJfaXNOdW1iZXIiLCJfaXNPYmplY3QiLCJfaXNOb3RGYWxzZSIsIl93aW5kb3dFeGlzdHMiLCJfaXNGdW5jT3JTdHJpbmciLCJfaXNUeXBlZEFycmF5IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJfaXNBcnJheSIsIl9zdHJpY3ROdW1FeHAiLCJfY29tcGxleFN0cmluZ051bUV4cCIsIl9kZWxpbWl0ZWRWYWx1ZUV4cCIsIl91bml0RXhwIiwiX2dsb2JhbHMiLCJfaW5zdGFsbFNjb3BlIiwiX2luc3RhbGwiLCJzY29wZSIsIl9tZXJnZSIsIl93YXJuIiwic3VwcHJlc3MiLCJfYWRkR2xvYmFsIiwib2JqIiwiX2VtcHR5RnVuYyIsIl9zdGFydEF0UmV2ZXJ0Q29uZmlnIiwic3VwcHJlc3NFdmVudHMiLCJraWxsIiwiX3JldmVydENvbmZpZ05vS2lsbCIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsInNwbGljZSIsInRvQXJyYXkiLCJuYW1lcyIsImZ1bmMiLCJfcm91bmRQcmVjaXNlIiwib3BlcmF0b3IiLCJfYXJyYXlDb250YWluc0FueSIsInRvU2VhcmNoIiwidG9GaW5kIiwiX2xhenlSZW5kZXIiLCJfbGF6eSIsIl9sYXp5U2FmZVJlbmRlciIsImZvcmNlIiwiX2luaXR0ZWQiLCJfc3RhcnRBdCIsIl9udW1lcmljSWZQb3NzaWJsZSIsIl9wYXNzVGhyb3VnaCIsIl9zZXREZWZhdWx0cyIsImRlZmF1bHRzIiwiYmFzZSIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJfaW5oZXJpdERlZmF1bHRzIiwiZXhjbHVkZUR1cmF0aW9uIiwia2V5ZnJhbWVzIiwiaW5oZXJpdCIsIl9kcCIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsImNoaWxkIiwiZmlyc3RQcm9wIiwibGFzdFByb3AiLCJzb3J0QnkiLCJwcmV2IiwiX3ByZXYiLCJfcmVtb3ZlTGlua2VkTGlzdEl0ZW0iLCJuZXh0IiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwicmVtb3ZlIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9zdGFydCIsIl9kaXJ0eSIsIl9yZXdpbmRTdGFydEF0IiwidG90YWxUaW1lIiwiaW1tZWRpYXRlUmVuZGVyIiwiYXV0b1JldmVydCIsIl9oYXNOb1BhdXNlZEFuY2VzdG9ycyIsIl90cyIsIl9lbGFwc2VkQ3ljbGVEdXJhdGlvbiIsIl9yZXBlYXQiLCJfYW5pbWF0aW9uQ3ljbGUiLCJfdFRpbWUiLCJfckRlbGF5IiwidFRpbWUiLCJjeWNsZUR1cmF0aW9uIiwid2hvbGUiLCJmbG9vciIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsInRvdGFsRHVyYXRpb24iLCJfdER1ciIsIl9zZXRFbmQiLCJfcnRzIiwiX2FsaWduUGxheWhlYWQiLCJzbW9vdGhDaGlsZFRpbWluZyIsIl9wb3N0QWRkQ2hlY2tzIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsImxhenkiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX2xvY2siLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJyZXBlYXQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwib2Zmc2V0IiwiaXNQZXJjZW50IiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlyVmFycyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwicnVuQmFja3dhcmRzIiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJtaW4iLCJtYXgiLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl93YWtlIiwiZWwiLCJuYXRpdmVFbGVtZW50Iiwic2h1ZmZsZSIsInNvcnQiLCJyYW5kb20iLCJkaXN0cmlidXRlIiwiX3BhcnNlRWFzZSIsImZyb20iLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJheGlzIiwicmF0aW9YIiwicmF0aW9ZIiwiZWRnZXMiLCJvcmlnaW5YIiwib3JpZ2luWSIsImoiLCJ3cmFwQXQiLCJkaXN0YW5jZXMiLCJfaW52ZXJ0RWFzZSIsIl9yb3VuZE1vZGlmaWVyIiwicG93IiwicmF3Iiwic25hcCIsInNuYXBUbyIsInJhZGl1cyIsImlzMkQiLCJ2YWx1ZXMiLCJpbmNyZW1lbnQiLCJkeCIsImR5IiwiY2xvc2VzdCIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJwaXBlIiwiX2xlbiIsImZ1bmN0aW9ucyIsIl9rZXkiLCJyZWR1Y2UiLCJ1bml0aXplIiwibm9ybWFsaXplIiwibWFwUmFuZ2UiLCJfd3JhcEFycmF5Iiwid3JhcCIsInJhbmdlIiwid3JhcFlveW8iLCJ0b3RhbCIsIm51bXMiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwicHJvZ3Jlc3MiLCJtdXRhdGUiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJtYXN0ZXIiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJkaXN0YW5jZSIsImxhYmVsIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsImNhbGxiYWNrIiwicHJldkNvbnRleHQiLCJfY3R4IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJzY3JvbGxUcmlnZ2VyIiwiX3JlZ2lzdGVyUGx1Z2luUXVldWUiLCJfY3JlYXRlUGx1Z2luIiwiY29uZmlnIiwiaGVhZGxlc3MiLCJpc0Z1bmMiLCJQbHVnaW4iLCJpbnN0YW5jZURlZmF1bHRzIiwiX2tpbGxQcm9wVHdlZW5zT2YiLCJtb2RpZmllciIsIl9hZGRQbHVnaW5Nb2RpZmllciIsInJhd1ZhcnMiLCJzdGF0aWNzIiwiXzI1NSIsIl9jb2xvckxvb2t1cCIsImFxdWEiLCJsaW1lIiwic2lsdmVyIiwibWFyb29uIiwidGVhbCIsIm5hdnkiLCJ3aGl0ZSIsIm9saXZlIiwib3JhbmdlIiwiZ3JheSIsInB1cnBsZSIsInBpbmsiLCJ0cmFuc3BhcmVudCIsIl9odWUiLCJtMSIsIm0yIiwic3BsaXRDb2xvciIsInRvSFNMIiwiZm9yY2VBbHBoYSIsImciLCJ3YXNIU0wiLCJfY29sb3JPcmRlckRhdGEiLCJfZm9ybWF0Q29sb3JzIiwib3JkZXJNYXRjaERhdGEiLCJzaGVsbCIsIlJlZ0V4cCIsIl9oc2xFeHAiLCJjb21iaW5lZCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfaSIsIl9nZXRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX3RpY2siLCJvdmVybGFwIiwiZGlzcGF0Y2giLCJlbGFwc2VkIiwibWFudWFsIiwidGljayIsImRlbHRhUmF0aW8iLCJmcHMiLCJ3YWtlIiwiZ3NhcFZlcnNpb25zIiwidmVyc2lvbiIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiSW5maW5pdHkiLCJfZnBzIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJ2YWwiLCJwYXJzZWRWYWwiLCJsYXN0SW5kZXhPZiIsIl9wcm9wYWdhdGVZb3lvRWFzZSIsImlzWW95byIsIl9maXJzdCIsInlveW9FYXNlIiwiX3lveW8iLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwibmVzdGVkIiwiX0NFIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiX3Byb3RvIiwic3RhcnRUaW1lIiwiX3RvdGFsVGltZSIsIl9wdExvb2t1cCIsIl9wVGltZSIsIml0ZXJhdGlvbiIsIl9wcyIsIl9yZWNhY2hlQW5jZXN0b3JzIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJfc2F0Iiwic2VlayIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJyZXZlcnNlZCIsInBhdXNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaW52YWxpZGF0ZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIl9vblVwZGF0ZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfcHJvbSIsIl9BbmltYXRpb24iLCJzb3J0Q2hpbGRyZW4iLCJfcHJvdG8yIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsIm9uQ29tcGxldGVBbGwiLCJvbkNvbXBsZXRlQWxsUGFyYW1zIiwib25Db21wbGV0ZVBhcmFtcyIsInN0YWdnZXJGcm9tIiwic3RhZ2dlckZyb21UbyIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldkl0ZXJhdGlvbiIsInByZXZUaW1lIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJyZXdpbmRpbmciLCJkb2VzV3JhcCIsInJlcGVhdFJlZnJlc2giLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiX2xhc3QiLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwib25VcGRhdGUiLCJhZGp1c3RlZFRpbWUiLCJfdGhpczIiLCJhZGRMYWJlbCIsImdldENoaWxkcmVuIiwidHdlZW5zIiwidGltZWxpbmVzIiwiaWdub3JlQmVmb3JlVGltZSIsImdldEJ5SWQiLCJyZW1vdmVMYWJlbCIsImtpbGxUd2VlbnNPZiIsIl90b3RhbFRpbWUyIiwiYWRkUGF1c2UiLCJyZW1vdmVQYXVzZSIsIm9ubHlBY3RpdmUiLCJnZXRUd2VlbnNPZiIsIl9vdmVyd3JpdGluZ1R3ZWVuIiwiY2hpbGRyZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwiaW5pdHRlZCIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwic29mdCIsImNsZWFyIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX3NldHRlclBsYWluIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJwdExvb2t1cCIsIl9wYXJzZUZ1bmNPclN0cmluZyIsIl9wcm9jZXNzVmFycyIsInByaW9yaXR5IiwiY2xlYW5WYXJzIiwiZ3NEYXRhIiwiaGFybmVzc1ZhcnMiLCJvdmVyd3JpdHRlbiIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsIl9mcm9tIiwiX3B0Q2FjaGUiLCJfb3AiLCJfb25Jbml0IiwiX3BhcnNlS2V5ZnJhbWUiLCJhbGxQcm9wcyIsImVhc2VFYWNoIiwiX3N0YWdnZXJUd2VlblByb3BzIiwiX3N0YWdnZXJQcm9wc1RvU2tpcCIsIl9BbmltYXRpb24yIiwic2tpcEluaGVyaXQiLCJfdGhpczMiLCJjdXJUYXJnZXQiLCJzdGFnZ2VyRnVuYyIsInN0YWdnZXJWYXJzVG9NZXJnZSIsIl90aGlzMyR2YXJzIiwia2YiLCJfcHJvdG8zIiwiaXNOZWdhdGl2ZSIsInByZXZSYXRpbyIsIl9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiIsInJlc2V0VG8iLCJzdGFydElzUmVsYXRpdmUiLCJza2lwUmVjdXJzaW9uIiwicm9vdFBUIiwibG9va3VwIiwicHRDYWNoZSIsIl91cGRhdGVQcm9wVHdlZW5zIiwib3ZlcndyaXR0ZW5Qcm9wcyIsImN1ckxvb2t1cCIsImN1ck92ZXJ3cml0ZVByb3BzIiwia2lsbGluZ1RhcmdldHMiLCJwcm9wVHdlZW5Mb29rdXAiLCJmaXJzdFBUIiwiYTEiLCJhMiIsIl9hcnJheXNNYXRjaCIsInByb3BlcnR5QWxpYXNlcyIsIl9hZGRBbGlhc2VzVG9WYXJzIiwib25SZXZlcnNlQ29tcGxldGUiLCJvblJldmVyc2VDb21wbGV0ZVBhcmFtcyIsIl9zZXR0ZXJBdHRyaWJ1dGUiLCJoYXNOb25EZXBlbmRlbnRSZW1haW5pbmciLCJvcCIsIl9zZXR0ZXJXaXRoTW9kaWZpZXIiLCJtU2V0IiwibXQiLCJwdDIiLCJmaXJzdCIsIlR3ZWVuTWF4IiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJfbWVkaWEiLCJfZW1wdHlBcnJheSIsIl9sYXN0TWVkaWFUaW1lIiwiX2NvbnRleHRJRCIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsImFueU1hdGNoIiwidG9nZ2xlZCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwibXEiLCJhY3RpdmUiLCJjb25kIiwiX2xlbjIiLCJfa2V5MiIsImdldFByb3BlcnR5IiwiZ2V0dGVyIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9zZXREZWZhdWx0czIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiZ2xvYmFscyIsInRvQWRkIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwibW9kaWZpZXJzIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsImdzYXBXaXRoQ1NTIiwiVHdlZW5NYXhXaXRoQ1NTIiwiRGF0YVZpZXciLCJyZXF1aXJlIiwiZ2V0TmF0aXZlIiwiaGFzaENsZWFyIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhhc2giLCJoYXMiLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsIk1hcCIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwiU2V0Iiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwiX19kYXRhX18iLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTdGFjayIsInNpemUiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiV2Vha01hcCIsImFycmF5IiwiaXRlcmF0ZWUiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNCdWZmZXIiLCJpc0luZGV4IiwiaXNUeXBlZEFycmF5IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiZXEiLCJiYXNlRm9yT3duIiwiYmFzZUVhY2giLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwib2JqZWN0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImFycmF5UHVzaCIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJnZXRUYWciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsIm9ialZhbHVlIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImlzRnVuY3Rpb24iLCJpc01hc2tlZCIsImlzT2JqZWN0IiwidG9Tb3VyY2UiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsInJlSXNOYXRpdmUiLCJpc0xlbmd0aCIsInR5cGVkQXJyYXlUYWdzIiwiYmFzZU1hdGNoZXMiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiaWRlbnRpdHkiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJpc0FycmF5TGlrZSIsImNvbGxlY3Rpb24iLCJiYXNlSXNNYXRjaCIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImJhc2VHZXQiLCJhcnJheU1hcCIsImlzU3ltYm9sIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsImJhc2VUb1N0cmluZyIsInN0cmluZ1RvUGF0aCIsImNvcmVKc0RhdGEiLCJlYWNoRnVuYyIsImZyb21SaWdodCIsIml0ZXJhYmxlIiwiYXJyYXlTb21lIiwiY2FjaGVIYXMiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwib3RoU3RhY2tlZCIsInNlZW4iLCJhcnJWYWx1ZSIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvdGhJbmRleCIsIm1hcFRvQXJyYXkiLCJzZXRUb0FycmF5Iiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJ0YWciLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImJ1ZmZlciIsImNvbnZlcnQiLCJzdGFja2VkIiwiZ2V0QWxsS2V5cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsInNraXBDdG9yIiwib2JqQ3RvciIsIm90aEN0b3IiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwiYmFzZUdldEFsbEtleXMiLCJnZXRTeW1ib2xzIiwiaXNLZXlhYmxlIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VmFsdWUiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsInN5bWJvbCIsIm1hcFRhZyIsInByb21pc2VUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJDdG9yIiwiY3RvclN0cmluZyIsImhhc0Z1bmMiLCJuYXRpdmVDcmVhdGUiLCJyZUlzVWludCIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJ1aWQiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJhc3NvY0luZGV4T2YiLCJnZXRNYXBEYXRhIiwibWVtb2l6ZSIsIm92ZXJBcmciLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwiYmluZGluZyIsImZyZWVTZWxmIiwicm9vdCIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsIm1lbW9pemVDYXBwZWQiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiYXJyYXlFYWNoIiwiY2FzdEZ1bmN0aW9uIiwiZGVmYXVsdFZhbHVlIiwiYmFzZUhhc0luIiwiaGFzUGF0aCIsImJhc2VJc0FyZ3VtZW50cyIsInN0dWJGYWxzZSIsIkJ1ZmZlciIsImJhc2VJc1R5cGVkQXJyYXkiLCJiYXNlVW5hcnkiLCJub2RlSXNUeXBlZEFycmF5IiwiYXJyYXlMaWtlS2V5cyIsImJhc2VLZXlzIiwiYmFzZUl0ZXJhdGVlIiwiYmFzZU1hcCIsIm1lbW9pemVkIiwiQ2FjaGUiLCJiYXNlUHJvcGVydHkiLCJiYXNlUHJvcGVydHlEZWVwIiwibm9ybWFsaXplVXJsIiwic3JjQnlNb2R1bGVJZCIsIm5vRG9jdW1lbnQiLCJub29wIiwidXBkYXRlQ3NzIiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJ2aXNpdGVkIiwibmV3RWwiLCJyZWxvYWRTdHlsZSIsImxvYWRlZCIsImdldFJlbG9hZFVybCIsInJlbG9hZEFsbCIsIm1vZHVsZUlkIiwib3B0aW9ucyIsImZuIiwidGltZW91dCIsImdldFNjcmlwdFNyYyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsYXN0U2NyaXB0VGFnIiwiZmlsZU1hcCIsInNwbGl0UmVzdWx0IiwiZmlsZW5hbWUiLCJtYXBSdWxlIiwicmVnIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9jYWxzIiwidXJsU3RyaW5nIiwicHJvdG9jb2wiLCJjb21wb25lbnRzIiwiaG9zdCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJfaWUiLCJfZmlyZWZveCIsIl9vcGVyYSIsIl93ZWJraXQiLCJfY2hyb21lIiwiX2llX3JlYWxfdmVyc2lvbiIsIl9vc3giLCJfd2luZG93cyIsIl9saW51eCIsIl9hbmRyb2lkIiwiX3dpbjY0IiwiX2lwaG9uZSIsIl9pcGFkIiwiX25hdGl2ZSIsIl9tb2JpbGUiLCJfcG9wdWxhdGVkIiwiX3BvcHVsYXRlIiwidWFzIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYWdlbnQiLCJvcyIsIk5hTiIsImRvY3VtZW50TW9kZSIsInRyaWRlbnQiLCJ2ZXIiLCJVc2VyQWdlbnRfREVQUkVDQVRFRCIsImllIiwiaWVDb21wYXRpYmlsaXR5TW9kZSIsImllNjQiLCJmaXJlZm94Iiwib3BlcmEiLCJ3ZWJraXQiLCJzYWZhcmkiLCJjaHJvbWUiLCJ3aW5kb3dzIiwib3N4IiwibGludXgiLCJpcGhvbmUiLCJtb2JpbGUiLCJuYXRpdmVBcHAiLCJhbmRyb2lkIiwiaXBhZCIsInVzZUhhc0ZlYXR1cmUiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJldmVudE5hbWVTdWZmaXgiLCJjYXB0dXJlIiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJpc0V2ZW50U3VwcG9ydGVkIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJnZXRFdmVudFR5cGUiLCJ0ZW1wTWF0NCIsIk1hdDQiLCJ0ZW1wVmVjM2EiLCJWZWMzIiwidGVtcFZlYzNiIiwibmVhciIsImZhciIsImZvdiIsInpvb20iLCJhc3NpZ24iLCJwcm9qZWN0aW9uTWF0cml4Iiwidmlld01hdHJpeCIsInByb2plY3Rpb25WaWV3TWF0cml4Iiwid29ybGRQb3NpdGlvbiIsIm9ydGhvZ3JhcGhpYyIsImZyb21QZXJzcGVjdGl2ZSIsImZyb21PcnRob2dvbmFsIiwidXBkYXRlTWF0cml4V29ybGQiLCJpbnZlcnNlIiwid29ybGRNYXRyaXgiLCJnZXRUcmFuc2xhdGlvbiIsIm11bHRpcGx5IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImxvb2tBdCIsInByb2plY3QiLCJhcHBseU1hdHJpeDQiLCJ1bnByb2plY3QiLCJ1cGRhdGVGcnVzdHVtIiwiZnJ1c3R1bSIsImNvbnN0YW50IiwiaW52TGVuIiwiZnJ1c3R1bUludGVyc2VjdHNNZXNoIiwibm9kZSIsImF0dHJpYnV0ZXMiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJnZXRNYXhTY2FsZU9uQXhpcyIsImZydXN0dW1JbnRlcnNlY3RzU3BoZXJlIiwibm9ybWFsIiwicGxhbmUiLCJkb3QiLCJ0ZW1wVmVjMyIsIklEIiwiQVRUUl9JRCIsImlzQm91bmRzV2FybmVkIiwiR2VvbWV0cnkiLCJWQU9zIiwiZHJhd1JhbmdlIiwiaW5zdGFuY2VkQ291bnQiLCJiaW5kVmVydGV4QXJyYXkiLCJjdXJyZW50R2VvbWV0cnkiLCJnbFN0YXRlIiwiYWRkQXR0cmlidXRlIiwiYXR0ciIsIkZsb2F0MzJBcnJheSIsIkZMT0FUIiwiVWludDE2QXJyYXkiLCJVTlNJR05FRF9TSE9SVCIsIlVOU0lHTkVEX0lOVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiQVJSQVlfQlVGRkVSIiwibm9ybWFsaXplZCIsInN0cmlkZSIsImRpdmlzb3IiLCJpbnN0YW5jZWQiLCJuZWVkc1VwZGF0ZSIsInVzYWdlIiwiU1RBVElDX0RSQVciLCJ1cGRhdGVBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZCIsImlzTmV3QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYm91bmRCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJ1ZmZlclN1YkRhdGEiLCJzZXRJbmRleCIsInNldERyYXdSYW5nZSIsInNldEluc3RhbmNlZENvdW50IiwiY3JlYXRlVkFPIiwiYXR0cmlidXRlT3JkZXIiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImJpbmRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTG9jYXRpb25zIiwibG9jYXRpb24iLCJudW1Mb2MiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yIiwiZHJhdyIsIm1vZGUiLCJUUklBTkdMRVMiLCJpbmRleEJ5dGVzUGVyRWxlbWVudCIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImRyYXdBcnJheXNJbnN0YW5jZWQiLCJkcmF3RWxlbWVudHMiLCJkcmF3QXJyYXlzIiwiZ2V0UG9zaXRpb24iLCJjb21wdXRlQm91bmRpbmdCb3giLCJzdWIiLCJkaXZpZGUiLCJtYXhSYWRpdXNTcSIsImZyb21BcnJheSIsInNxdWFyZWREaXN0YW5jZSIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlQnVmZmVyIiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwibW9kZWxWaWV3TWF0cml4Iiwibm9ybWFsTWF0cml4IiwiTWF0MyIsImJlZm9yZVJlbmRlckNhbGxiYWNrcyIsImFmdGVyUmVuZGVyQ2FsbGJhY2tzIiwib25CZWZvcmVSZW5kZXIiLCJvbkFmdGVyUmVuZGVyIiwibW9kZWxNYXRyaXgiLCJjYW1lcmFQb3NpdGlvbiIsImdldE5vcm1hbE1hdHJpeCIsImZsaXBGYWNlcyIsImN1bGxGYWNlIiwidXNlIiwiYXJyYXlDYWNoZUYzMiIsIkJBQ0siLCJmcm9udEZhY2UiLCJDQ1ciLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiYmxlbmRGdW5jIiwiYmxlbmRFcXVhdGlvbiIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbE9wIiwicHJlbXVsdGlwbGllZEFscGhhIiwic2V0QmxlbmRGdW5jIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImF0dGFjaFNoYWRlciIsInNldFNoYWRlcnMiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFkZExpbmVOdW1iZXJzIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsInVuaWZvcm1Mb2NhdGlvbnMiLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsInVJbmRleCIsInVuaWZvcm0iLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybU5hbWUiLCJuYW1lQ29tcG9uZW50cyIsImxvY2F0aW9ucyIsIm51bUF0dHJpYnMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImFJbmRleCIsImF0dHJpYnV0ZSIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwiZHN0Iiwic3JjQWxwaGEiLCJkc3RBbHBoYSIsInNldEJsZW5kRXF1YXRpb24iLCJtb2RlUkdCIiwibW9kZUFscGhhIiwic2V0U3RlbmNpbEZ1bmMiLCJyZWYiLCJtYXNrIiwic3RlbmNpbFJlZiIsInNldFN0ZW5jaWxPcCIsInN0ZW5jaWxGYWlsIiwiZGVwdGhGYWlsIiwiZGVwdGhQYXNzIiwiYXBwbHlTdGF0ZSIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkaXNhYmxlIiwiQ1VMTF9GQUNFIiwiQkxFTkQiLCJzZXRDdWxsRmFjZSIsInNldEZyb250RmFjZSIsInNldERlcHRoTWFzayIsInNldERlcHRoRnVuYyIsIlNURU5DSUxfVEVTVCIsInRleHR1cmVVbml0IiwiY3VycmVudFByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiYWN0aXZlVW5pZm9ybSIsImNvbXBvbmVudCIsInNldFVuaWZvcm0iLCJ0ZXh0dXJlVW5pdHMiLCJDVyIsImRlbGV0ZVByb2dyYW0iLCJhcnJheUxlbiIsInZhbHVlTGVuIiwiZmxhdHRlbiIsInNldFZhbHVlIiwiYXJyYXlzRXF1YWwiLCJzZXRBcnJheSIsInVuaWZvcm0xZnYiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTNmdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtMWl2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zaXYiLCJ1bmlmb3JtNGl2IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwid2FybkNvdW50IiwiZHByIiwiZGVwdGgiLCJzdGVuY2lsIiwiYW50aWFsaWFzIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicG93ZXJQcmVmZXJlbmNlIiwiYXV0b0NsZWFyIiwid2ViZ2wiLCJnZXRDb250ZXh0IiwiaXNXZWJnbDIiLCJaRVJPIiwiRlVOQ19BREQiLCJkZXB0aE1hc2siLCJwcmVtdWx0aXBseUFscGhhIiwiZmxpcFkiLCJ1bnBhY2tBbGlnbm1lbnQiLCJmcmFtZWJ1ZmZlciIsInZpZXdwb3J0IiwiYWN0aXZlVGV4dHVyZVVuaXQiLCJleHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiZHJhd0J1ZmZlcnMiLCJwYXJhbWV0ZXJzIiwibWF4VGV4dHVyZVVuaXRzIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJtYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwic2V0Vmlld3BvcnQiLCJzZXRTY2lzc29yIiwic2Npc3NvciIsImJsZW5kRnVuY1NlcGFyYXRlIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwic2V0U3RlbmNpbE1hc2siLCJzdGVuY2lsTWFzayIsInN0ZW5jaWxGdW5jTWFzayIsIkFMV0FZUyIsInN0ZW5jaWxEZXB0aEZhaWwiLCJzdGVuY2lsRGVwdGhQYXNzIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJleHRlbnNpb24iLCJ3ZWJnbDJGdW5jIiwiZXh0RnVuYyIsInNvcnRPcGFxdWUiLCJ6RGVwdGgiLCJzb3J0VHJhbnNwYXJlbnQiLCJzb3J0VUkiLCJnZXRSZW5kZXJMaXN0IiwiZnJ1c3R1bUN1bGwiLCJyZW5kZXJMaXN0IiwidHJhdmVyc2UiLCJ2aXNpYmxlIiwib3BhcXVlIiwidWkiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsIlNURU5DSUxfQlVGRkVSX0JJVCIsImVtcHR5UGl4ZWwiLCJpc1Bvd2VyT2YyIiwiVEVYVFVSRV8yRCIsIlVOU0lHTkVEX0JZVEUiLCJSR0JBIiwiaW50ZXJuYWxGb3JtYXQiLCJ3cmFwUyIsIkNMQU1QX1RPX0VER0UiLCJ3cmFwVCIsIndyYXBSIiwiZ2VuZXJhdGVNaXBtYXBzIiwiVEVYVFVSRV9DVUJFX01BUCIsIm1pbkZpbHRlciIsIk5FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIkxJTkVBUiIsIm1hZ0ZpbHRlciIsIlRFWFRVUkVfM0QiLCJhbmlzb3Ryb3B5IiwibGV2ZWwiLCJzdG9yZSIsIlJFUEVBVCIsImJpbmRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiVU5QQUNLX0FMSUdOTUVOVCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9XUkFQX1IiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJ0ZXhJbWFnZTJEIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwiVEVYVFVSRV8yRF9BUlJBWSIsInRleEltYWdlM0QiLCJpc0NvbXByZXNzZWRUZXh0dXJlIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJnZW5lcmF0ZU1pcG1hcCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJ3b3JsZE1hdHJpeE5lZWRzVXBkYXRlIiwicXVhdGVybmlvbiIsIlF1YXQiLCJFdWxlciIsInVwIiwiX3RhcmdldCIsImZyb21FdWxlciIsImZyb21RdWF0ZXJuaW9uIiwibm90aWZ5UGFyZW50IiwiYWRkQ2hpbGQiLCJub3RpZnlDaGlsZCIsInVwZGF0ZU1hdHJpeCIsImNvbXBvc2UiLCJkZWNvbXBvc2UiLCJpbnZlcnQiLCJnZXRSb3RhdGlvbiIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsIndTZWdzIiwiaFNlZ3MiLCJudW0iLCJudW1JbmRpY2VzIiwidXYiLCJVaW50MzJBcnJheSIsImJ1aWxkUGxhbmUiLCJ1RGlyIiwidkRpciIsImlpIiwiaW8iLCJzZWdXIiwic2VnSCIsIml5IiwiaXgiLCJ0bXBNYXQ0Iiwib3JkZXIiLCJ0cmlnZ2VyUHJvcHMiLCJQcm94eSIsInN1Y2Nlc3MiLCJyZW9yZGVyIiwiZnJvbVJvdGF0aW9uTWF0cml4IiwiRXVsZXJGdW5jIiwicSIsImlzSW50ZXJuYWwiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJNYXQzRnVuYyIsIm1hIiwibWIiLCJmcm9tTWF0cml4NCIsImZyb21CYXNpcyIsInZlYzNhIiwidmVjM2IiLCJ2ZWMzYyIsIm0wMyIsIm0xMyIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsIk1hdDRGdW5jIiwic2V0UG9zaXRpb24iLCJwb3MiLCJnZXRTY2FsaW5nIiwiZXllIiwiUXVhdEZ1bmMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJjb25qdWdhdGUiLCJxQSIsInFCIiwiZnJvbU1hdHJpeDMiLCJtYXRyaXgzIiwiZXVsZXIiLCJmcm9tQXhpc0FuZ2xlIiwic2xlcnAiLCJWZWMzRnVuYyIsInZhIiwidmIiLCJzcXVhcmVkTGVuIiwibmVnYXRlIiwiY3Jvc3MiLCJlcXVhbHMiLCJhcHBseU1hdHJpeDMiLCJtYXQzIiwibWF0NCIsInNjYWxlUm90YXRlTWF0cml4NCIsImFwcGx5UXVhdGVybmlvbiIsImxlcnAiLCJzbW9vdGhMZXJwIiwiZGVjYXkiLCJkdCIsInRyYW5zZm9ybURpcmVjdGlvbiIsIm91dCIsImZyb21NYXQ0IiwiZnJvbVF1YXQiLCJ4MiIsInkyIiwiejIiLCJ4eCIsInl4IiwieXkiLCJ6eCIsInp5IiwienoiLCJ3eCIsInd5Iiwid3oiLCJ0cmFuc3Bvc2UiLCJhMDEiLCJhMDIiLCJhMDAiLCJhMTAiLCJhMjAiLCJiMDEiLCJiMTEiLCJiMjEiLCJkZXQiLCJiMDAiLCJiMDIiLCJiMTAiLCJiMTIiLCJiMjAiLCJiMjIiLCJub3JtYWxGcm9tTWF0NCIsImEwMyIsImEzMCIsImEzMSIsImIwMyIsImIwNCIsImIwNSIsImIwNiIsImIwNyIsImIwOCIsImIwOSIsInByb2plY3Rpb24iLCJzdWJ0cmFjdCIsIm11bHRpcGx5U2NhbGFyIiwiRVBTSUxPTiIsImIwIiwiYjEiLCJiMiIsImIzIiwiaHlwb3QiLCJtYXQiLCJzY2FsaW5nIiwiaXMxIiwiaXMyIiwiaXMzIiwic20xMSIsInNtMTIiLCJzbTEzIiwic20yMSIsInNtMjIiLCJzbTIzIiwic20zMSIsInNtMzIiLCJzbTMzIiwidHJhY2UiLCJTIiwic3JjTWF0IiwiZHN0Um90YXRpb24iLCJkc3RUcmFuc2xhdGlvbiIsImRzdFNjYWxlIiwic3giLCJ2ZWMzIiwic3kiLCJzeiIsIl9tMSIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsImRzdE1hdCIsInNyY1JvdGF0aW9uIiwic3JjVHJhbnNsYXRpb24iLCJzcmNTY2FsZSIsInRlIiwieHkiLCJ4eiIsInl6IiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZSIsImZvdnkiLCJuZiIsIm9ydGhvIiwibHIiLCJidCIsInRhcmdldFRvIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiejAiLCJ6MSIsIngwIiwieDEiLCJzZXRBeGlzQW5nbGUiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsImEwIiwiYTMiLCJpbnZEb3QiLCJmcm9tTWF0MyIsImZSb290IiwiZlRyYWNlIiwiayIsImN4IiwiY3kiLCJjeiIsInZlYzQiLCJzcXVhcmVkTGVuZ3RoIiwiZXhwIiwidHJhbnNmb3JtTWF0NCIsInNjYWxlUm90YXRlTWF0NCIsInRyYW5zZm9ybU1hdDMiLCJ0cmFuc2Zvcm1RdWF0IiwicXgiLCJxeSIsInF6IiwidXZ4IiwidXZ5IiwidXZ6IiwidXV2eCIsInV1dnkiLCJ1dXZ6IiwidzIiLCJ0ZW1wQSIsInRlbXBCIiwiY29zaW5lIiwiZXhhY3RFcXVhbHMiLCJwcmVmaXhlcyIsInVwcGVyIiwibWVtbyIsInByZWZpeCIsImNoYXIiLCJLZXkiLCJkYXNoIiwiX2RlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl90b1Byb3BlcnR5S2V5IiwidG9QcmltaXRpdmUiLCJfdG9QcmltaXRpdmUiLCJXZWJTb2NrZXRDbGllbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJjbGllbnQiLCJXZWJTb2NrZXQiLCJvbmVycm9yIiwib25vcGVuIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9kZWZpbmVQcm9wZXJ0eSIsImRlY29kZU92ZXJsYXlPcHRpb25zIiwib3ZlcmxheU9wdGlvbnMiLCJvdmVybGF5RmlsdGVyRnVuY3Rpb25TdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc1VubG9hZGluZyIsImN1cnJlbnRIYXNoIiwiX193ZWJwYWNrX2hhc2hfXyIsImdldEN1cnJlbnRTY3JpcHRTb3VyY2UiLCJzY3JpcHRFbGVtZW50cyIsInNjcmlwdEVsZW1lbnRzV2l0aFNyYyIsInBhcnNlVVJMIiwicmVzb3VyY2VRdWVyeSIsInNlYXJjaFBhcmFtcyIsInBhaXIiLCJzY3JpcHRTb3VyY2VVUkwiLCJzY3JpcHRTb3VyY2UiLCJVUkwiLCJmcm9tQ3VycmVudFNjcmlwdCIsInBhcnNlZFJlc291cmNlUXVlcnkiLCJlbmFibGVkRmVhdHVyZXMiLCJQcm9ncmVzcyIsIk92ZXJsYXkiLCJob3QiLCJsaXZlUmVsb2FkIiwib3ZlcmxheSIsIkpTT04iLCJwYXJzZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFNwcmVhZCIsImVycm9ycyIsIndhcm5pbmdzIiwicnVudGltZUVycm9ycyIsImxvZ2dpbmciLCJyZWNvbm5lY3QiLCJzZXRBbGxMb2dMZXZlbCIsIndlYnBhY2tIb3RMb2ciLCJzZXRMb2dMZXZlbCIsImZlYXR1cmVzIiwibGlzdEVuYWJsZWRGZWF0dXJlcyIsImxvZ1N0cmluZyIsImluZm8iLCJsb2dFbmFibGVkRmVhdHVyZXMiLCJjcmVhdGVPdmVybGF5IiwidHJ1c3RlZFR5cGVzUG9saWN5TmFtZSIsImNhdGNoUnVudGltZUVycm9yIiwic2VuZCIsInJlbG9hZEFwcCIsImN1cnJlbnRTdGF0dXMiLCJwcmV2aW91c0hhc2giLCJzZWFyY2giLCJhbGxvd1RvSG90IiwiYWxsb3dUb0xpdmVSZWxvYWQiLCJob3RFbWl0dGVyIiwicG9zdE1lc3NhZ2UiLCJyb290V2luZG93IiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiYXBwbHlSZWxvYWQiLCJjbGVhckludGVydmFsIiwicmVsb2FkIiwiYW5zaVJlZ2V4Iiwic3RyaXBBbnNpIiwib25Tb2NrZXRNZXNzYWdlIiwiaW52YWxpZCIsInNlbmRNZXNzYWdlIiwiaGFzaCIsIl9oYXNoIiwibXNnIiwiaXNQcm9ncmVzc1N1cHBvcnRlZCIsImRlZmluZVByb2dyZXNzRWxlbWVudCIsIm9rIiwiZmlsZSIsIl93YXJuaW5ncyIsInByaW50YWJsZVdhcm5pbmdzIiwiX2Zvcm1hdFByb2JsZW0iLCJmb3JtYXRQcm9ibGVtIiwiaGVhZGVyIiwib3ZlcmxheVdhcm5pbmdzU2V0dGluZyIsIm1lc3NhZ2VzIiwicHJldmVudFJlbG9hZGluZyIsIl9lcnJvcnMiLCJwcmludGFibGVFcnJvcnMiLCJfZm9ybWF0UHJvYmxlbTIiLCJvdmVybGF5RXJyb3JzU2V0dGluZ3MiLCJfZXJyb3IiLCJjcmVhdGVTb2NrZXRVUkwiLCJwYXJzZWRVUkwiLCJob3N0bmFtZSIsImlzSW5BZGRyQW55Iiwic29ja2V0VVJMUHJvdG9jb2wiLCJzb2NrZXRVUkxBdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNvY2tldFVSTEhvc3RuYW1lIiwic29ja2V0VVJMUG9ydCIsInBvcnQiLCJzb2NrZXRVUkxQYXRobmFtZSIsInBhdGhuYW1lIiwib2JqVVJMIiwiYXV0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsInNsYXNoZXMiLCJmb3JtYXRVUkwiLCJzb2NrZXRVUkwiLCJzb2NrZXQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX191bnVzZWRfd2VicGFja19tb2R1bGUiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIlN5bmNCYWlsSG9vayIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlcmF0b3IiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiTG9nVHlwZSIsImZyZWV6ZSIsImRlYnVnIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsInByb2ZpbGUiLCJwcm9maWxlRW5kIiwiTE9HX1NZTUJPTCIsIlRJTUVSU19TWU1CT0wiLCJUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wiLCJXZWJwYWNrTG9nZ2VyIiwiZ2V0Q2hpbGRMb2dnZXIiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsIl9sZW41IiwiX2tleTUiLCJhc3NlcnRpb24iLCJfbGVuNiIsIl9rZXk2IiwiX2xlbjciLCJfa2V5NyIsIl9sZW44IiwiX2tleTgiLCJfbGVuOSIsIl9rZXk5IiwiaHJ0aW1lIiwiZGVsZXRlIiwiTG9nZ2VyIiwiX191bnVzZWRfd2VicGFja19leHBvcnRzIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJkb25lIiwicmV0dXJuIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsImZpbHRlclRvRnVuY3Rpb24iLCJyZWdFeHAiLCJpZGVudCIsIkxvZ0xldmVsIiwiZmFsc2UiLCJ0cnVlIiwidmVyYm9zZSIsIl9yZWYkbGV2ZWwiLCJfcmVmJGRlYnVnIiwiZGVidWdGaWx0ZXJzIiwibG9nbGV2ZWwiLCJsYWJlbGVkQXJncyIsIl9hcmdzIiwibXMiLCJsb2dUaW1lIiwiX2V4dGVuZHMiLCJjcmVhdGVDb25zb2xlTG9nZ2VyIiwiY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zIiwiY3VycmVudERlZmF1bHRMb2dnZXIiLCJnZXRMb2dnZXIiLCJob29rcyIsImNoaWxkTmFtZSIsImNvbmZpZ3VyZURlZmF1bHRMb2dnZXIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJjYWNoZWRNb2R1bGUiLCJkZWZpbml0aW9uIiwid2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fIiwiX193ZWJwYWNrX2lfXyIsIl9fZXNNb2R1bGUiLCJnZXRDb2RlUG9pbnQiLCJjb2RlUG9pbnRBdCIsImlucHV0IiwicmVmZXJlbmNlcyIsImNyZWF0ZU92ZXJsYXlNYWNoaW5lIiwic3RhdGVzIiwiaW5pdGlhbCIsImFjdGlvbnMiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50Q29udGV4dCIsImhpZGVPdmVybGF5Iiwic2hvd092ZXJsYXkiLCJkaXNtaXNzTWVzc2FnZXMiLCJtZXNzYWdlU291cmNlIiwiYXBwZW5kTWVzc2FnZXMiLCJzZXRNZXNzYWdlcyIsImhpZGRlbiIsIkJVSUxEX0VSUk9SIiwiUlVOVElNRV9FUlJPUiIsImRpc3BsYXlCdWlsZEVycm9yIiwiRElTTUlTUyIsImRpc3BsYXlSdW50aW1lRXJyb3IiLCJjdXJyZW50U3RhdGVPbiIsInRyYW5zaXRpb25Db25maWciLCJhY3ROYW1lIiwiYWN0aW9uSW1wbCIsIm5leHRDb250ZXh0VmFsdWUiLCJwYXJzZUVycm9yVG9TdGFja3MiLCJtc2dTdHlsZXMiLCJpZnJhbWVTdHlsZSIsImJvcmRlciIsImNvbnRhaW5lclN0eWxlIiwiYm94U2l6aW5nIiwiZm9udFNpemUiLCJwYWRkaW5nIiwid2hpdGVTcGFjZSIsIm92ZXJmbG93IiwiaGVhZGVyU3R5bGUiLCJmb250RmFtaWx5IiwibWFyZ2luIiwibWF4SGVpZ2h0IiwiZGlzbWlzc0J1dHRvblN0eWxlIiwiY3Vyc29yIiwibXNnVHlwZVN0eWxlIiwibWFyZ2luQm90dG9tIiwibXNnVGV4dFN0eWxlIiwibW9kdWxlTmFtZSIsImxvYyIsImlmcmFtZUNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXJFbGVtZW50IiwiaGVhZGVyRWxlbWVudCIsIm92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kiLCJvbkxvYWRRdWV1ZSIsImFwcGx5U3R5bGUiLCJlbnN1cmVPdmVybGF5RXhpc3RzIiwiY3JlYXRlSFRNTCIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImNvbnRlbnRFbGVtZW50IiwiaW5uZXJUZXh0IiwiY2xvc2VCdXR0b25FbGVtZW50IiwiYXJpYUxhYmVsIiwib3ZlcmxheVNlcnZpY2UiLCJvbkxvYWQiLCJjcmVhdGVDb250YWluZXIiLCJlbnRyeUVsZW1lbnQiLCJ0eXBlRWxlbWVudCIsIm1vZHVsZUlkZW50aWZpZXIiLCJtYWNyb1RleHQiLCJtYWNyb1JlZ0V4cCIsIm1hY3JvUmVwbGFjZXIiLCJyZXBsYWNlUmVzdWx0IiwicmVwbGFjZU1hdGNoIiwicmVwbGFjZUxhc3RJbmRleCIsInJlcGxhY2VJbnB1dCIsInJlcGxhY2VVc2luZ1JlZ0V4cCIsImVuY29kZSIsIm1lc3NhZ2VUZXh0Tm9kZSIsIl9yZWYzJGxldmVsIiwiaGFuZGxlRXJyb3IiLCJmYWxsYmFja01lc3NhZ2UiLCJlcnJvck9iamVjdCIsImVycm9yRXZlbnQiLCJsaXN0ZW5Ub1VuaGFuZGxlZFJlamVjdGlvbiIsInByb21pc2VSZWplY3Rpb25FdmVudCIsInJlYXNvbiIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJjb25zdHJ1Y3QiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2lzTmF0aXZlRnVuY3Rpb24iLCJXcmFwcGVyIiwiX3NldFByb3RvdHlwZU9mIiwiX2NvbnN0cnVjdCIsIkJvb2xlYW4iLCJzZXRQcm90b3R5cGVPZiIsIl9jbGFzc1ByaXZhdGVNZXRob2RJbml0U3BlYyIsIl9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIiwiX2Fzc2VydENsYXNzQnJhbmQiLCJhdHRhY2hTaGFkb3ciLCJfV2VicGFja0RldlNlcnZlclByb2dyZXNzIiwiY3VzdG9tRWxlbWVudHMiLCJfV2VicGFja0RldlNlcnZlclByb2dyZXNzX2JyYW5kIiwiV2Vha1NldCIsIldlYnBhY2tEZXZTZXJ2ZXJQcm9ncmVzcyIsIl9IVE1MRWxlbWVudCIsIm1heERhc2hPZmZzZXQiLCJhbmltYXRpb25UaW1lciIsIl9pbmhlcml0cyIsIl9yZXNldCIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJfdXBkYXRlIiwiZGVmaW5lIiwiX3RoaXMkZ2V0QXR0cmlidXRlIiwiX051bWJlciIsInR5cGVBdHRyIiwiX2NpcmN1bGFyVGVtcGxhdGUiLCJfbGluZWFyVGVtcGxhdGUiLCJzaGFkb3dSb290IiwiaW5pdGlhbFByb2dyZXNzIiwiX2hpZGUiLCJfc2hvdyIsIkNsaWVudCIsIl9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIiwiZGVmYXVsdCIsInJldHJpZXMiLCJtYXhSZXRyaWVzIiwiaGFuZGxlcnMiLCJvbk9wZW4iLCJvbkNsb3NlIiwicmV0cnlJbk1zIiwib25NZXNzYWdlIiwibG9nZ2VyIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJsYXN0SGFzaCIsInVwVG9EYXRlIiwiY2hlY2siLCJ1cGRhdGVkTW9kdWxlcyIsImNhdGNoIiwiZm9ybWF0RXJyb3IiLCJyZW5ld2VkTW9kdWxlcyIsInVuYWNjZXB0ZWRNb2R1bGVzIiwicGFydHMiLCJldmVyeSIsImxvZ0xldmVsIiwiZHVtbXkiLCJzaG91bGRMb2ciLCJsb2dHcm91cCIsImxvZ0ZuIiwibG9jYWxzSnNvblN0cmluZyIsImNzc1JlbG9hZCIsImFjY2VwdCIsImRpc3Bvc2UiLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJodSIsImNodW5rSWQiLCJtaW5pQ3NzRiIsImhtckYiLCJnbG9iYWxUaGlzIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsImNoYXJzZXQiLCJuYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJkb25lRm5zIiwiaGVhZCIsIm5tZCIsInBhdGhzIiwiY3VycmVudENoaWxkTW9kdWxlIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2luZ1Byb21pc2VzV2FpdGluZyIsInNldFN0YXR1cyIsIm5ld1N0YXR1cyIsInJlc3VsdHMiLCJ1bmJsb2NrIiwiaG90Q2hlY2siLCJhcHBseU9uVXBkYXRlIiwiaG1yTSIsImhtckMiLCJwcm9taXNlcyIsImludGVybmFsQXBwbHkiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsImhvdEFwcGx5IiwiZGlzcG9zZVByb21pc2UiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiX21haW4iLCJwYXJlbnRzIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZmV0Y2hQcmlvcml0eSIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4IiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3JlYXRlU3R5bGVzaGVldCIsImZ1bGxocmVmIiwib2xkVGFnIiwibGlua1RhZyIsInJlbCIsIm5vbmNlIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJmaW5kU3R5bGVzaGVldCIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFncyIsIm5ld1RhZ3MiLCJhcHBseUhhbmRsZXIiLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0IiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG1yU19qc29ucCIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwiYWRkQWxsVG9TZXQiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMSIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwicmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=