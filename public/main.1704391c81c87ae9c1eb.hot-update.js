/*! For license information please see main.1704391c81c87ae9c1eb.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/classes/Animation.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n}),Object(function(){var e=new Error("Cannot find module 'classes/Components.js'");throw e.code="MODULE_NOT_FOUND",e}());class n extends(Object(function(){var e=new Error("Cannot find module 'classes/Components.js'");throw e.code="MODULE_NOT_FOUND",e}())){constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.Observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?(console.log("animatein"),this.animateIn()):(console.log("animateOut"),this.animateOut())}))})),this.Observer.observe(this.element)}animateIn(){console.log("animateIn")}animateOut(){console.log("animateOut")}}},"./app/components/preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./node_modules/gsap/index.js");Object(function(){var e=new Error("Cannot find module '../classes/Components'");throw e.code="MODULE_NOT_FOUND",e}());var o=s("./node_modules/lodash/each.js"),a=s.n(o),r=s("./app/utils/text.js");class i extends(Object(function(){var e=new Error("Cannot find module '../classes/Components'");throw e.code="MODULE_NOT_FOUND",e}())){constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text",images:document.querySelectorAll("img")}}),(0,r.split)({element:this.elements.title,expression:"<br>"}),(0,r.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,console.log(this.element,this.elements),this.createLoader()}createLoader(){a()(this.elements.images,(e=>{e.src=e.getAttribute("data-src"),e.onload=()=>this.onAssetLoaded(e)}))}onAssetLoaded(e){this.length+=1;const t=this.length/this.elements.images.length;this.elements.numberText.innerHTML=`${Math.round(100*t)}%`,1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animateOut=n.default.timeline({delay:1.5}),this.animateOut.to(this.elements.titleSpans,{duration:1,ease:"expo.Out",stagger:.3,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:.5,ease:"expo.Out",stagger:.3,y:"100%"},"-=0.3"),this.animateOut.to(this.element,{duration:.5,ease:"expo.out",scaleY:0,transformOrigin:"0 0"}),this.animateOut.call((()=>{this.emit("completed")}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}}},(function(e){e.h=()=>"118e347b310fbb8b9bcb"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2Zsb2VtYS8uL2FwcC9jb21wb25lbnRzL3ByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly9mbG9lbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21wb25lbnQgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnRzLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoeyBlbGVtZW50LCBlbGVtZW50c30pIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudHNcbiAgICB9KVxuXG4gICAgdGhpcy5jcmVhdGVPYnNlcnZlcigpXG5cbiAgICB0aGlzLmFuaW1hdGVPdXQoKVxuXG4gICAgfVxuXG4gIGNyZWF0ZU9ic2VydmVyKCkge1xuICAgIHRoaXMuT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdhbmltYXRlaW4nKVxuICAgICAgICAgIHRoaXMuYW5pbWF0ZUluKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnYW5pbWF0ZU91dCcpXG4gICAgICAgICAgdGhpcy5hbmltYXRlT3V0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMuT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXG4gIH1cblxuICBhbmltYXRlSW4oKSB7XG4gICAgY29uc29sZS5sb2coJ2FuaW1hdGVJbicpXG4gIH1cblxuICBhbmltYXRlT3V0KCkge1xuICAgIGNvbnNvbGUubG9nKCdhbmltYXRlT3V0JylcbiAgfVxufSIsImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi4vY2xhc3Nlcy9Db21wb25lbnRzXCI7XG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCc7XG5pbXBvcnQgeyBzcGxpdCB9IGZyb20gJy4uL3V0aWxzL3RleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVsb2FkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50OiBcIi5wcmVsb2FkZXJcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHRpdGxlOiAnLnByZWxvYWRlcl9fdGV4dCcsXG4gICAgICAgIG51bWJlcjogJy5wcmVsb2FkZXJfX251bWJlcicsIC8vIGdldCBhY2Nlc3MgdG8gdGhlIGxvYWRlciBudW1iZXJcbiAgICAgICAgbnVtYmVyVGV4dDogJy5wcmVsb2FkZXJfX251bWJlcl9fdGV4dCcsXG4gICAgICAgIGltYWdlczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJylcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNwbGl0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMudGl0bGUsXG4gICAgICBleHByZXNzaW9uOiAnPGJyPidcbiAgICB9KVxuXG4gICAgc3BsaXQoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy50aXRsZSxcbiAgICAgIGV4cHJlc3Npb246ICc8YnI+J1xuICAgIH0pXG5cbiAgICB0aGlzLmVsZW1lbnRzLnRpdGxlU3BhbnMgPSB0aGlzLmVsZW1lbnRzLnRpdGxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG5cbiAgICB0aGlzLmxlbmd0aCA9IDBcblxuICAgIGNvbnNvbGUubG9nKHRoaXMuZWxlbWVudCwgdGhpcy5lbGVtZW50cyk7XG5cbiAgICB0aGlzLmNyZWF0ZUxvYWRlcigpO1xuICB9XG5cbiAgY3JlYXRlTG9hZGVyKCkge1xuICAgIGVhY2godGhpcy5lbGVtZW50cy5pbWFnZXMsIGltZyA9PiB7XG5cbiAgICAgIGltZy5zcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpXG4gICAgICBpbWcub25sb2FkID0gKCkgPT4gdGhpcy5vbkFzc2V0TG9hZGVkKGltZylcbiAgICB9KVxuICB9XG5cbiAgb25Bc3NldExvYWRlZChpbWFnZSkge1xuICAgIHRoaXMubGVuZ3RoICs9IDFcblxuICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmxlbmd0aCAvIHRoaXMuZWxlbWVudHMuaW1hZ2VzLmxlbmd0aFxuXG4gICAgdGhpcy5lbGVtZW50cy5udW1iZXJUZXh0LmlubmVySFRNTCA9IGAke01hdGgucm91bmQocGVyY2VudCAqIDEwMCl9JWBcblxuICAgIGlmIChwZXJjZW50ID09PSAxKSB7XG4gICAgICB0aGlzLm9uTG9hZGVkKClcbiAgICB9XG4gIH1cbiAgb25Mb2FkZWQoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICB0aGlzLmFuaW1hdGVPdXQgPSBHU0FQLnRpbWVsaW5lKHtcbiAgICAgIGRlbGF5OiAxLjVcbiAgICB9KVxuICBcbiAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50cy50aXRsZVNwYW5zLCB7XG4gICAgICAvLyBhdXRvQWxwaGE6IDAsIHJlbW92ZWQgYmVjYXVzZSB3ZSBub3QgZ29ubmEgZmFkZSBvdXQgdGhlIHRleHQsIGJ1dCBtYWtlIGl0IHRyYW5zbGF0ZSBkb3duXG4gICAgICBkdXJhdGlvbjogMSxcbiAgICAgIGVhc2U6ICdleHBvLk91dCcsXG4gICAgICBzdGFnZ2VyOiAwLjMsXG4gICAgICB5OiAnMTAwJSdcbiAgICB9KVxuXG5cbiAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50cy5udW1iZXJUZXh0LCB7IC8vIGZhZGUgb3V0IHRoZSAxMDAlIG51bWJlclxuICAgICAgZHVyYXRpb246IDAuNSxcbiAgICAgIGVhc2U6ICdleHBvLk91dCcsXG4gICAgICBzdGFnZ2VyOiAwLjMsXG4gICAgICB5OiAnMTAwJSdcbiAgICB9LCAnLT0wLjMnKVxuXG4gICAgdGhpcy5hbmltYXRlT3V0LnRvKHRoaXMuZWxlbWVudCwgeyAvLyByZW1vdmUgdGhlIHByZWxvYWRlclxuICAgICAgZHVyYXRpb246IDAuNSxcbiAgICAgIGVhc2U6ICdleHBvLm91dCcsXG4gICAgICBzY2FsZVk6IDAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnXG4gICAgfSlcblxuICAgIHRoaXMuYW5pbWF0ZU91dC5jYWxsKCgpID0+IHsgLy8gY2FsbCB0aGUgcmVzb2x2ZSBmdW5jdGlvbiB3aGVuIGNvbXBsZXRpbmcgdGhlIGFuaW1hdGlvblxuICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZWQnKVxuICAgIH0pXG4gIH0pXG59XG4gIGRlc3Ryb3koKSB7ICBcbiAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpXG4gIH0gXG59IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiMTE4ZTM0N2IzMTBmYmI4YjliY2JcIikiXSwibmFtZXMiOlsiQW5pbWF0aW9uIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJzdXBlciIsInRoaXMiLCJjcmVhdGVPYnNlcnZlciIsImFuaW1hdGVPdXQiLCJPYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImZvckVhY2giLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwiY29uc29sZSIsImxvZyIsImFuaW1hdGVJbiIsIm9ic2VydmUiLCJQcmVsb2FkZXIiLCJ0aXRsZSIsIm51bWJlciIsIm51bWJlclRleHQiLCJpbWFnZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzcGxpdCIsImV4cHJlc3Npb24iLCJ0aXRsZVNwYW5zIiwibGVuZ3RoIiwiY3JlYXRlTG9hZGVyIiwiZWFjaCIsImltZyIsInNyYyIsImdldEF0dHJpYnV0ZSIsIm9ubG9hZCIsIm9uQXNzZXRMb2FkZWQiLCJpbWFnZSIsInBlcmNlbnQiLCJpbm5lckhUTUwiLCJNYXRoIiwicm91bmQiLCJvbkxvYWRlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiR1NBUCIsInRpbWVsaW5lIiwiZGVsYXkiLCJ0byIsImR1cmF0aW9uIiwiZWFzZSIsInN0YWdnZXIiLCJ5Iiwic2NhbGVZIiwidHJhbnNmb3JtT3JpZ2luIiwiY2FsbCIsImVtaXQiLCJkZXN0cm95IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9