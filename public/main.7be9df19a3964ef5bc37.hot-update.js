/*! For license information please see main.7be9df19a3964ef5bc37.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Collections/Index.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>n});var i=t("./app/components/Canvas/Collections/Media.js"),h=t("./node_modules/lodash/map.js"),r=t.n(h),l=t("./node_modules/ogl/src/core/Transform.js"),o=t("./node_modules/ogl/src/extras/Plane.js"),a=t("./node_modules/gsap/index.js");const n=class{constructor({gl:e,scene:s,sizes:t}){this.gl=e,this.sizes=t,this.scene=s,this.group=new l.Transform,this.galleryElement=document.querySelector(".collections__gallery__wrapper"),this.mediaElements=document.querySelectorAll(".collections__gallery__media"),this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new o.Plane(this.gl)}createGallery(){this.medias=r()(this.mediaElements,((e,s)=>new i.default({element:e,geometry:this.geometry,index:s,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){r()(this.medias,(e=>e.show()))}hide(){r()(this.medias,(e=>e.hide()))}onResize(e){this.bounds=this.galleryElement.getBoundingClientRect(),this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.x=this.scroll.target=0,this.sizes=e.sizes,r()(this.medias,(s=>s.onResize(e,this.scroll)))}onTouchDown({x:e,y:s}){this.scroll.last=this.scroll.current}onTouchMove({x:e,y:s}){const t=e.start-e.end;this.scroll.target=this.scroll.last-t}onTouchUp({x:e,y:s}){}onWheel({pixelY:e}){this.scroll.target-=e}update(){this.bounds&&(this.scroll.target=a.default.utils.clamp(-1e3,0,this.scroll.target),this.scroll.current=a.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current,r()(this.medias,((e,s)=>{e.update(this.scroll.current)})))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Collections/Media.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>n});var i=t("./node_modules/ogl/src/core/Texture.js"),h=t("./node_modules/ogl/src/core/Program.js"),r=t("./node_modules/ogl/src/core/Mesh.js"),l=t("./node_modules/gsap/index.js"),o=t("./app/shaders/plane-vertex.glsl"),a=t("./app/shaders/plane-fragment.glsl");const n=class{constructor({element:e,geometry:s,gl:t,scene:i,index:h,sizes:r}){this.element=e,this.gl=t,this.geometry=s,this.scene=i,this.index=h,this.sizes=r,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){const e=this.element.querySelector(".collections__gallery__media__image");this.texture=new i.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=e.getAttribute("data-src"),this.image.onload=e=>this.texture.image=this.image}createProgram(){this.program=new h.Program(this.gl,{fragment:a.default,vertex:o.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(e),this.updateX(),this.updateY()}show(){l.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){l.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,s){this.extra={x:0,y:0},this.createBounds(e),this.updateX(s&&s.x),this.updateY(s&&s.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.bounds&&(this.updateX(e),this.updateY())}}}},(function(e){e.h=()=>"f94c0f1b8737043791ba"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,