/*! For license information please see main.4d83d8e7612755d97ca5.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/components/Canvas/Home/Media.js":(e,t,i)=>{i.r(t),i.d(t,{default:()=>r});var s=i("./node_modules/ogl/src/core/Program.js"),n=i("./node_modules/ogl/src/core/Mesh.js"),h=i("./node_modules/gsap/index.js"),o=i("./app/shaders/home-vertex.glsl"),a=i("./app/shaders/home-fragment.glsl");class r{constructor({element:e,geometry:t,gl:i,scene:s,index:n,sizes:h}){this.element=e,this.gl=i,this.geometry=t,this.scene=s,this.index=n,this.sizes=h,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){const e=this.element;this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new s.Program(this.gl,{fragment:a.default,vertex:o.default,uniforms:{uAlpha:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=h.default.utils.random(.02*-Math.PI,.02*Math.PI)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(e),this.updateX(),this.updateY()}show(){h.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){h.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.bounds&&(this.updateX(e.x),this.updateY(e.y))}}},"./app/shaders/home-fragment.glsl":(e,t,i)=>{i.r(t),i.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n   \nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture; // set the color or texture of the cube to red\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/home-vertex.glsl":(e,t,i)=>{i.r(t),i.d(t,{default:()=>s});const s="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform vec2 uViewportSizes;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0); // modeviewMatrix multiply by the position of the vertex\n\n  newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0));\n  // newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) + sin(newPosition.x / uViewportSizes.x * PI + PI / 2.0)) * abs(uSpeed);\n\n  // set the z position of the vertex to the sin of the x position of the vertex\n\n  \n  gl_Position = projectionMatrix * newPosition;\n}"}},(function(e){e.h=()=>"b7cbfdbc7aebdfc7034e"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,